<?php
// $Id: admin_menu.module,v 1.43.2.18 2009/06/21 18:58:04 sun Exp $

/**
 * @file
 * Renders a menu tree for administrative purposes as a dropdown menu at the top
 * of the window.
 */

DEFINE('GOOGLE_GEOCODE_URL', 'http://maps.google.com/maps/geo?');
DEFINE(
	'GOOGLE_MAPS_API_KEY',
	'ABQIAAAAYGs49dqBeuJsv6HJykZIfRRkAZ8QhXHC1XAsIJgOiQy3kBH-pRQE3maWkMWiJU743Jt_QSNflk7xxA'
);
DEFINE("NUM_OF_SIZES", 10);
DEFINE("STALKING_ON", TRUE);

drupal_add_js(drupal_get_path('module', 'styleforhire').'/styleforhire.js');
drupal_add_js(drupal_get_path('theme', 's4h').'/scripts.js');
drupal_add_js(drupal_get_path('theme', 's4h').'/tabs.js');
drupal_add_js(drupal_get_path('theme', 's4h').'/jquery.tooltip.js');

if ( arg(0) != 'adv_search') {

	drupal_add_js(drupal_get_path('theme', 's4h').'/block-fade.js');
}
/* This is default - in case nothing is set */
 //date_default_timezone_set('America/New_York');

/**
 * Implementation of hook_perm().
 */
function styleforhire_perm() {
  return array('edit triggered emails');
}

/**
 * Implementation of hook_menu().9/22/2009
 */
function styleforhire_menu() {
  $items = array();
  
  $items['styleforhire/autocomplete'] = array(
	'page callback' => 'styleforhire_autocomplete',
	'access callback' => TRUE,
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
  );
  
  $items['adv_search'] = array(
    'page callback' => 'styleforhire_adv_search',
    /*'page arguments' => array('admin_menu_theme_settings'),*/
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['adv_search/zip/%'] = array(
    'page callback' => 'styleforhire_basic_search',
    'page arguments' => array(2),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
 
 $items['styling/%'] = array(
    'page callback' => 'styleforhire_find_stylist_by_firstnamedotlastname',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

$items['book_appointment/%'] = array(
    'page callback' => 'styleforhire_book_appointment',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
/* created by subu to handle ajax requests */
  $items['book_appointment_ajax/%/%'] = array(
    'page callback' => 'styleforhire_book_appointment_ajax',
    'page arguments' => array(1,2),
    /*'access arguments' => array(1),*/
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['show_appointment_to_stylist_ajax/%/%'] = array(
    'page callback' => 'styleforhire_show_appointment_to_stylist_ajax',
    'page arguments' => array(1,2),
    /*'access arguments' => array(1),*/
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['stylist_modify_appointment/%'] = array(
    'page callback' => 'styleforhire_stylist_modify_appointment',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['update_event/%/%'] = array(
    'page callback' => 'styleforhire_update_event_ajax',
    'page arguments' => array(1,2,3),
    /*'access arguments' => array(1),*/
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['edit_appointment/%'] = array(
    'page callback' => 'styleforhire_edit_appointment',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
 $items['confirm_appointment/%/%'] = array(
    'page callback' => 'styleforhire_confirm_appointment',
    'page arguments' => array(1,2),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['complete_appointment/%/%'] = array(
    'page callback' => 'styleforhire_complete_appointment',
    'page arguments' => array(1,2),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['remove_special_customers/%/%/%'] = array(
    'page callback' => 'styleforhire_remove_special_customers',
    'page arguments' => array(1,2,3),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['adv_search/results/%'] = array(
    'page callback' => 'styleforhire_adv_search_results',
    'page arguments' => array(2),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user_search/%'] = array(
    'page callback' => 'styleforhire_user_search_results',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
  	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['stylist/%'] = array(
    'page callback' => 'styleforhire_stylist_profile',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['open_slots/%/%/%/%/%'] = array(
    'page callback' => 'styleforhire_open_slots',
    'page arguments' => array(1, 2, 3, 4, 5),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['generate_calendar/%/%/%/%/%'] = array(
    'page callback' => 'styleforhire_generate_calendar',
    'page arguments' => array(1, 2, 3, 4, 5),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

	$items['user/%user_category/schedule'] = array(
		'title' => t('My Schedule'),
		'access callback' => 'styleforhire_can_schedule',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('styleforhire_my_schedule_form', 1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 10,
		'load arguments' => array('%map', '%index')
	);

  $items['admin/settings/triggered_emails'] = array(
	'title' => 'Triggered Emails',
    'page callback' => 'styleforhire_triggered_emails',
    /*'page arguments' => array(1, 2, 3, 4),*/
    'access arguments' => array('edit triggered emails'),
	/*'access callback' => TRUE,*/
	/*'type' => MENU_LOCAL_TASK,*/
  );

  $items['admin/settings/triggered_emails/%'] = array(
	'page callback' => 'drupal_get_form',
	'page arguments' => array('styleforhire_triggered_email_form', 3),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['dashboard'] = array(
	'title' => t('My Dashboard'),
    'page callback' => 'styleforhire_dashboard',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
	'access callback' => 'show_dashboard_link',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['dashboard/%'] = array(
    'page callback' => 'styleforhire_dashboard',
    'page arguments' => array(1),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['giftcertificate/code/%'] = array(
    'page callback' => 'styleforhire_gift_cert_lookup',
    'page arguments' => array(2),
    /*'access arguments' => array(1),*/
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
$items['book_appointment/step3/%'] = array(
    'page callback' => 'styleforhire_bookappointment_step3',
    'page arguments' => array(2),
	'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  /* add akhilesh */
$items['news/press'] = array(
	'title' => t('Press'),
	'page callback' => 'styleforhire_display_press',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
  );
/* end akhilesh */
  $items['user_registration_redirect_to_redeem'] = array(
    'page callback' => 'styleforhire_user_registration_redirect_to_redeem',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['no-stylist-in-area/%'] = array(
		  'page callback' => 'styleforhire_no_stylist_in_area',
		  'page arguments' => array(1),
		  'access arguments' => array('access content'),
		  'type' => MENU_CALLBACK,
  );
  return $items;
}

function styleforhire_user_registration_redirect_to_redeem(){
	global $user;

	if ( $user->uid == 0) {
		drupal_goto('user/register', 'destination=redeem');
	}
}
/* add akhilesh */
function styleforhire_display_press()
{

	$getEconomicCulture = getEconomicCulture();

	//echo "<pre>";
	//print_r($getEconomicCulture);
	//echo "</pre>";

	$Press.='<div id="div-press-image">
			<div id="div-press"><table border="0" >';

	foreach($getEconomicCulture as $keys1 => $values1)
	{ 
		
	//echo $values1['getdata'][0][txt]."<br/>";	
		
	/*foreach($values1['getdata'] as $data)	{echo $data['txt']."<br/>";}*/	
		//$values1['getdata'][0][txt]
	$date_str = '';
	if(!empty($values1['getdata'][0][date])){
		$date_str = '&nbsp;&nbsp;'.$values1['getdata'][0][date].',';
		}
	$Press .='<tr>
			<td id="div-parag">
			<strong id="sub-container-big-header">'.$values1['title'].'</strong>
			<em><strong id="sub-container-big-header">'.$values1['getdata'][0][mag].'</strong></em>
			<em><strong id="sub-container-big-header">('.$values1['getdata'][0][month].$date_str.'&nbsp;&nbsp;'.$values1['getdata'][0][year].').</strong></em>
			<a style="color:#0B89A9;text-decoration:none;" href="'.$values1['getdata'][0][presslink].'">Click here</a>
			</td>
			<td id="div-image-section">
			<a target="_blank" style="color:#0B89A9;text-decoration:none;" href="'.$values1['getdata'][0][presslink].'">
			<img src="/'.$values1['imagePath'].'" alt="" ></a></td>
		</tr>';
	}
	$Press .='</tr></table></div>'.theme('pager', NULL, $limit, 0).'</div>';
	
	return $Press;
}
/* 
 * @return Returns press content
 */
function getEconomicCulture()
{
	$limit=5;

	$arreconomiclist = array();
   
   	$query	= "SELECT * FROM {node} WHERE type = 'press'";

	$count	= "select count(*) from {node} where type='press'";
	$count	= db_rewrite_sql($count);

	$query	= db_rewrite_sql($query);
	$res	= pager_query($query, $limit, 0,$count);

	//$res = db_query($query);
	
	while($row = db_fetch_object($res))
	{
		$node_detail	= node_load($row->nid);
		$imagePath	= lookupImagePath($node_detail->nid, $original = true); 
		$getdata	= getdata($node_detail->nid); 
	$arreconomiclist[] = array('nid' => $row1->nid, 'title' => $node_detail->title,'news' => $node_detail->body, 'imagePath' => $imagePath, 'getdata'=>$getdata);
	}
	
	return $arreconomiclist;
}

function getdata($nid)
{ 
	$arrdata = array();
	$query1 = "SELECT * FROM {content_type_press} WHERE nid=".$nid;
	$res1 = db_query($query1);		
	while($row1 = db_fetch_object($res1))
	{
		$node_detail1 = node_load($row1->nid);
		
		$arrdata[] = array('nid' => $row1->nid, 'txt' => $row1->field_presstext_value,'mag' => $row1->field_magartname_value, 'month' => $row1->field_month_value, 'date' => $row1->field_date_value, 'year' => $row1->field_year_value, 'presslink' => $row1->field_presslink_value);	
	}
	return $arrdata;

}

function lookupImagePath($nid, $original = false)
{ 
	
	if ($original) {
		$size = '_original';
	} else {
		$size = 'thumbnail';
	}
 
	$sql  = 'SELECT f.filepath ';
	$sql .= 'FROM image_attach a, image i, files f ';
	$sql .= 'WHERE a.iid = i.nid ';
	$sql .= 'AND i.fid = f.fid ';
	$sql .= 'AND a.nid = ' . $nid . ' ';
	$sql .= 'AND i.image_size = "' . $size . '" ';
	
	$res = db_query($sql);
	$row = db_fetch_array($res);
	$filepath = $row['filepath'];
	
	return $filepath;
 
} 
/* End akhilesh */

function styleforhire_gift_cert_lookup($code) {

	drupal_add_css(path_to_theme().'/.gift-cert.css');

	$result = db_query('
	
		SELECT ugc.*, uop.data
		FROM uc_gift_certificates ugc 
		JOIN uc_order_products uop ON ugc.order_product_id=uop.order_product_id
		WHERE ugc.cert_code="%s"

	', $code);

	//var_dump(path_to_theme(), $code, $result);

	$row = db_fetch_array($result);

	//$gc_value	= "250";
	//$gc_to		= "Andrew";
	//$gc_from	= "Cindy";
	//$gc_mesg	= "<p>Enjoy! I recommend Jackie O...she's the best.</p><p>Oh, and don't forget to embrace the pocket-square.</p>";
	//$gc_code	= "SFH-81-84627449";

	if ( $row === FALSE) { drupal_goto(); }

	$row['data'] = unserialize($row['data']);

	//var_dump($row);

	return theme(
		'gift_certificate',
		$row['value'],
		$row["data"]["attributes"]["Recipient's First Name"][0],
		$row["data"]["attributes"]["Sender's First Name"][0],
		$row["data"]["attributes"]["Message To Recipient"][0],
		$row["data"]["attributes"]["Certificate Code"][0]
	);
}

function styleforhire_theme() {
	return array(
		'gift_certificate' => array(
			'arguments' => array(
				'gc_value' => NULL,
				'gc_to' => NULL,
				'gc_from' => NULL,
				'gc_mesg' => NULL,
				'gc_code' => NULL
			)
		),
		'account_info' => array(
			'arguments' => array(
				'user_data' => NULL
			)
		),
		'client_dashboard' => array(
			'arguments' => array(
				'user' => NULL,
				'user_data' => NULL,
				'node' => NULL
			)
		),
		'stylist_add_discounts_for_customers_form' => array(),
		'stylist_add_non_sfh_customers_form' => array(),
		'stylist_basic_personal_form' => array()
	);
}


function show_dashboard_link() {

	global $user;

	if ( $user->uid > 0 ) {

		return true;
	}

	return false;
}

function styleforhire_cron() {

	/* check for alerts */

	/* check for past due unconfirmed */

	$result = db_query("
		
		SELECT DISTINCT n.nid,
			n.uid,n.created,
			cta.field_apt_date_value,
			ctp.field_first_name_value AS stylist_first_name,
			ctp.field_last_name_value AS stylist_last_name,
			u2.mail
			
		FROM node n

		JOIN users u ON u.uid=n.uid

		JOIN content_type_appointment cta ON cta.nid=n.nid
		/*JOIN content_field_apt_date cfad ON cfad.nid=n.nid*/

		JOIN node pn ON cta.field_apt_stylist_uid=pn.uid AND pn.type='profile'
		LEFT JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		JOIN users u2 ON u2.uid=pn.uid
		
		WHERE n.type='appointment' AND
				cta.field_apt_status_value='Unconfirmed' AND
				n.status=1 AND
				(unix_timestamp(current_timestamp) - (n.created)) < 10*24*60*60 AND
				n.created < %d

	", (time() - 86400)); 
/* The above sql query - If a stylist is a serious screw-up, she will get 9 reminders on each day after the first day.
	Keep in mind that the dm_alert table will be filled only after a day (if the stylist forgets to confirm the appointment
*/
	while($row = db_fetch_array($result)) {

		$result2 = db_query(
			"select alert_count FROM dm_alerts WHERE uid=%d AND nid=%d AND type=0", $row['uid'], $row['nid']
		);

		$result2 = db_result($result2);

		if ( $result2 === FALSE) {
			$trigger_dm_alert = true;
			db_query("
				
				INSERT IGNORE INTO dm_alerts
				(timestamp, uid, dm_uid, nid, alert, type, alert_count)
				VALUES (%d, %d, 0, %d, '%s', 0, 0)
			", time(),
				$row['uid'],
				$row['nid'],
				$row['stylist_first_name'].' '.$row['stylist_last_name'].' has not responded to a confirmation request for a '.l('styling appointment', 'node/'.$row['nid']).' with '.$row['first_name'].' '.$row['last_name'].' on '.format_date($row['field_apt_date_value'])
			);
		}
		else{
			$alert_count = (int)$result2;
			//styleforhire_debug($alert_count,"Alert count in else");
			$delta = (time() - (int)$row['created'])/(24*60*60);
			//styleforhire_debug($delta, "DELTA");
			//styleforhire_debug(time(), "CURRENT TIME");
			//styleforhire_debug((int)$row['created'], "CREATED TIME");
			if($alert_count < (int)$delta){
				styleforhire_debug("set $alertcount +=1", "Send email");
				db_query("UPDATE dm_alerts SET alert_count=%d where nid=%d", ++$alert_count, $row['nid']);
				styleforhire_build_email(
				'daily_appt_reminder_stylist_to_confirm',
				$row['mail'],
				$row['nid']
			);
			}
			
			
		}
	}

	$result = db_query("
		
		SELECT DISTINCT n.nid,
			n.uid,
			cta.field_apt_date_value,
			ctp.field_first_name_value AS stylist_first_name,
			ctp.field_last_name_value AS stylist_last_name,
			coalesce(ctp2.field_first_name_value, u.name) AS first_name,
			ctp2.field_last_name_value AS last_name
			
		FROM node n

		JOIN users u ON u.uid=n.uid

		JOIN content_type_appointment cta ON cta.nid=n.nid
		/*JOIN content_field_apt_date cfad ON cfad.nid=n.nid*/

		JOIN node pn ON cta.field_apt_stylist_uid=pn.uid AND pn.type='profile'
		LEFT JOIN content_type_profile ctp ON ctp.nid=pn.nid

		JOIN node pn2 ON n.uid=pn2.uid AND pn.type='profile'
		LEFT JOIN content_type_profile ctp2 ON ctp2.nid=pn2.nid
		
		WHERE n.type='appointment' AND
				cta.field_apt_status_value='confirmed' AND
				n.status=1 AND
				cta.field_apt_date_value BETWEEN %d AND %d
	", time() - 5*24*60*60, time());


	while($row = db_fetch_array($result)) {

		//var_dump($row);

		$result2 = db_query(
			"select 1 FROM dm_alerts WHERE uid=%d AND nid=%d AND type=1", $row['uid'], $row['nid']
		);

		$result2 = db_result($result2);

		if ( $result2 === FALSE) {

			$trigger_dm_alert = TRUE;
			
			db_query("
			 INSERT INTO {dm_alerts}
			(timestamp, uid, dm_uid, nid, alert, type, alert_count)
			VALUES (%d, %d, 0, %d, '%s', 1, 0)
			",
			time(),
			$row['uid'],
			$row['nid'],
			$row['stylist_first_name'] . ' ' . $row['stylist_last_name'] .
			' did not complete her ' .
			l('styling appointment', 'node/' . $row['nid']) .
			' yesterday with '.$row['first_name'] . ' '  .
			$row['last_name'] . '.');
		}
		$notes = $row['stylist_first_name'] . ' ' . $row['stylist_last_name'] .
			' did not complete her ' .
			l('styling appointment', 'node/' . $row['nid'], array('absolute' => TRUE)) .
			' yesterday with '.$row['first_name'] . ' '  .
			$row['last_name'] . '.';
		
		
		$params = array(
				'subject' => "Alert - Stylist hasn't completed her appointment",
				'body' => $notes,
			);
		if ( $trigger_dm_alert === TRUE) {
			$result = db_query('SELECT u.uid FROM users u JOIN users_roles ur ON u.uid=ur.uid WHERE ur.rid=%d', 7);
			while($row = db_fetch_array($result)) {
				$user = user_load(array('uid' => $row['uid']));			
				/*styleforhire_build_email(
					'new_alert',
					$user->mail,
					$row['uid']
				);*/
				$message = drupal_mail(
					'styleforhire',
					'email_trigger',
					$user->mail,
					language_default(),
					$params
				);
			}
		}
	}
	$result = db_query("
		
		SELECT DISTINCT n.nid,
			n.uid,
			cta.field_apt_stylist_uid
			
		FROM node n

		JOIN users u ON u.uid=n.uid

		JOIN content_type_appointment cta ON cta.nid=n.nid
		
		WHERE n.type='appointment' AND
				cta.field_apt_status_value='Confirmed' AND
				n.status=1 AND
				field_apt_date_value < %d 
				AND field_apt_date_value > %d

	", (time() + (86400*2)), time());

	$alerts = variable_get('s4h_alerts', array());

	while($row = db_fetch_array($result)) {

		if ( !isset($alerts[$row['nid']])) {

			//var_dump($row);

			$user = user_load(array('uid' => $row['uid']));

			//var_dump($user->mail);

			styleforhire_build_email(
				'appt_reminder_client',
				$user->mail,
				$row['nid']
			);

			$user = user_load(array('uid' => $row['field_apt_stylist_uid']));

			//var_dump($user->mail);

			styleforhire_build_email(
				'appt_reminder_stylist',
				$user->mail,
				$row['nid']
			);

			$alerts[$row['nid']] = time() + (86400*2);
		}
	}

	foreach($alerts as $index => $value) {

		if ( $value < time()) {

			unset($alerts[$index]);
		}
	}

	variable_set('s4h_alerts', $alerts);

	//exit;

/*

*/

}

function styleforhire_dashboard($uid) {
	
	if ( empty($uid)) {

		global $user;
		drupal_goto('dashboard/'.$user->uid);
	}
	else{
		global $user;
		$stalker_id = $user->uid;//subu code
		if(isset($user->roles[7]) || isset($user->roles[10]) || isset($user->roles[8])){
			$is_stalker_dm_admin = true;
		}
		$username = styleforhire_user_name($user->uid);
		unset($user);
	}

	$user = user_load(
		array("uid"=>$uid)
	);

	drupal_set_title($username."'s Dashboard");

	if ( isset($user->roles[9]) ) {

		return styleforhire_corp_dashboard($user);
	}
	else if ( isset($user->roles[8]) ) {

		return styleforhire_customer_service_dashboard($user);
	}
	else if ( isset($user->roles[3]) or isset($user->roles[7]) ) {

		return styleforhire_stylist_dashboard($user,$stalker_id, $is_stalker_dm_admin);
	}
	else /*( isset($user->roles[4]) )*/ {

		//return styleforhire_client_dashboard($user); - dont return the client dashboard - temporary fix
	}
	/*
	else {

		drupal_set_title('Welcome to your account!');
		return '<div>Please '.l('Click Here', 'user/'.$user->uid.'/edit/profile').' to complete your profile information before proceeding</div>';
	}*/

	return '';
}

function styleforhire_build_email($email_template, $email_to, $id, $id2 = NULL) {

	$email_templates = styleforhire_triggered_emails_list();
	$email_template_values = $email_templates[$email_template];

	$variables = array();
	foreach($email_template_values['query']['variables'] as $key => $value) {
		$variables[] = "$key AS $value";
	}

	$joins = array();
	foreach($email_template_values['query']['joins'] as $key => $value) {
		$joins[] = "LEFT JOIN $key ON $value";
	}

	$where = $email_template_values['query']['where'];

	$sql = "
		SELECT ".implode(", " , $variables)."
		FROM {$email_template_values['query']['from']}
		".implode(" " , $joins)."
		WHERE $where
	";

	
	if(strcmp($email_template,"printable_gift_cert")==0){
		$sql =  "select ucg.cert_code as gc_code, round(ucg.value,2) as gc_value,uop.data as gc_data from uc_gift_certificates ucg 
				JOIN uc_order_products uop ON uop.order_id=ucg.order_id
				where ucg.order_id=%d";
	}
	$result = db_query($sql, $id, $id2);
	$vars = db_fetch_array($result);
	if(strcmp($email_template,"printable_gift_cert")==0){
		$vars['gc_data'] = unserialize($vars['gc_data']);
		$vars['r_first_name'] = $vars["gc_data"]["attributes"]["Recipient's First Name"][0];
		$vars['r_last_name'] = $vars["gc_data"]["attributes"]["Recipient's Last Name"][0];
		$vars['s_first_name'] = $vars["gc_data"]["attributes"]["Sender's First Name"][0];
		$vars['s_last_name'] = $vars["gc_data"]["attributes"]["Sender's Last Name"][0];
		unset($vars['gc_data']);
	}

	date_default_timezone_set(styleforhire_timezone($vars["stylist_region"]));	
	foreach($vars as $key => $value) {

		if ( stripos($key, "date")) {
			$value = format_date($value, 'custom', 'M d, Y'); 
		}
		elseif ( stripos($key, "time")) {
		//	$value = format_date($value+$tz, 'custom', 'h:i a ');  
		$value = date('h:ia T', $value); /* This cannot be format_date. Has to be date to convert into user timezone.*/
		}
		elseif ( stristr($key, "appointment_type") != FALSE) {
			if		(stristr($value, "closet audit") != FALSE) $value = 'Closet Audit';
			elseif	(stristr($value, "personal shopping: shopping with you") != FALSE) $value = 'Personal Shopping: Shopping with you';
			elseif	(stristr($value, "personal shopping: shopping for you") != FALSE) $value = 'Personal Shopping: Shopping for you';
			elseif	(stristr($value, "closet shopping") != FALSE) $value = 'Closet Shopping';
			elseif	(stristr($value, "stylist introduction") != FALSE) $value = 'Stylist Introduction';
		}
		//var_dump($key);
		
		$vars['['.$key.']'] = $value;
		unset($vars[$key]);
	}

	//var_dump($vars, $id, $id2);exit;
	
	$current_config = variable_get('s4h_email_'.$email_template, array('subject'=>'','body'=>''));
	
	if ($email_template == 'reminder_rate_stylist') {
	  $uid = $vars['[client_uid]'];
	  /*var_dump($uid);var_dump($sql); exit;*/
	  $ucode = sha1($uid.time());
	  $stylist_uid = $vars['[stylist_uid]'];
	  $appt_id = $vars['[appointment_id]'];
	  db_query("INSERT INTO {rating_stylist} (uid, ucode, stylist_uid, appt_id) VALUES (%d, '%s', %d, %d)", $uid, $ucode, $stylist_uid, $appt_id);
	  
    $current_config['body'] = str_replace(
		  '[ucode]', 
		  $ucode,
		  $current_config['body']
	  ); 	  
  }

	

	$current_config['subject'] = str_replace(
		array_keys($vars), 
		array_values($vars),
		$current_config['subject']
	);

	$current_config['body'] = str_replace(
		array_keys($vars), 
		array_values($vars),
		$current_config['body']
	);
	
 
	//var_dump('s4h_email_'.$email_template, $subject, $body);
	$message = drupal_mail(
		'styleforhire',
		'email_trigger',
		$email_to,
		language_default(),
		$current_config
	);
}

function styleforhire_mail($key, &$message, $params)
{
	// Setting the header content type as html prevents line-breaks and other formatting.
	// This should be enabled in one of the feature improvements where we format all the
	// emailes as html formatted emails.
	//$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
	
	$message['subject'] = $params['subject'];
	$message['body'] = $params['body'];
	switch($key) {
	case 'email_trigger':
		$message['headers']['BCC'] = "service@styleforhire.com,subu.sundaram@styleforhire.com";
		break;
	}
}

function styleforhire_triggered_email_appointment() {

	return array(
		'variables' => array(
			'spn.uid' => 'stylist_uid',
			/*'cpn.uid' => 'client_uid',*/
			'u.uid' => 'client_uid',
			'sctp.field_first_name_value' => 'stylist_first_name',
			'sctp.field_last_name_value' => 'stylist_last_name',
			/* I am not storing the client login info. So cctp.field_first_name_value will return null. I have to replace it with values from 
			cta2.field_apt_fname_value and cta2.apt_name_value
			'cctp.field_first_name_value' => 'client_first_name',
			'cctp.field_last_name_value' => 'client_last_name', 
			*/
			'cta2.field_apt_fname_value' => 'client_first_name',
			'cta2.field_apt_name_value'	=> 'client_last_name',
			'ant.title' => 'appointment_type',
			'n.nid' => 'appointment_id',
			'cctp.field_address1_value' => 'client_address1',
			'cctp.field_address2_value' => 'client_address2',
			'cctp.field_city_value' => 'client_city',
			'cctp.field_state_value' => 'client_state',
			'cctp.field_zip_value' => 'client_zip',
			'cta2.field_apt_phone_value' => 'client_phone',
			'sctp.field_phone_num_value' => 'stylist_phone',
			'u.mail' => 'client_email',
			'u2.mail' => 'stylist_email',
			'cta.field_apt_date_value' => 'appointment_date',
			'cta2.field_apt_date_value' => 'appointment_start_time',
			'cta2.field_apt_date_value2' => 'appointment_end_time',
			'cta2.field_apt_address1_value' => 'appointment_address1',
			'cta2.field_apt_address2_value' => 'appointment_address2',
			'cta2.field_apt_city_value' => 'appointment_city',
			'cta2.field_apt_state_value' => 'appointment_state',
			'cta2.field_apt_zip_value' => 'appointment_zip',
			'ctsf.field_region_value' => 'stylist_region',
		),
		'from' => 'node n',
		'joins' => array(
			'content_type_appointment cta' => 'cta.nid=n.nid',
			'content_type_appointment cta2' => 'cta2.nid=n.nid',
			/*'content_field_apt_date cfad' => 'cfad.nid=n.nid',
			'content_field_apt_date cfad2' => 'cfad2.nid=n.nid',*/
			'node spn' => 'cta.field_apt_stylist_uid=spn.uid AND spn.type="profile"',
			'content_type_profile sctp' => 'sctp.nid=spn.nid',
			'node cpn' => 'n.uid=cpn.uid AND cpn.type="profile"', 
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
			'node nsf' => 'nsf.uid=cta.field_apt_stylist_uid AND nsf.type="stylists_file"', 
			'content_type_stylists_file ctsf' => 'ctsf.nid=nsf.nid',
			'node ant' => 'ant.nid=cta.field_apt_type_nid',
			'users u' => 'u.uid=n.uid',
			'users u2' => 'cta.field_apt_stylist_uid=u2.uid'
		),
		'where' => 'n.nid=%s GROUP BY n.nid'
	);
}

function styleforhire_triggered_email_stylist() {

	return array(
		'variables' => array(
			'spn.uid' => 'stylist_uid',
			'cpn.uid' => 'client_uid',
			'sctp.field_first_name_value' => 'stylist_first_name',
			'sctp.field_last_name_value' => 'stylist_last_name',
			'cctp.field_first_name_value' => 'client_first_name',
			'cctp.field_last_name_value' => 'client_last_name',
			'cctp.field_address1_value' => 'client_address1',
			'cctp.field_address2_value' => 'client_address2',
			'cctp.field_city_value' => 'client_city',
			'cctp.field_state_value' => 'client_state',
			'cctp.field_zip_value' => 'client_zip',
			'cctp.field_phone_num_value' => 'client_phone',
			'sctp.field_phone_num_value' => 'stylist_phone',
			'u.mail' => 'client_email',
			'u2.mail' => 'stylist_email',
		),
		'from' => 'users u',
		'joins' => array(
			'node cpn' => 'u.uid=cpn.uid AND cpn.type="profile"',
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
			'node spn' => 'spn.type="profile"',
			'content_type_profile sctp' => 'sctp.nid=spn.nid',
			'users u2' => 'spn.uid=u2.uid'
		),
		'where' => 'u.uid=%d AND u2.uid=%d'
	);
}

function styleforhire_triggered_gift_cert() {

	return array(
		'variables' => array(
			'cpn.uid' => 'client_uid',
			'cctp.field_first_name_value' => 'client_first_name',
			'cctp.field_last_name_value' => 'client_last_name',
			'cctp.field_address1_value' => 'client_address1',
			'cctp.field_address2_value' => 'client_address2',
			'cctp.field_city_value' => 'client_city',
			'cctp.field_state_value' => 'client_state',
			'cctp.field_zip_value' => 'client_zip',
			'cctp.field_phone_num_value' => 'client_phone',
			'u.mail' => 'client_email',
			'ucg.cert_code' => 'certficate_code',
			'ucg.value' => 'gift_value',
			'uco.billing_first_name' => 'billing_first_name',
			'uco.billing_last_name' => 'billing_last_name',
			'uop.data' => 'data'
		),
		'from' => 'uc_gift_certificates ucg',
		'joins' => array(
			'users u' => 'u.uid=ucg.purchaser_id',
			'node cpn' => 'u.uid=cpn.uid AND cpn.type="profile"',
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
			'uc_orders uco' => 'uco.order_id=ucg.order_id',
			'uc_order_products uop' => 'uop.order_id=ucg.order_id'
		),
		'where' => 'ucg.order_id=%d'
	);
}

function styleforhire_triggered_email_dm() {

	return array(
		'variables' => array(
			'spn.uid' => 'stylist_uid',
			'cpn.uid' => 'client_uid',
			'sctp.field_first_name_value' => 'stylist_first_name',
			'sctp.field_last_name_value' => 'stylist_last_name',
			'sctp.field_first_name_value' => 'stylist_first_name',
			'sctp.field_last_name_value' => 'stylist_last_name',
			'sctp.field_address1_value' => 'stylist_address1',
			'sctp.field_address2_value' => 'stylist_address2',
			'sctp.field_city_value' => 'stylist_city',
			'sctp.field_state_value' => 'stylist_state',
			'sctp.field_zip_value' => 'stylist_zip',
			'cctp.field_first_name_value' => 'dm_first_name',
			'cctp.field_last_name_value' => 'dm_last_name',
			'cctp.field_address1_value' => 'dm_address1',
			'cctp.field_address2_value' => 'dm_address2',
			'cctp.field_city_value' => 'dm_city',
			'cctp.field_state_value' => 'dm_state',
			'cctp.field_zip_value' => 'dm_zip',
			'cctp.field_phone_num_value' => 'dm_phone',
			'sctp.field_phone_num_value' => 'stylist_phone',
			'u.mail' => 'dm_email',
			'u2.mail' => 'stylist_email',
		),
		'from' => 'users u',
		'joins' => array(
			'node cpn' => 'u.uid=cpn.uid AND cpn.type="profile"',
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
			'node spn' => 'spn.type="profile"',
			'content_type_profile sctp' => 'sctp.nid=spn.nid',
			'users u2' => 'spn.uid=u2.uid'
		),
		'where' => 'u.uid=%d AND u2.uid=%d'
	);
}

function styleforhire_triggered_email_dm_only() {

	return array(
		'variables' => array(
			'cpn.uid' => 'dm_uid',
			'cctp.field_first_name_value' => 'dm_first_name',
			'cctp.field_last_name_value' => 'dm_last_name',
			'cctp.field_address1_value' => 'dm_address1',
			'cctp.field_address2_value' => 'dm_address2',
			'cctp.field_city_value' => 'dm_city',
			'cctp.field_state_value' => 'dm_state',
			'cctp.field_zip_value' => 'dm_zip',
			'cctp.field_phone_num_value' => 'dm_phone',
			'u.mail' => 'dm_email',
		),
		'from' => 'users u',
		'joins' => array(
			'node cpn' => 'u.uid=cpn.uid AND cpn.type="profile"',
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
		),
		'where' => 'u.uid=%d'
	);
}

function styleforhire_triggered_rate_stylist() {

	return array(
		'variables' => array(
			'spn.uid' => 'stylist_uid',
			'u.uid' => 'client_uid',
			'sctp.field_first_name_value' => 'stylist_first_name',
			'sctp.field_last_name_value' => 'stylist_last_name',
			/* I am not storing the client login info. So cctp.field_first_name_value will return null. I have to replace it with values from 
			cta2.field_apt_fname_value and cta2.apt_name_value
			'cctp.field_first_name_value' => 'client_first_name',
			'cctp.field_last_name_value' => 'client_last_name', 
			*/
			'cta2.field_apt_fname_value' => 'client_first_name',
			'cta2.field_apt_name_value'	=> 'client_last_name',
			'ant.title' => 'appointment_type',
			'n.nid' => 'appointment_id',
			'cctp.field_address1_value' => 'client_address1',
			'cctp.field_address2_value' => 'client_address2',
			'cctp.field_city_value' => 'client_city',
			'cctp.field_state_value' => 'client_state',
			'cctp.field_zip_value' => 'client_zip',
			'cta2.field_apt_phone_value' => 'client_phone',
			'sctp.field_phone_num_value' => 'stylist_phone',
			'u.mail' => 'client_email',
			'u2.mail' => 'stylist_email',
			'cta.field_apt_date_value' => 'appointment_date',
			'cta2.field_apt_date_value' => 'appointment_start_time',
			'cta2.field_apt_date_value2' => 'appointment_end_time'
		),
		'from' => 'node n',
		'joins' => array(
			'content_type_appointment cta' => 'cta.nid=n.nid',
			'content_type_appointment cta2' => 'cta2.nid=n.nid',
			/*'content_field_apt_date cfad' => 'cfad.nid=n.nid',
			'content_field_apt_date cfad2' => 'cfad2.nid=n.nid',*/
			'node spn' => 'cta.field_apt_stylist_uid=spn.uid AND spn.type="profile"',
			'content_type_profile sctp' => 'sctp.nid=spn.nid',
			'node cpn' => 'n.uid=cpn.uid AND cpn.type="profile"',
			'content_type_profile cctp' => 'cctp.nid=cpn.nid',
			'node ant' => 'ant.nid=cta.field_apt_type_nid',
			'users u' => 'u.uid=n.uid',
			'users u2' => 'cta.field_apt_stylist_uid=u2.uid'
		),
		'where' => 'n.nid=%s GROUP BY n.nid'
	);
}

function styleforhire_triggered_emails_list() {

	return array(
		'appt_notice_to_stylist' => array(
			'title' => 'Appointment notice to Stylist',
			'description' =>'Client makes new appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'appt_notice_to_stylist_personal_email' => array(
			'title' => 'Appointment notice to Stylists Personal Email',
			'description' =>'Client makes new appointment - This notice goes to Stylists personal email',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		)/*,
		'appt_confirmation' => array(
			'title' => 'Order confirmation to Client',
			'description' =>'Client makes new appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		)*/,
		'appt_confirmed_notice_to_client' => array(
			'title' => 'Appt confirmed notice to Client',
			'description' =>'Stylist confirms Clients appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'notice_stylist_cancel' => array(
			'title' => 'Notice to Client that Stylist needs to cancel her appointment',
			'description' =>'Stylist cancels appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'notice_client_cancel' => array(
			'title' => 'Notice to Stylist that Client has canceled her appointment',
			'description' =>'Client cancels appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		)/*,
		'confirm_client_cancelled' => array(
			'title' => 'Confirmation to Client that an appointment has been cancelled',
			'description' =>'Client cancels appointment',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		)*/,
		'notice_stylist_modify' => array(
            'title' => 'Notice to Stylist once Stylist modifies the appointment',
            'description' =>'Stylist modifies Clients appointment',
            'query' => styleforhire_triggered_email_appointment(),
            'subjects' => array('Appointment ID', 'N/A')
        ),
		'notice_client_modify' => array(
            'title' => 'Notice to Client that Stylist has modified the appointment',
            'description' =>'Stylist modifies Clients appointment',
            'query' => styleforhire_triggered_email_appointment(),
            'subjects' => array('Appointment ID', 'N/A')
        ),
		'appt_reminder_client' => array(
			'title' => 'Appointment reminder to Client',
			'description' =>'Sent 48 hours prior to appointment start time',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'appt_reminder_stylist' => array(
			'title' => 'Appointment reminder to Stylist',
			'description' =>'Sent 48 hours prior to appointment start time',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'daily_appt_reminder_stylist_to_confirm' => array(
			'title' => 'Appointment reminder to Stylist to Confirm a new appointment',
			'description' =>'This is sent to those who dont confirm an appointment within 24 hours. The same email is sent everyday until the appointment is confirmed',
			'query' => styleforhire_triggered_email_appointment(),
			'subjects' => array('Appointment ID', 'N/A')
		),
		'reminder_rate_stylist' => array(
			'title' => 'Reminder to Client to rate Stylist',
			'description' =>'Stylist clicks complete to indicate appointment took place',
			'query' => styleforhire_triggered_rate_stylist(),
			'subjects' => array('Appointment ID', 'N/A')
		)/*,
		'notice_new_stylist_in_area' => array(
			'title' => 'Notification - New Stylist in area ',
			'description' =>'New Stylist profile goes public',
			'query' => styleforhire_triggered_email_stylist(),
			'subjects' => array('Client ID', 'Stylist ID')
		),
		'recieved_application' => array(
			'title' => 'Receipt of application email to new Stylist',
			'description' =>'New Stylist submits application',
			'query' => styleforhire_triggered_email_dm(),
			'subjects' => array('District Manager ID', 'Stylist ID')
		),
		'new_application' => array(
			'title' => 'Internal email notifying District Manager that a new Stylist has applied in her region',
			'description' =>'New Stylist submits application',
			'query' => styleforhire_triggered_email_dm(),
			'subjects' => array('District Manager ID', 'Stylist ID')

		)*/,
		'new_alert' => array(
			'title' => 'Notification to DM of new alert',
			'description' =>'DM receives new alert',
			'query' => styleforhire_triggered_email_dm_only(),
			'subjects' => array('District Manager ID', 'N/A')
		),
		'printable_gift_cert' => array(
			'title' => 'A printable gift cert is purchased',
			'description' =>'Gift cert is purchased',
			'query' => styleforhire_triggered_gift_cert(),
			'subjects' => array('Order ID', 'N/A')
		)
	);
}

function styleforhire_triggered_emails() {

	$triggered_emails = styleforhire_triggered_emails_list();

	$output = '<table class="triggered-emails">
				<tr><td>Email</td><td>Trigger</td></tr>';

	foreach($triggered_emails AS $key => $value) {

		$output .= '<tr><td>'.l($value['title'], 'admin/settings/triggered_emails/'.$key).'</td>';
		$output .= '<td>Trigger: '.$value['description'].'</td></tr>';
	}

	return $output.'</table>';
}

function styleforhire_triggered_email_form($form, $email_template) {

	$email_templates = styleforhire_triggered_emails_list();
	$email_template_values = $email_templates[$email_template];

	drupal_set_title($email_template_values['title']);

	$availible_vars = "[".implode("], [", $email_template_values['query']['variables'])."]";

	$current_config = variable_get('s4h_email_'.$email_template, array('subject'=>'','body'=>''));

	$form = array(
		'email_template' => array(
			'#type' => 'hidden',
			'#value' => $email_template
		),
		'subject' => array(
			'#prefix' => l('<< Back', 'admin/settings/triggered_emails').
							'<div id="availible-vars">'.$availible_vars.'</div>',
			'#type' => 'textfield',
			'#title' => t('Subject'),
			'#default_value' => $current_config['subject']
		),
		'body' => array(
			'#type' => 'textarea',
			'#title' => t('Body'),
			'#rows' => 10,
			'#default_value' => $current_config['body']
		),
		'testing' => array(
			'#collapsible' => true,
			'#collapsed' => true,
			'#type' => 'fieldset',
			'#title' => 'Email Testing',
			'#description' => 'To send a test email, fill out this information.',
			'test_email' => array(
				'#type' => 'textfield',
				'#title' => t('Test Email'),
				'#size' => 50
			),
			'id' => array(
				'#type' => 'textfield',
				'#title' => t($email_template_values['subjects'][0]),
				'#size' => 10
			),
			'id2' => array(
				'#type' => 'textfield',
				'#title' => t($email_template_values['subjects'][1]),
				'#size' => 10
			)
		),
		'submit' => array(
			'#type' => 'submit',
			'#value' => 'Save'
		)
	);
	
	return $form;
}

function styleforhire_triggered_email_form_validate($form, &$form_state) {

	if ( isset($form_state['values']['test_email']) and ! isset($form_state['values']['id'])) {

		form_set_error('test_email', t('If you send a test, you need to include the Subject ID'));
	}
}

function styleforhire_triggered_email_form_submit($form, &$form_state) {

	//var_dump($form_state['values']);

	variable_set(
		's4h_email_'.$form_state['values']['email_template'],
		array(
			'subject' => $form_state['values']['subject'],
			'body' => $form_state['values']['body']
		)
	);

	if ( !empty($form_state['values']['test_email'])) {

		styleforhire_build_email(
			$form_state['values']['email_template'],
			$form_state['values']['test_email'],
			$form_state['values']['id'],
			$form_state['values']['id2']
		);
	}
}

function styleforhire_first_day_availible($uid, $requested_hours) {

	$now = strtotime(date("m/d/Y"))+86400;

	for($i = 0; $i < 180; $i++) {

		$date = explode("/", date("m/d/Y", $now+($i*86400)));

		$slots = styleforhire_open_slots($uid, $requested_hours, $date[0], $date[1], $date[2]);

		$open = false;
		foreach($slots as $slot) {

			if ( stripos($slot, 'Book') === FALSE) {
				
				$open = true;
			}
		}

		//var_dump($slots, $date);

		if ( $open) {

			return implode("/", $date);
		}
	}

	return FALSE;
}

function styleforhire_week_view($uid, $requested_hours, $first_day) {


	$now = strtotime($first_day);

	$previous = explode("/", $first_day);
	$previous[1] = $previous[1] -7;
	if ( $previous[1] < 1) {
		$previous = date("m/d/Y", $now-(7*86400));
	}
	else {
		$previous = implode("/", $previous);
	}

	//$next = explode("/", $first_day);
	//$next[1] = $next[1] -7;
	//$next = implode("/", $next);

	//

	$next = date("m/d/Y", $now+(7*86400));

	$controls .= '
		<div class="prev">'.((time()+86400) > $now ? '' : "<a href='javascript:update_calendar(\"$uid\", \"$previous\", \"$requested_hours\")'><< Prev</a>").'</div>
		<div class="next">'."<a href='javascript:update_calendar(\"$uid\", \"$next\", \"$requested_hours\")'>Next >></a>".'</div>
	';

	$min = 86400;
	$max = 0;
	$header = "<th>&nbsp;</th>";
	for($i = 0; $i < 7; $i++) {

		$header .= '<th>'.date("D m/d", $now+($i*86400)).'</th>';

		$date = explode("/", date("m/d/Y", $now+($i*86400)));
		$date_clean = date("D m/d", $now+($i*86400));
		$slots = styleforhire_open_slots($uid, $requested_hours, $date[0], $date[1], $date[2]);

		foreach($slots as $index => $slot) {

			if ( $index < $min) {
				$min = $index;
			}

			if ( $index > $max) {
				$max = $index;
			}
		}

		$day_slots[date("m/d/Y", $now+($i*86400))] = $slots;
	}

	$min = floor(($min / 3600));
	$max = floor(($max / 3600));

	$hours_col = '<td class="hourcol">';

	foreach(range($min, $max) as $hour) {

		$hours_col .= '<div class="hour">'.'<span class="hour">'.($hour > 11 ? ($hour-12).'</span>PM' : ($hour).'</span>AM').'</div>';
	}

	$hours_col .= '</td>';

	foreach($day_slots as $date => $slots) {

		$data_row .= '<td>';

		if ( empty($slots)) {

			$data_row .= "&nbsp;";
			continue;
		}

		foreach(range($min, $max) as $hour) {

			foreach(array(0,900, 1800, 2700) as $minute) {

				$seconds = (int)(($hour*3600)+$minute);

				//vaR_dump($seconds, $slots);

				if ( isset($slots[$seconds])) {
				
					if ( substr($slots[$seconds], 0, 6) == 'Booked') {

						$data_row .= "<div class='booked'>".substr($slots[$seconds], 6)."</div>";
					}
					else {

						//strtotime($date);
						$date_clean = date("D m/d", strtotime($date));

						$data_row .= "<div><a href='javascript:update_requested_date(\"".$date.", {$slots[$seconds]}\", \"".$date_clean.", {$slots[$seconds]}\")'>".$slots[$seconds]."</a></div>";
					}
				}
				else {

					$data_row .= "<div class='unavailable'>&nbsp;</div>";
				}
			}
		}

		$data_row .= '</td>';
	}

	$week_view = '
		'.$controls.'
		<table cellpadding="0" cellspacing="0" id="dayTable">
			<tr>'.$header.'</tr>
		</table>
		<table cellpadding="0" cellspacing="0" id="apptTable">
			<tr>'.$hours_col.$data_row.'</tr>
		</table>
	';

	return $week_view;
}

function styleforhire_generate_calendar($uid, $month, $day, $year, $requested_hours) {

	//return styleforhire_week_view($uid, $requested_hours, "$month/$day/$year");	exit;
	drupal_json(styleforhire_week_view($uid, $requested_hours, "$month/$day/$year"));
}

function styleforhire_open_slots($uid, $requested_hours, $month, $day, $year) {

	$timestamp = strtotime("$month/$day/$year");

	return styleforhire_get_open_slots($uid, $timestamp, $requested_hours);
}

function styleforhire_open_slots_array($uid, $requested_hours, $month, $day, $year) {

	$timestamp = strtotime("$month/$day/$year");

	return styleforhire_get_open_slots($uid, $timestamp, $requested_hours);	
}

function styleforhire_times() {

	$hours = array(
		0 => '12:00am',
		1 => '1:00am',
		2 => '2:00am',
		3 => '3:00am',
		4 => '4:00am',
		5 => '5:00am',
		6 => '6:00am',
		7 => '7:00am',
		8 => '8:00am',
		9 => '9:00am',
		10 => '10:00am',
		11 => '11:00am',
		12 => '12:00pm',
		13 => '1:00pm',
		14 => '2:00pm',
		15 => '3:00pm',
		16 => '4:00pm',
		17 => '5:00pm',
		18 => '6:00pm',
		19 => '7:00pm',
		20 => '8:00pm',
		21 => '9:00pm',
		22 => '10:00pm',
		23 => '11:00pm',
	);

	$times = array();

	foreach($hours as $hour => $time) {

		$times[$hour*3600] = $time;
		$times[($hour*3600)+900] = str_replace(":00", ":15", $time);
		$times[($hour*3600)+1800] = str_replace(":00", ":30", $time);
		$times[($hour*3600)+2700] = str_replace(":00", ":45", $time);
	}

	return $times;
}

function styleforhire_days() {

	return array(
		"Sunday",
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday"
	);
}
function styleforhire_consolidate_events($events){
   if(count($events) <2) return $events;
   for($i=0; $i<count($events)-1; $i++){
		for($j=1; $j<count($events); $j++){
				
				/*if($events[$i]['type'] != 'event'){
					$events[$i]['field_apt_date_value'] -= 3600;
					$events[$i]['field_apt_date_value2'] += 3600;
				}*/
				
				
				$event_start_i = $events[$i]['field_apt_date_value'];
				$event_end_i = $events[$i]['field_apt_date_value2'];
				$event_start_j = $events[$j]['field_apt_date_value'];
				$event_end_j = $events[$j]['field_apt_date_value2'];
				if(	$event_start_i 	>= 	$event_start_j 	&&
					$event_end_i	>=	$event_end_j	&&
					$event_start_i	<=	$event_end_j){
						$events[$i]['field_apt_date_value']		= $event_start_j;
						unset($events[$j]);
					}
				if(	$event_start_i 	<= 	$event_start_j 	&&
					$event_end_i	<=	$event_end_j	&&
					$event_start_j	<=	$event_end_i){
						$events[$i]['field_apt_date_value2']	= $event_end_j;
						unset($events[$j]);
					}
				if(	$event_start_i 	>= 	$event_start_j 	&&
					$event_end_i	<=	$event_end_j){
						$events[$i]['field_apt_date_value']		= $event_start_j;
						$events[$i]['field_apt_date_value2']	= $event_end_j;
						//unset($events[$j]);
					}
				if(	$event_start_i 	<= 	$event_start_j 	&&
					$event_end_i	>=	$event_end_j){
						//unset($events[$j]);
					}
				
		}
	}
	return $events;
}
function styleforhire_add_extratime_events($events){
	$hour = 30*60; // half-hour buffer before and after each event 
	$events_withAlteredTime = array();
	foreach($events as $event){
		$event['field_apt_date_value']  = $event['field_apt_date_value'] - $hour;
		$event['field_apt_date_value2'] = $event['field_apt_date_value2'] + $hour;
		$events_withAlteredTime[] = $event;
  }
  return $events_withAlteredTime;
}
function styleforhire_create_event_list($uid, $user_timezone, $hideTitle){// Created new by Subu
  $events = styleforhire_get_events_for_stylist($uid);
  //$user_timezone = 7;//simulating Portland(Oregon).
  /*
	$user_timezone has the CURRENT user timestamp. if we are in DST, the timestamp is in DST and vice versa.
	So moving this in date("I",(int)$event['field_apt_date_value']) is not a good idea because this function
	returns if the date parameter is in DST or not.
  */
  
	if(date("I"))	$user_timezone = $user_timezone - 4; //4 is EST(DST) . Only problem is in Puerto Rico and Hawaii.
	else 			$user_timezone = $user_timezone - 5; //noDST. 5 is the value returned by javascript function - date.getTimezoneOffset()/60

  if($hideTitle === TRUE){
	$events = styleforhire_consolidate_events(styleforhire_add_extratime_events(styleforhire_consolidate_events($events)));
  }
  $bookedSchedule = array();
  $title = 'Unavailable';
  foreach($events as $event){
	/* BUG FIX(Doesnt work - fixed it further below on @date:11/10/11) - @dev:Subu @date:09/21/11 - When Stylists create events in non DST dates during DST dates.
	 i.e if the Stylists create events for December in July, the calendar fetches events based on DST because
	 July corresponds to DST. I had date("I") earlier which only checked the current date's DST situation.
	 I need to check each date's DST situation. So replaced date("I") with date("I",$event['field_apt_date_value']).
	 How did we fix? - the next 4 lines was outside the loop. Need to check for each event, so  brought into the loop.
	 */
/*	if(date("I",(int)$event['field_apt_date_value'])){
			$del = 0;
		}
	else{
			$del = -1;
		}
  */
  /*
	BUG FIX  - @dev:Subu @date:11/10/11 - When DST ended, all the appointments created for Nov in Nov where 
	1 hour backward. So algorithm needed to be changed.
	if I am in DST and want to see events in DST -> $del = 0
	if I am in DST and want to see events in non DST -> $del = -1
	But if I am in noDST and want to see events in noDST -> $del = 0
	i dont know what the solution is for if I am in noDST and want to see events in DST. 
	Need to check in March. Is it $del = +1?
	I changed the above code to the one below.
  */
  $del = 0;
  if(date("I") && !date("I",(int)$event['field_apt_date_value'])){
		$del = -1;
	}
	$nid = $event['nid'];
   // $event_start = strtotime(format_date($event['field_apt_date_value']-$hour, 'custom', 'M d Y h:ia'));//adding an hr to the beginning
   // $event_end = strtotime(format_date($event['field_apt_date_value2']+$hour, 'custom', 'M d Y h:ia'));// adding an hr to the end
    $ss = date('Y-m-d\TH:i:s\Z', strtotime(format_date($event['field_apt_date_value']-$user_timezone*60*60+$del*60*60, 'custom', 'M d Y h:ia')));
    $ee = date('Y-m-d\TH:i:s\Z', strtotime(format_date($event['field_apt_date_value2']-$user_timezone*60*60+$del*60*60, 'custom', 'M d Y h:ia')));
	//styleforhire_debug($ss,'start');
	//styleforhire_debug($ee,'end');
	$editable = false;
	$background = "grey"; $textColor="black";
	if($hideTitle === FALSE){
				$title = str_replace("'"," ",$event['title']);/* Bug fix - need to replace the "'" value with " " before sending the info to the calendar*/
				$title = str_replace("&","and", $title);
				$type = $event['type'];
				if($type === 'event') {$editable = true; $background="red"; $textColor="black";}
			}
	else{
		$nid =999;
	}
	if($hideTitle === TRUE){
			$a = array('id'=>$nid,
						'title'=>$title,
						'start'=>$ss,
						'end'=>$ee,
						'className'=>'busy',
						allDay=>false,
						editable=>$editable
						);
			}
	else{// Adding color formatting so that we can distinguish between events and appointments
			$a = array(	'id'=>$nid,
						'title'=>$title,
						'start'=>$ss,
						'end'=>$ee,
						'className'=>'busy',
						allDay=>false,
						editable=>$editable,
						backgroundColor=>$background,
						textColor=>$textColor
						);
	}
	
   //$a = array('id'=>'999','title'=>'Busy','start'=>$ss,'end'=>$ee,'className'=>'busy',allDay=>false,editable=>false);
    $bookedSchedule[] =$a;
    //var_dump(date('d',$event_start));
  }
  //dsm($bookedSchedule);
  //exit;
  return $bookedSchedule;
}
function styleforhire_get_events_for_stylist($uid){//Created new by Subu
	$result = db_query("
        SELECT concat(n.nid,'.',delta) as nid,field_event_date_value as field_apt_date_value, 
		field_event_date_value2 as field_apt_date_value2,title, n.type as type 
        FROM node n
        LEFT JOIN content_field_event_date cta ON cta.nid=n.nid
        WHERE ((n.uid = %d AND n.status=1) OR n.uid = %d)
        AND field_event_date_value IS NOT NULL 
		AND field_event_date_value2 IS NOT NULL 
		AND field_event_date_value > %d
        ", $uid, $uid, time()-2*24*60*60);
		
    $rows = array();

    while($row = db_fetch_array($result)) {
       $rows[] = $row;
    }
  
	$result = db_query("SELECT n.nid as nid,field_apt_date_value, field_apt_date_value2,
					concat(coalesce(concat(cta.field_apt_fname_value,' ',cta.field_apt_name_value), u.name),'-',prod.title) AS title,
					n.type as type 
					FROM node n
					JOIN users u on n.uid=u.uid
					JOIN content_type_appointment cta ON cta.nid=n.nid
					JOIN node prod ON cta.field_apt_type_nid=prod.nid AND prod.type='product'
					LEFT JOIN node pn ON n.uid=pn.uid AND pn.type='profile'
					LEFT JOIN content_type_profile ctp ON ctp.nid=pn.nid
					WHERE cta.field_apt_stylist_uid=%d
					AND n.type='Appointment'  
					AND	n.status=1 
					AND cta.field_apt_date_value > %d
					GROUP BY n.nid
					ORDER BY cta.field_apt_date_value DESC",$uid, time()-24*60*60);
    while($row = db_fetch_array($result)) {
        $rows[] = $row;
    }
    return $rows;
}

function styleforhire_get_events($uid, $time) {

	$result = db_query("
		SELECT field_apt_date_value, field_apt_date_value2
		FROM node n
		LEFT JOIN content_type_appointment cta ON cta.nid=n.nid
		WHERE ((cta.field_apt_stylist_uid = %d AND n.status=1) OR n.uid = %d) AND
			((cta.field_apt_date_value - 86400)  < %d AND (cta.field_apt_date_value2 + 86400) > %d ) 
	", $uid, $uid, $time, $time);

	$rows = array();

	while($row = db_fetch_array($result)) {

		//var_dump($row);

		$rows[] = $row;
	}

	$result = db_query("
		SELECT field_event_date_value as field_apt_date_value, field_event_date_value2 as field_apt_date_value2
		FROM node n
		LEFT JOIN content_field_event_date cta ON cta.nid=n.nid
		WHERE ((n.uid = %d AND n.status=1) OR n.uid = %d) AND
			((cta.field_event_date_value - 86400)  < %d AND (cta.field_event_date_value2 + 86400) > %d ) 
	", $uid, $uid, $time, $time);

	while($row = db_fetch_array($result)) {

		//var_dump($row);

		$rows[] = $row;
	}

	return $rows;
}


function styleforhire_get_open_slots($uid, $time, $requested_hours = 0) {

	$requested_hours = $requested_hours*3600-1;
	$travel_to = 3600 * .75;
	$travel_from = 3600 * .75;


	$schedule = styleforhire_get_my_schedule($uid);
	$times = styleforhire_times();
	$events = styleforhire_get_events($uid, $time);

	//var_dump($events);

	$day = strtolower(date('l', $time));

 //date_default_timezone_set('America/New_York');

	$timestamp = format_date($time, 'custom', "M d Y");
	$timestamp = strtotime($timestamp);

	global $user;

	if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
		$timezone = $user->timezone;
	}
	else {
		$timezone = variable_get('date_default_timezone', 0);
	}
	
	//var_dump($timestamp, $events);

	$open_schedule = array();

	foreach($times as $seconds => $time) {

		//var_dump($seconds, $schedule[$day."_from"], $schedule[$day."_to"]);

		if ( $seconds >= ($schedule[$day."_from"] + $travel_to )AND
				$seconds < ($schedule[$day."_to"] - ($requested_hours + $travel_from + $travel_to ) )) {

			$add = true;

			foreach($events as $event) {

				$event_start = strtotime(format_date($event['field_apt_date_value'], 'custom', 'M d Y h:ia'));
				$event_end = strtotime(format_date($event['field_apt_date_value2'], 'custom', 'M d Y h:ia'));

				if ( ($event_start-$requested_hours-$travel_to-$travel_from) <= ($timestamp+$seconds) AND
						$event_end >= (($timestamp+$seconds)-$request_hours-$travel_from)) {
/*
					var_dump(
						$seconds/3600,
						format_date($event['field_apt_date_value']+3600, 'custom', 'M d Y h:ia'),
						format_date($event['field_apt_date_value2']+3600, 'custom', 'M d Y h:ia')
					);
*/
					$add = false;
					break;
				}

			}

			if ( $add === true) {

				/*
				var_dump(
					date("M, d h:ia", $timestamp+$seconds),
					date("M, d h:ia", $event_start),
					date("M, d h:ia", $event_end)
				);
				*/

				$open_schedule[$seconds] = $time;
			}
			else {

				$open_schedule[$seconds] = 'Booked '.$time;
			}
		}
	}

	//var_dump($open_schedule);
	//var_dump($schedule);
	//var_dump(styleforhire_times(), $day);

	return $open_schedule;
}

function styleforhire_get_my_schedule($uid) {

	$result = db_query("SELECT * FROM schedules WHERE uid=%d", $uid);
	$result = db_fetch_array($result);

	return $result;
}

function styleforhire_my_schedule_form() {

	global $user;

	styleforhire_get_open_slots($user->uid, time());

	$result = styleforhire_get_my_schedule($user->uid);

	$days = styleforhire_days();

	foreach($days as $key => $day) {

		$day = strtolower($day);
	
		$form[$day] = array(
			'#type' => 'fieldset',
			'#title' => ucfirst($day)
		);

		$form[$day][$key] = array(
			
			$day."_exclude" => array(
				'#title' => t('Busy'),
				'#type' => 'checkbox',
				'#attributes' => array(
					'onclick' => "
						if ( this.checked == true) {
							$('#edit-$day-from').attr('disabled', true);
							$('#edit-$day-to').attr('disabled', true);
						}
						else {
							$('#edit-$day-from').attr('disabled', false);
							$('#edit-$day-to').attr('disabled', false);
						}
					"
				),
				'#default_value' => $result[$day."_from"] == -1 ? true : false
			),
			$day."_from" => array(
				'#title' => t('Available From'),
				'#type' => 'select',
				'#options' => styleforhire_times(),
				'#default_value' =>  $result[$day."_from"]				
			),
			$day."_to" => array(
				'#title' => t('To'),
				'#type' => 'select',
				'#options' => styleforhire_times(),
				'#default_value' =>  $result[$day."_to"]
			)
		);

		if ( $result[$day."_from"] == -1) {

			$form[$day][$key][$day."_from"]['#attributes'] = array(
				'disabled' => 'disabled'
			);

			$form[$day][$key][$day."_to"]['#attributes'] = array(
				'disabled' => 'disabled'
			);
		}
	}

	$form[] = array(
		'#type' => 'submit',
		'#value' => 'Save'
	);

	return $form;
}

function styleforhire_my_schedule_form_submit($form, &$form_state) {

	global $user;

	$days = styleforhire_days();

	foreach($days as $day) {

		$columns .= strtolower($day)."_from, ".strtolower($day)."_to, ";
	}

	foreach($days as $day) {

		if ( !empty($form_state['values'][strtolower($day)."_exclude"])) {
			$form_state['values'][strtolower($day)."_from"] = -1;
			$form_state['values'][strtolower($day)."_to"] = -1;
		}

		$values .= db_escape_string($form_state['values'][strtolower($day)."_from"]).", ".
					db_escape_string($form_state['values'][strtolower($day)."_to"]).", ";
	}

	db_query("
		REPLACE INTO schedules
		(".trim($columns,', ').", uid)
		VALUES (".trim($values,', ').", {$user->uid})
	");
}

function styleforhire_can_schedule() {

	global $user;

	if ( isset($user->roles[3])) {
		
		return true;
	}

	return false;
}

function styleforhire_get_appointment_types($uid=null) {
	if($uid==null){

	$result = db_query("
		SELECT n.nid AS nid,
			n.title AS title,
			nr.body as description,
			p.field_free_value AS free,
			p.field_fixed_hours_value AS fixed_hours,
			p.field_personal_shopping_value AS private_shopping
		FROM node n
		JOIN node_revisions nr ON nr.vid = n.vid
		LEFT JOIN content_type_product p ON n.vid = p.vid
		WHERE 	(p.field_is_apt_value =  'Yes') AND
				(n.type IN ('product'))	AND
				(p.field_show_up_stylist_profile_value = 'Yes')

		ORDER BY p.field_apt_weight_value
	");
	while($row=db_fetch_array($result)) {
		$rows[$row['nid']] = $row;
	}
	}
	else{
	$result = db_query("
			SELECT  cfma.field_my_apts_nid as nid,
					n.title as title,nr.body as description,
					p.field_free_value AS free,
					p.field_fixed_hours_value AS fixed_hours,
					p.field_personal_shopping_value AS private_shopping
			FROM users u
			LEFT JOIN node an1 ON an1.uid = u.uid AND an1.type='stylists_file'
			LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=an1.nid
			LEFT JOIN content_field_my_apts cfma ON cfma.nid=an1.nid
			JOIN node n on n.nid=cfma.field_my_apts_nid
			JOIN node_revisions nr ON nr.vid = n.vid
			LEFT JOIN content_type_product p ON n.vid = p.vid
			WHERE 	(p.field_is_apt_value =  'Yes') AND
				    (n.type IN ('product'))	AND
				    (p.field_show_up_stylist_profile_value = 'Yes') and
					cfma.nid=ctsf.nid and 
					cfma.field_my_apts_nid is not null and
					u.uid=%d",$uid);
	while($row=db_fetch_array($result)) {
				$rows[$row['nid']] = $row;
			}
			
	if(!isset($rows)){
					$result = db_query("
					SELECT n.nid AS nid,
						n.title AS title,
						nr.body as description,
						p.field_free_value AS free,
						p.field_fixed_hours_value AS fixed_hours,
						p.field_personal_shopping_value AS private_shopping
					FROM node n
					JOIN node_revisions nr ON nr.vid = n.vid
					LEFT JOIN content_type_product p ON n.vid = p.vid
					WHERE 	(p.field_is_apt_value =  'Yes') AND
							(n.type IN ('product'))	AND
							(p.field_show_up_stylist_profile_value = 'Yes')

					ORDER BY p.field_apt_weight_value
				");
					while($row=db_fetch_array($result)) {
							$rows[$row['nid']] = $row;
						}
		}
	}
	

	return $rows;
}
function styleforhire_autocomplete($stylist){

$sql = "select concat(  ctp.field_first_name_value, ' ', 
                ctp.field_last_name_value) as name, concat(  ctp.field_first_name_value, ' ', 
                ctp.field_last_name_value,',',
			          ctp.field_city_value,' ',
			          ctp.field_state_value) as stylist 
      FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type='profile'
		JOIN users_roles ur ON ur.uid=u.uid AND ur.rid=3
		JOIN content_type_profile ctp ON ctp.nid=pn.nid AND ctp.field_first_name_value LIKE '%s%%'
    
    /* stylist file */
		LEFT JOIN node sn ON sn.uid=u.uid AND sn.type='stylists_file'
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid
    WHERE ctsf.field_status_value IN ('Active','Active but inactive')";

// query the database
  $resource = db_query_range($sql, $stylist, 0, 10);
// loop through the results and create an associative array
  $results = array();
  while ($row = db_fetch_array($resource)) $results[$row['name']] = $row['name'];

  // output the results in javascript
  print drupal_json($results);

  // exit, to prevent your results form hitting the theme layer
  exit();
}
function styleforhire_book_appointment_ajax($uid, $user_timezone){
  //drupal_set_message('<pre>subusubusubu  '. print_r(styleforhire_create_event_list($uid), TRUE) .'</pre>');
 //var_dump("hello");
  //drupal_json(styleforhire_create_event_list($uid,TRUE));
  $json_str = json_encode(styleforhire_create_event_list($uid,$user_timezone,TRUE)); 
  //drupal_json(array(array('title' => $uid, 'start' => '2010-10-10T13:15:30Z', 'end' => '2010-10-10T15:15:30Z', allDay => false)));

    $baid = $uid;
	//$json_str = "";
	if(count($_COOKIE['dragstylist'][$baid])>0) {	
		$json_str = str_replace(']',',', $json_str);		
		//$json_str .= "[";
		$i=0;
		foreach($_COOKIE['dragstylist'][$baid] as $key=>$item) {
			$json_str .= (($i>0)?',':'') . $item;			
			$i++;
		}
		$json_str .= "]";
	}
	echo $json_str;
	
  die;
}
function styleforhire_show_appointment_to_stylist_ajax($uid, $user_timezone){
	styleforhire_debug($uid, 'uid - retrieving the calendar for the stylist');
	styleforhire_debug($user_timezone,'retrieving the calendar for the stylist - Stylist time zone is');
	drupal_json(styleforhire_create_event_list($uid,$user_timezone,FALSE));
}
function styleforhire_stylist_modify_appointment($uid){
	$start = $_POST['start'];
	$appt_node_id = $_POST['appt_node_id'];
	$client_id = $_POST['client_id'];
	//$appt_type_id = $_POST['appt_type_id'];
	//styleforhire_debug($client_id,'client id');
	$result = db_query('SELECT u1.mail as stylist_mail,
								u.mail as client_mail,
								field_apt_date_value as start,
								field_apt_date_value2 as end 
						FROM content_type_appointment c
						JOIN node n ON n.nid=c.nid
						JOIN users u ON u.uid = n.uid
						JOIN users u1 ON u1.uid=c.field_apt_stylist_uid
						WHERE c.nid=%d',$appt_node_id);
	$row = db_fetch_object($result);
	if(	$row->start != null and 
		$row->end	!= null){
			$duration = $row->end-$row->start;
		}
	if((int)$start > 0){
		$rslt = db_query("UPDATE content_type_appointment 
							SET field_apt_date_value=%d,field_apt_date_value2=%d,field_apt_status_value='%s' 
							WHERE nid=%d",(int)$start,(int)$start+$duration,'Confirmed',$appt_node_id);
		styleforhire_build_email("notice_client_modify",
									$row->client_mail,
									(int)$appt_node_id);
		styleforhire_build_email("notice_stylist_modify",
									$row->stylist_mail,
									(int)$appt_node_id);
		}		
}

function styleforhire_update_event_ajax($operation,$uid,$user_timezone){
/*Setting the timezone depending on user's location and DST situation - START*/
		styleforhire_debug($uid, "uid");
		styleforhire_debug($operation, "operation");
		styleforhire_debug($user_timezone, "user timezone");
		$timezs_arr = array("dst" =>	array(	4 => "America/New_York", 5 => "America/Chicago",
												6 => "America/Denver", 7 => "America/Los_Angeles", 
												10=> "Pacific/Honolulu"),
							"nodst" =>	array(	4 => "America/Puerto_Rico", 5 => "America/New_York",
												6 => "America/Chicago", 7 => "America/Denver",
												8 => "America/Los_Angeles", 10=> "Pacific/Honolulu"));
		/*Setting the timezone depending on user's location and DST situation - END Not really of great use now because I insert the records instead of using drupal apis*/
		if(date("I",(int)$_POST['start'])) {
				//date_default_timezone_set($timezs_arr["dst"][(int)$user_timezone]);
				//$user_timezone = $user_timezone - 4; //4 is EST(DST) .
				styleforhire_debug("dst", "Daylight Savings");
			}
		else {
				//date_default_timezone_set($timezs_arr["nodst"][(int)$user_timezone]);
				//$user_timezone = $user_timezone - 5; //noDST. 5 is the value returned by javascript function - date.getTimezoneOffset()/60
				styleforhire_debug("nodst", "No Daylight Savings");
			}
	//USE THIS TO TEST $user_timezone = 3;//Setting the user timezone to be of portland. TEST TEST
if(strcmp($operation,'update') == 0){
	$eventid = $_POST['id'];
	$title = $_POST['title'];
	$start = (int)$_POST['start'] ;//+ $user_timezone*60*60;
	$end = (int)$_POST['end'] ;//+ $user_timezone*60*60;
	$delta = (int)$_POST['delta'];
	$record_exists = 0;
	//styleforhire_debug("in update","in update");
	//styleforhire_debug($eventid,'eventid');
	//styleforhire_debug($title,'title');
	//styleforhire_debug($start,'start');
	//styleforhire_debug($end,'end');
	//styleforhire_debug($delta,'delta');
	if($eventid != ''){
		$result = db_query("select 1 from node n where n.nid=%d", $eventid);
		}
	else{
		$result = db_query("select 1 from node n, content_field_event_date c 
							where c.field_event_date_value=%d and n.uid=%d and n.type='event' and n.nid=c.nid",
							(int)$start, $uid);
	}
	
	//styleforhire_debug($result,'result');
	$record_exists = db_result($result);
	//styleforhire_debug($record_exists,'record_exists');
	if ($record_exists != 0) {
	 $substrafterdot = strrchr($eventid, '.'); 
	 $nid = styleforhire_add_new_event($uid, $title, $start, $end, (int)$eventid,$delta);
	}
	else{
	 $nid = styleforhire_add_new_event($uid, $title, $start, $end, NULL,-1);
	}
	
	//drupal_json(array(array('operation' => $operation,'nid' => $nid,'title' => $title.$recordexists,'start' => $start, 'end' => $end)));
}//if operation is update
else if(strcmp($operation,'addnew') == 0){
	$title = $_POST['title'];
	styleforhire_debug($user_timezone, "Adding # of hours...actually not adding.");
	$start = (int)$_POST['start']; //+$user_timezone*60*60;
	$end = (int)$_POST['end']; //+$user_timezone*60*60;
	$repeat_freq = (int)$_POST['repeat_freq'];
	$repeat_end_until = (int)$_POST['repeat_end_until'];
	$rrule = $_POST['repeat_rule'];
	//styleforhire_debug($repeat_freq,'repeat frequency');
	//styleforhire_debug($repeat_end_until,'repeat end until');
	//$start = $start - 60*60; //subu bug while creating a new event (adds an extra hr)
	//$end = $end - 60*60; //subu bug while creating a new event (adds an extra hr)
	
	if($repeat_freq > 0){
		$i=0;
		db_query("INSERT IGNORE INTO node (type,language,title,uid,status,created,changed) 
				VALUES ('event','en','%s',%d,1,%d,%d)",$title,$uid,time(),time());
		$result = db_query("select nid from node where vid=%d and 
							title='%s' and type='event' and uid=%d",0,$title,$uid);
		$nid = db_result($result);
		//styleforhire_debug($nid,'event id is');
		db_query("update node set vid=nid where vid=%d and type='event'",0);
		$result = db_query("INSERT INTO node_revisions(vid,nid,title,uid,timestamp,format) 
					VALUES(%d,%d,'%s',%d,%d,0)",$nid,$nid,$title,$uid,time());
		if($result == 0){
			styleforhire_debug('styleforhire_update_event_ajax:addnew: cant add into node_revisions','db');
		}
		
		while($start < ($repeat_end_until+24*60*60)){
			//styleforhire_debug($start, 'start-beg');
			//styleforhire_debug($end, 'end-beg');
			$result = styleforhire_create_repetitions($i,$start,$end,$nid,$rrule);
			++$i;
			//styleforhire_debug($i,'iteration');
			$start += $repeat_freq*24*60*60;
			$end += $repeat_freq*24*60*60;
			//styleforhire_debug($result, 'result db');
			//styleforhire_debug($start, 'start-end');
			//styleforhire_debug($end, 'end-end');
		}
	}
	else {
			$nid = styleforhire_add_new_event($uid, $title, $start, $end, NULL, -1);
		}

	
	drupal_json(array(array('operation' => $operation,'nid' => $nid,'title' => $title,'start' => $start, 'end' => $end)));
}
else if(strcmp($operation,'delete') == 0){
		$eventid = (int)$_POST['id'];
		$start = (int)$_POST['start']+$user_timezone*60*60;;
		//styleforhire_debug($eventid, 'id to delete');
		//styleforhire_debug($start, 'the one to delete');
		styleforhire_delete_event($uid,$eventid,$start);
		//drupal_json(array(array('eventid' => $eventid,'operation' => $operation)));
}

die;
}
function styleforhire_create_repetitions($delta, $start,$end,$eventid,$rrule){
	$result = db_query("INSERT IGNORE INTO content_field_event_date (vid,nid,delta, field_event_date_value,field_event_date_value2, field_event_date_rrule)
				VALUES (%d,%d,%d,%d,%d,'%s')",$eventid,$eventid,$delta,$start,$end,$rrule);
	return $result;
}
function styleforhire_add_new_event($uid,$title,$start,$end,$eventid,$delta){
	$nid = $eventid; //make sure the id is typecasted to integer
	if(is_null($nid)){
		/*$node->type = "event";
		$node->uid = $uid;
		$node->status = 1;
		$node->title = $title;

		$node->field_event_date[0] = array( // event date update is common for new nodes and updated nodes
				  "value" => $start,
				  "value2"=> $end,
				  "timezone" => "UTC",
				  "offset" => 0,
				  "offset2" => 0,
				  "timezone_db" => "UTC",
				  "date_type" => "datestamp");
		*/
	$result = db_query("select max(nid)+1 from node;");
	$newnid = db_result($result);
	if($newnid>0){	
		
		$result = db_query("INSERT INTO node(vid,nid,type,language,title,uid,status,created,changed) 
					VALUES(%d,%d,'event','en','%s',%d,1,%d,%d)",$newnid,$newnid,$title,$uid,time(),time());
		if($result == 0) styleforhire_debug("styleforhire_add_new_event() - couldnt insert into table:node","db");
		db_query("INSERT INTO node_revisions(vid,nid,title,uid,timestamp,format) 
					VALUES(%d,%d,'%s',%d,%d,0)",$newnid,$newnid,$title,$uid,time());
		if($result == 0) styleforhire_debug("styleforhire_add_new_event() - couldnt insert into table:node_revisions","db");
		$result = db_query("INSERT INTO content_field_event_date (vid,nid,delta, field_event_date_value,field_event_date_value2)
				VALUES (%d,%d,0,%d,%d)",$newnid,$newnid,$start,$end);
		if($result == 0) styleforhire_debug("styleforhire_add_new_event() - couldnt insert into table:content_field_event_date","db");
		//node_save($node);
		//db_query("UPDATE node_revisions SET nid=vid WHERE nid=0");// Sometimes, an entry is created with nid=0. We want to make sure it gets changed to vid.
		/* This is some Drupal bug or I haven't figured things with Drupal  - 
		sometimes when user adds a node, vid and nid are not the same. I don't 
		want these variables to be different as it may cause problems later on.
		So, I found a temporary solution to make them the same.
		*/
		//styleforhire_debug($node->vid,"vid");
		//styleforhire_debug($node->nid,"nid");
		
		/*if($node->nid != $node->vid){
			styleforhire_debug($node->vid,"nid and vid are not equal");
			db_query("UPDATE node_revisions SET vid=%d WHERE nid=%d",$node->nid,$node->nid);
			db_query("UPDATE node SET vid=%d WHERE nid=%d",$node->nid,$node->nid);
			db_query("UPDATE content_type_event SET vid=%d WHERE nid=%d",$node->nid,$node->nid);
			db_query("UPDATE content_field_event_date SET vid=%d WHERE nid=%d",$node->nid,$node->nid);
		}*/
		}
		}	  
	  else{
		// here node already exists. I assign the nid value. Therefore drupal will know to update the node with dates. The dates are assigned after this if else statement	  
			//$node->nid = $nid;
			//$node->vid = $nid; //note that I will have to provide $node->vid to update a node
			//$node->type = "event";
			//$node->title = $title;
			//styleforhire_debug($nid,"update nid");
			//styleforhire_debug($delta,"update delta");
			//styleforhire_debug($start,"update start");
			//styleforhire_debug($end,"update end");
			$nid = (int)$nid;
			db_query(	"UPDATE content_field_event_date 
						SET field_event_date_value=%d, 
							field_event_date_value2=%d 
						WHERE nid=%d and field_event_date_value=%d",$start,$end,$nid,$start-$delta);
		} 
				
	return $node;	
  /*  if(is_null($nid)){
		$cur = time();
		never insert manually...use node_save to insert db_query("INSERT IGNORE INTO node (type,language,title,uid,status,created,changed) 
				VALUES ('event','en','%s',%d,1,%d,%d)",$title,$uid,$cur,$cur);
		$result = db_query("select nid from node where vid=%d",0);
		db_query("update node set vid=nid where vid=%d",0);
		
		$nid = db_result($result);
		db_query("INSERT IGNORE INTO content_field_event_date (vid,nid,field_event_date_value,field_event_date_value2)
				VALUES (%d,%d,%d,%d)",$nid,$nid,$start,$end);	
	}
	else{
		db_query("UPDATE content_field_event_date set field_event_date_value=%d,field_event_date_value2=%d
				where nid=%d",$start,$end,$nid);
	}
	
	return $nid;
*/
}
function styleforhire_delete_event($uid,$id,$start){
	$result = db_query("select count(*) from content_field_event_date where nid=%d", $id);
	$num_records = db_result($result);
	if($num_records>0){
		if($start > 0){// I set $start = -1 in StylistCustFullCalendar.js if I need to delete all the recurrences.
			db_query("DELETE FROM content_field_event_date WHERE field_event_date_value=%d and nid=%d",$start,$id);
			}
		else{ /* I set the value of $date = -1 in StylistCustFullCalendar if the user selects to delete all instances */
			db_query("DELETE FROM content_field_event_date WHERE nid=%d",$id);
		}
	}
	/* 	If the request is to delete all the events or to delete the last existing event.
	*/
	if(	$start 			=== -1 || 
		$num_records 	=== 1){
		db_query("DELETE FROM content_type_event WHERE nid=%d",$id);
		db_query("DELETE FROM node WHERE nid=%d AND type='event'",$id);
		db_query("DELETE FROM node_revisions WHERE nid=%d",$id);
	}
	
	node_delete($id);
}

function styleforhire_book_appointment($uid,$special=null) {// special=> Temporary solution for Robin Jones old customer who wants her $75/hr rate instead of her new $95/hr rate.
	//$special=$_GET['spec'];
	$name = styleforhire_user_name($uid);

	//return '<div class="backto">'.l('<< Back to '.$name.'\'s Profile','stylist/'.$uid).'</div>'.drupal_get_form('styleforhire_appointment_form', $uid);
	//return drupal_get_form('styleforhire_appointment_form', $uid) . '<style> * { font-family: verdana; } </style>';
	return drupal_get_form('styleforhire_appointment_form', $uid, $special);
//	return l('<< Back to '.$name.'\'s Profile','stylist/'.$uid).'<div id="page-title"><div id="page-title-inner"><h1>2. Choose a Date and Time</h1></div></div>'.drupal_get_form('styleforhire_appointment_form', $uid);

}

function styleforhire_user_name($uid) {

	$result = db_query('
		SELECT u.uid,u.name AS name,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name
		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		WHERE u.uid=%d
	', $uid);

	$row = db_fetch_object($result);
	if($row->first_name == null && $row->last_name == null) {
		if($row->name == null){
			$result = db_query('SELECT u.uid,u.name AS name FROM users u WHERE u.uid=%d', $uid);
			$row = db_fetch_object($result);
		}
		return ucfirst($row->name);
	}
	
	return ucfirst($row->first_name).' '.ucfirst($row->last_name);
}

function styleforhire_user_personal_mail($uid) {

	$result = db_query('
		SELECT ctp.field_personal_email_value AS email
		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		WHERE u.uid=%d
	', $uid);

	$row = db_fetch_object($result);
	return $row->email;
}

function styleforhire_client_email($nid) {
	
	$result = db_query('
		SELECT mail
		FROM users u
		join node pn on pn.uid=u.uid
		WHERE pn.nid=%d
	', $nid);

	$row = db_fetch_object($result);
	return $row->mail;
}

function styleforhire_appointment_form($form_state, $uid, $special_case= null) {// special_case: a temproray solution for Robin Jones customer who wants to pay $70 and not $95. Will need to come with a better solution.

	if (empty($form_state['storage']['step'])) {
		$form_state['storage']['step'] = 1;
	}
	
	$user = user_load(array('uid'=>$uid));
	$rate = styleforhite_get_stylist_rate($uid);
	$original_rate = $rate;
	if(		$form_state['storage']['step'] > 1 && 
		(int)$form_state['storage']['values'][1]['used_stylist_before'] == 1){
		//styleforhire_debug($form_state['storage']['values'][1]['fname'],"firstname");
		//styleforhire_debug($form_state['storage']['values'][1]['lname'],"lastname");
		$result = db_query("SELECT StylistHourlyRate FROM stylist_special_rate 
							WHERE FirstName='%s' AND LastName='%s' AND StylistID=%d",
							$form_state['storage']['values'][1]['fname'],
							$form_state['storage']['values'][1]['lname'],
							$uid);
		$rs = db_result($result);
		if ( !empty($rs)) {
			$rate = $rs;
			//styleforhire_debug('found an hourly rate',"hourlyRate");
		}	
	}
	if($special_case == 'spec-92hci3-456-ai8' && $uid == 70){
		$rate = 75;// This is a customized rate for Robin Jones' old customer. Will have to come up with a better solution with Databases etc.
	}
	else if($special_case == 'spec-92hci3-456-ai8' && $uid == 74){
		$rate = 65;// This is a customized rate for Lisa Tumberello's old customer. Will have to come up with a better solution with Databases etc.
	}
	if($rate == null or $rate<=0) {
			drupal_access_denied();
			exit;
	}

	$appt_types = styleforhire_get_appointment_types($uid);
	$appt_output = array();
	$cart_id = arg(2);
	$item = styleforhire_get_cart_apt($cart_id);// Subu - This is not working - So I used uc_carts_get_contents() to get the array
	/* subu temporary */
	$items = uc_cart_get_contents();
	


	// This part is important!
	$form['#multistep'] = TRUE;
	$form['#redirect'] = TRUE;

	
			
	switch ($form_state['storage']['step']) {
		case 1:
			/*Subu - Notes the drupal_add_js function and $form['script_js']=... where outside the switch. 
			This would give a javascript error on $(".toltip-desc").tooltip({ - function undefined. 
			I moved it in this case block. Things worked thereafter - May be because the jquery.tooltip.js got loaded 
			again when the next button was pressed in case 1. For some reason $(".toltip-desc").tooltip( appeared before
			jquery.tooltip.js and things didnt work.*/
			drupal_add_js(drupal_get_path('theme', 's4h').'/jquery.tooltip.js');
			$form['script_js'] = array(
				'#value' => '<script type="text/javascript">
								$(document).ready(function() {
									 var arr = [107,51,52,16];
									 $.each(arr, function( intIndex, objValue ){
													showRequestedHours(objValue);
											});
								});
								function showRequestedHours(id) {									
									if( document.getElementById("edit-service-type-"+id).checked ) {									
										document.getElementById("edit-requested-hours-"+ id +"-wrapper").style.display = "inline-block";
									} else {
										document.getElementById("edit-requested-hours-"+ id +"-wrapper").style.display = "none";
									}
								}
								jQuery(function() {
									$(".toltip-desc").tooltip({
														track: true,
														delay: 250,
														fade: 250
													});
								});
								
							</script>							
							',
			);
			
			$service_type = ! empty($form_state['storage']['values'][1]['service_type']) ? $form_state['storage']['values'][1]['service_type'] : $item->data['apt_node']->field_apt_type[0]['nid'];

			$form['stylist_uid'] = array(
				'#type' => 'hidden',
				'#default_value' => $uid
			);

			$form['service'] = array(
				'#prefix' => '<ol id="page"><li id="selected">1</li><li>2</li><li>3</li></ol>',
				'#title' => t('<span class="service">1. Choose a Service</span>'),
				'#type' => 'fieldset'
			);

			foreach($appt_types as $key => $value) {

				/* if ( $value["free"] == 'Yes') {
					$included = '
						<div class="fixed-hours">
							'.$value['fixed_hours'].' included
						</div>
					';
				}
				else {
					$included = '';
				} */

				$form['service']['service_type_'.$key] = array (
					'#type' => 'checkbox',
					'#name' => 'service_type_'.$key,
					'#title' => t($value['title']),
					/*'#return_value' => $key,*/
					/*'#suffix' => '<div id="descr-service-type-'. $key .'" class="description">
							'.$value['description'].'
						</div>
						'.$included.'
					', */
					
					'#prefix'=>'<span class="toltip-desc pad-bottom" title="'. strip_tags($value['description']) .'"><div class="option-style-1">',
					'#suffix'=>'</div></span>',
					'#attributes' => array('onclick'=>'showRequestedHours('. $key .')'),
				);
	
				if ( 1 == $form_state['storage']['values'][1]['service_type_'.$key]) {
				
					$form['service']['service_type_'.$key]['#attributes'] = array('checked' => 'checked');
				}

				if ( empty($value['fixed_hours']) OR $value['private_shopping'] == 'Yes') {

					$form['service']['requested_hours_'.$key]  = array (
						'#type' => 'select',
						'#title' => t('Requested Hours @ $'.$rate.' per Hour'),
						'#options' => array(
							2 => '2 Hours',
							3 => '3 Hours',
							4 => '4 Hours',
							5 => '5 Hours',
							6 => '6 Hours',
							7 => '7 Hours',
							8 => '8 Hours',
						),
						/*'#suffix' => '
							<div class="scheduled-time">
								@ $'.$rate.' per Hour
							</div>
						', */
						'#default_value' => $form_state['storage']['values'][1]['requested_hours_'.$key],
					);
				}
				else {
					$form['service']['requested_hours_'.$key]  = array (											
						'#value' => '<div id="edit-requested-hours-'. $key .'-wrapper" class="form-item"><label for="edit-requested-hours-'. $key .'">One half-hour free</label></div>',
					);		
				}
			}

			$form['address'] = array(
				'#title' => t('<span class="serviceloc">Name and address where the service will take place</span>'),
				'#type' => 'fieldset'
			);
			/* subu changng the block below to two text fields - first name and last name */
/*
			$form['address']['name'] = array(
				'#title' => t('Name'),
				'#type' => 'textfield',
				'#size' => 40,
				'#default_value' => !empty($form_state['storage']['values'][1]['name']) ? $form_state['storage']['values'][1]['name'] : $item->data["apt_node"]->field_apt_name[0]['value']
			);
*/  
			/* subu changng the block below to two text fields - first name and last name */
			$form['address']['fname'] = array(
                '#title' => t('First Name'),
                '#type' => 'textfield',
                '#size' => 16,
			    '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['fname']) ? $form_state['storage']['values'][1]['fname'] : $items[0]->data["apt_node"]->field_apt_fname[0]['value'],
				'#prefix' => '<table id="tb-fname-lname"><tr><td valign="top">',	
				'#suffix' => '</td>',
            );
            /* subu changng the block below to two text fields - first name and last name */
            $form['address']['lname'] = array(
                '#title' => t('Last Name'),
                '#type' => 'textfield',
                '#size' => 16,
                '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['lname']) ? $form_state['storage']['values'][1]['lname'] : $items[0]->data["apt_node"]->field_apt_lname[0]['value'],
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
            );
            /* subu changng the block below to add company*/
             $form['address']['company'] = array(
                '#title' => t('Company'),
                '#type' => 'textfield',
                '#size' => 40,
                '#default_value' => !empty($form_state['storage']['values'][1]['company']) ? $form_state['storage']['values'][1]['company'] : $items[0]->data["apt_node"]->field_apt_company[0]['value'],
            );
			$form['address']['address1'] = array(
				'#title' => t('Address1'),
				'#type' => 'textfield',
				'#description' => '',
				'#size' => 40,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['address1']) ? $form_state['storage']['values'][1]['address1'] : $items[0]->data["apt_node"]->field_apt_address1[0]['value'],
			);

			$form['address']['address2'] = array(
				'#title' => t('Address2'),
				'#type' => 'textfield',
				'#size' => 40,
				'#default_value' => !empty($form_state['storage']['values'][1]['address2']) ? $form_state['storage']['values'][1]['address2'] : $items[0]->data["apt_node"]->field_apt_address2[0]['value'],
			);

			$form['address']['city'] = array(
				'#title' => t('City'),
				'#type' => 'textfield',
				'#size' => 12,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['city']) ? $form_state['storage']['values'][1]['city'] : $items[0]->data["apt_node"]->field_apt_city[0]['value'],
				'#prefix' => '<table id="tb-city-state"><tr><td valign="top">',	
				'#suffix' => '</td>',
				);

			$form['address']['state'] = array(
				'#title' => t('State/Province'),
				'#type' => 'select',
				'#options' => styleforhire_states_full(),/* subu changed from styleforhire_states() to accomodate the state bug when existing address are selected in the billing page */
				'#max_length' => 2,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['state']) ? $form_state['storage']['values'][1]['state'] : $items[0]->data["apt_node"]->field_apt_state[0]['value'],
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
				);

			$form['address']['zip'] = array(
				'#title' => t('Zip'),
				'#type' => 'textfield',
				'#size' => 5,
				'#max_length' => 5,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['zip']) ? $form_state['storage']['values'][1]['zip'] : $items[0]->data['apt_node']->field_apt_zip[0]['value'],
				'#prefix' => '<table id="tb-zip-phone"><tr><td valign="top">',	
				'#suffix' => '</td>',
				);
			$form['address']['phone'] = array(
                '#title' => t('Phone Number'),			
                '#type' => 'textfield',
				/*'#description' => t('format: 000-000-0000'),*/
                '#size' => 12,
                '#max_length' => 12,
                '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['phone']) ? $form_state['storage']['values'][1]['phone'] : $items[0]->data['apt_node']->field_apt_phone[0]['value'],
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
            );
			$form['address']['used_stylist_before'] = array (
					'#type' => 'checkbox',
					'#name' => 'used_stylist_before',
					'#prefix' => '<div class="left-indent">',
					'#title' => t('Please check this box if you have used '.styleforhire_user_name($uid).' for a previous styling appointment.'),
					'#suffix' => '</div>',
				);
			if(stristr($special_case,'spec') != FALSE){
				$form['no-distance-validation'] = array(
				'#type' => 'hidden',
				'#default_value' => 'true',
				);
			}
			
			$form['next'] = array(
				'#type' => 'submit',
				'#value' => 'Next >>'
			);

			$form['cart_id'] = array(
				'#type' => 'hidden',
				'#default_value' => arg(2)
			);
		break;

		case 2:
			drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery.js');
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/fullcalendar.js');
			
			/* make sure theme.css is above fullcalendar.css */
			drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/smoothness/theme.css');
		    drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/fullcalendar.css');
		    
		   
		    
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery-ui-1.8.8.custom.min.js');
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery.qtip-1.0.js');
		    
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/myCustFullCalendar.js');
		    drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/myCustFullCalendar.css');
			drupal_add_js(array('rate' => $rate),'setting');
			
			//$recap = styleforhire_get_apt_recap($form_state, $rate, $appt_types, $uid, $form_state['storage']['values'][2]['chosen_date']);
			$recap ='';// removing the myorder box on page 2 of the calendar

			//var_dump($appt_types[$form_state['storage']['values'][1]['service_type']]);

			if ( !empty($appt_types[$form_state['storage']['values'][1]['service_type']]['fixed_hours'])) {

				$requested_hours = $appt_types[$form_state['storage']['values'][1]['service_type']]['fixed_hours'];
			}
			else {

				$requested_hours = $form_state['storage']['values'][1]['requested_hours_'.$form_state['storage']['values'][1]['service_type']];
			}

			$first_day = styleforhire_first_day_availible($uid, $requested_hours);
			
			$form['previous_t'] = array(
				'#type' => 'submit',
				'#value' => 'Back'
			);
			//if ( $first_day != FALSE) {
				$form['next_t'] = array(
					'#type' => 'submit',
					'#value' => 'Add to Cart'
				);
			//}
						
		   $form['stylist_introduction_info'] = array(
			     '#type' => 'hidden',
			     '#id' => 'stylist_introduction_info'
			);
			
			$form['closet_audit_info'] = array(
                 '#type' => 'hidden',
                 '#id' => 'closet_audit_info'
            );
			
			$form['closet_shopping_info'] = array(
                 '#type' => 'hidden',
                 '#id' => 'closet_shopping_info'
            );
			
			$form['personal_shopping_with_info'] = array(
                 '#type' => 'hidden',
                 '#id' => 'personal_shopping_with_info'
            );
			
			$form['personal_shopping_for_info'] = array(
                 '#type' => 'hidden',
                 '#id' => 'personal_shopping_for_info'
            );
			
			$form['user_timezone_info'] = array(
                 '#type' => 'hidden',
                 '#id' => 'user_timezone_info'
            );


			/*if ( $first_day === FALSE) {

				$prefix = '<p>Based on the number of hours you\'re requesting and the stylist\'s schedule, we can\'t find an available time slot for you. Please click the "Back" button and adjust the number or hours you need, or find another stylist in your area.</p>';

				$week_view = '';
			}
			else {
				
				$prefix = '<p>Based on the length of your appointment, we have calculated your stylist\'s first available start times. Please select any one that is convenient for you. Click the "Next" button to see future weeks.</p>';

				$week_view = styleforhire_week_view($uid, $requested_hours, $first_day);
			}*/
			$appntList = '';
           if(($form_state['storage']['values'][1]['service_type_107']) == 1){
                 $appntList = $appntList.'<div class=\'external-event\'>Stylist Introduction -  30 minutes</div>';
           }
           if(($form_state['storage']['values'][1]['service_type_51'])== 1){
             $appntList = $appntList.'<div class=\'external-event\'>Closet Audit - '.($form_state['storage']['values'][1]['requested_hours_51']).' hrs</div>';
               }
	       if(($form_state['storage']['values'][1]['service_type_16']) ==  1){
             $appntList = $appntList.'<div class=\'external-event\'>Closet Shopping - '.($form_state['storage']['values'][1]['requested_hours_16']).' hrs</div>';
               }
	       if(($form_state['storage']['values'][1]['service_type_52']) == 1){
             $appntList = $appntList.'<div class=\'external-event\'>Personal Shopping: Shopping with you - '.($form_state['storage']['values'][1]['requested_hours_52']).' hrs</div>';
               }
	       if(($form_state['storage']['values'][1]['service_type_108']) == 1){
             $appntList = $appntList.'<div class=\'external-event\'>Personal Shopping: Shopping for you - '.($form_state['storage']['values'][1]['requested_hours_108']).' hrs</div>';
               }
		   //$prefix = '<div id=\'wrap\'><div id=\'external-events\'><h4>Drag and drop the red appointment box below onto the calendar to schedule your appointment.</h4>'.$appntList.'</div>'.'<div id="step2">'.$recap.'</div>'.'<div id=\'calendar\'></div><div style=\'clear:both\'></div></div>';
		   $prefix = '<table id="step2-calendar">
				<tr>
					<td>
							<table style="margin:0px;"><tr><td>
								<div id=\'external-events\'><h4><b>Step One: </b>Drag and drop the red appointment box below onto the calendar to schedule your appointment.<b></h4><h4>Step Two: </b>Once you\'ve selected your date & time, click <b>Add to Cart</b> to proceed.</h4>'.$appntList.'</div>
							</td></tr>
							<tr><td>
								<div id="step2">'.$recap.'</div>
							</td></tr></table>
					</td>
					<td>
						<div id=\'calendar\'></div><div style=\'clear:both\'></div>
					</td>
				</tr>
			</table>';
			
			$form['service'] = array(
				//'#prefix' => '<ol id="page"><li>1</li><li id="selected">2</li><li>3</li></ol>',
				//'#title' => t('<span class="service">2. Choose a Date and Time</span>'),
				'#type' => 'fieldset'
			);

			$form['appointment_date'] = array(
				'#type' => 'hidden'
			);

			$form['chosen_date'] = array(
				/*'#prefix' => $prefix.'<div id="step2">'.$recap.'</div><div id="calendar-container">'.$week_view.'</div>',*/
				/*'#prefix' => $prefix.'<div id="step2">'.$recap.'</div>',*/
				'#prefix' => $prefix,
				'#type' => 'hidden',
				'#default_value' => $form_state['storage']['values'][1]['chosen_date'],
				'#id' => 'chosen_date'
			);
			$form['stylist_uid'] = array(
				'#type' => 'hidden',
				'#default_value' => $uid,
			);
			
			/*
			$requested_date = '
				<div class="reqdate">
				<label for="requested_date">Appointment Date: </label>
					<div id="requested_date">'.$form_state['storage']['values'][2]['chosen_date'].'</div>
				</div>
				</div>
			';
*/

			//if ( $first_day != FALSE) {

				$form['comments'] = array(
					'#type' => 'textarea',
					'#title' => 'Comments<a class="tooltip" href="#tooltip">(?<span>Please provide any instructions or information you\'d like your Stylist to know before your appointment&mdash;for example, "I was referred by Sarah," "I have to be done by 4pm," "Buzzer broken, please knock" or "The dog may bark - don\'t be afraid!"</span>)</a>',
					'#default_value' => $form_state['storage']['values'][2]['comments']
				);
			//}
			

			$form['previous'] = array(
				'#type' => 'submit',
				'#value' => 'Back'
			);

			$form['next'] = array(
					'#type' => 'submit',
					'#value' => 'Add to Cart'
				);
			$form['original_rate'] = array(
				'#type' => 'hidden',
				'#value' => $original_rate
			);
			$form['rate'] = array(
				'#type' => 'hidden',
				'#value' => $rate
			);
			$form['stylist_name'] = array(
				'#type' => 'hidden',
				'#value' => styleforhire_user_name($uid)
			);
			
			
			
		
		break;

		case 3:
			//styleforhire_debug($form_state['storage']['values'][1]['used_stylist_before'],'case3');
			//styleforhire_debug($rate,'case3 rate');
			$recap = styleforhire_get_apt_recap_step3($form_state, $rate, $appt_types, $uid, $form_state['storage']['values'][2]['chosen_date'], $form_state['storage']['values'][2]['comments']);

			$form['previous'] = array(
				'#prefix' => '<ol id="page"><li>1</li><li>2</li><li id="selected">3</li></ol><fieldset><legend><span class="service step3">3. Final Confirmation</span></legend></fieldset>
				<div id="step3">'.$recap.'</div>'.$requested_date.'<div id="step3-buttons">',
				'#type' => 'submit',
				'#value' => '<< Back'
			);
			$form['next'] = array(
				'#type' => 'submit',
				'#value' => 'Add to Cart >>',
				'#suffix' => '</div>'
			);
			$form['rate'] = array(
				'#type' => 'hidden',
				'#value' => $rate
			);

	}

	return $form;
}

function styleforhire_appointment_form_validate($form, &$form_state) {
	
		if($form_state['storage']['step']==1) {
			/*if( !preg_match("/^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$/i", $form_state['values']['phone']) ) {
				form_set_error( 'phone', t('Phone number format is incorrect.'));
			}*/
			/*if( !preg_match("/^[0-9]{3}-[0-9]{3}-[0-9]{4}$/i", $form_state['values']['phone']) ) {
				form_set_error( 'phone', t('Phone number format is incorrect.'));
			}*/
			if(strlen($form_state['values']['zip']) < 5) {
				form_set_error( 'zip', t('Zip must have 5 digits.'));
			}
			$level = 1;
			/* Subu enable the code to check if the customer is within the stylist radius*/
			if($form_state['values']['no-distance-validation'] == NULL &&
				styleforhire_stylist_distance(	$form_state['values']['stylist_uid'], 
														$form_state['values']['address'], 
														$form_state['values']['city'], 
														$form_state['values']['state'], 
														$form_state['values']['zip']) == FALSE){
		
					form_set_error( 'zip', t(styleforhire_user_name($form_state['values']['stylist_uid']).
											' is currently outside your service area.'.
											' Please send us an email at appointments@styleforhire.com'.
											' to learn more about any additional travel charge that apply.'));
				$level = 0;
				}
				stalk_customer(	$level,
						$form_state['values']['fname'],
						$form_state['values']['lname'],
						$form_state['values']['company'],
						$form_state['values']['address1'],
						$form_state['values']['address2'],
						$form_state['values']['city'],
						$form_state['values']['state'],
						$form_state['values']['zip'],
						$form_state['values']['phone'],
						$form_state['values']['stylist_uid'],
						$form_state['values']['price']);			
			
		}  
}


function styleforhire_appointment_form_submit($form, &$form_state) {
	$form_state['values']['service_type'] = $_POST['service_type'];
	$form_state['storage']['values'][$form_state['storage']['step']] = $form_state['values'];

	// check the button that was clicked and action the step chagne
	if ($form_state['clicked_button']['#id']=='edit-previous') {
		$form_state['storage']['step']--;
	} elseif (	$form_state['clicked_button']['#id']=='edit-next' || 
				$form_state['clicked_button']['#id']=='edit-previous-t') { // The button that gets registered when I click the confirmation pop-up is edit-previous-t. Havent investigated why yet.
		$form_state['storage']['step']++;
	}
	
	//if ( $form_state['storage']['step'] > 3) {
	if ( $form_state['storage']['step'] > 2) {

		$appt_types = styleforhire_get_appointment_types();

		global $user;
		$services = array();
		//var_dump($form_state['storage']['values']);
		$rate = (int)$form_state['storage']['values'][2]['rate'];//styleforhite_get_stylist_rate($form_state['storage']['values'][1]['stylist_uid']);
		if(!empty($form_state['storage']['values'][2]["stylist_introduction_info"])){
			$services[107] = $form_state['storage']['values'][2]["stylist_introduction_info"];
			$appt_timespan = $form_state['storage']['values'][2]["stylist_introduction_info"];
		}
		if(!empty($form_state['storage']['values'][2]["closet_audit_info"])){
			$services[51] = $form_state['storage']['values'][2]["closet_audit_info"];
			$appt_timespan = $form_state['storage']['values'][2]["closet_audit_info"];
		}
		if(!empty($form_state['storage']['values'][2]["closet_shopping_info"])){
			$services[16] = $form_state['storage']['values'][2]["closet_shopping_info"];
			$appt_timespan = $form_state['storage']['values'][2]["closet_shopping_info"];
		}
		if(!empty($form_state['storage']['values'][2]["personal_shopping_with_info"])){
			$services[52] = $form_state['storage']['values'][2]["personal_shopping_with_info"];
			$appt_timespan = $form_state['storage']['values'][2]["personal_shopping_with_info"];
		}
		if(!empty($form_state['storage']['values'][2]["personal_shopping_for_info"])){
			$services[108] = $form_state['storage']['values'][2]["personal_shopping_for_info"];
			$appt_timespan = $form_state['storage']['values'][2]["personal_shopping_for_info"];
		}
		if(!empty($form_state['storage']['values'][2]["user_timezone_info"])){
			$user_timezone = $form_state['storage']['values'][2]["user_timezone_info"];
		}
		
		//var_dump(empty($form_state['storage']['values'][2]["personal_shopping_for_info"]));
		//var_dump($form_state['storage']['values'][2]);
		//var_dump($appt_timespan);
		//exit();
		
		/*Setting the timezone depending on user's location and DST situation - START*/
		$timezs_arr = array("dst" =>	array(	4 => "America/New_York", 5 => "America/Chicago",
												6 => "America/Denver", 7 => "America/Los_Angeles", 
												10=> "Pacific/Honolulu"),
							"nodst" =>	array(	4 => "America/Puerto_Rico", 5 => "America/New_York",
												6 => "America/Chicago", 7 => "America/Denver",
												8 => "America/Los_Angeles", 10=> "Pacific/Honolulu"));
		if(date("I")) date_default_timezone_set($timezs_arr["dst"][(int)$user_timezone]);
		else date_default_timezone_set($timezs_arr["nodst"][(int)$user_timezone]);//subusundaram debug
		//date_default_timezone_set("America/Los_Angeles");
		/*Setting the timezone depending on user's location and DST situation - END*/
		
		foreach($services as $service_id => $service_val) {
		$node->type = "appointment";
		$node->uid = $user->uid;
		$node->field_comments[0]['value'] = $form_state['storage']['values'][2]['comments'];
		$node->status = 0;

		$info = styleforhire_pricing_engine($form_state, $rate, $appt_types, $service_id);
		$requested_hours = $info['hours'];
		$extra_hours = $info['private'];
		$total = $info['total'];  
		//$requested_hours = 2;
		//$extra_hours = 2;
		//$total = 200;

		$node->field_apt_stylist[0]['uid'] = $form_state['storage']['values'][1]['stylist_uid'];
		$node->field_apt_type[0]['nid'] = $service_id;//$form_state['storage']['values'][1]['service_type'];
		$node->field_apt_status[0]['value'] = 'Unconfirmed';

		/*if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
			$timezone = $user->timezone;
		}
		else {*/
		/*Bug subu-10/26/2011*/
		$timezone = date('Z');//variable_get('date_default_timezone', 0);
		//}
		//var_dump($info, $requested_hours);
		//var_dump($appt_timespan);
		$appt_exploded_bits = explode("-",$service_val);
		$appt_date = $appt_exploded_bits[0];
		$appt_start_time = $appt_exploded_bits[1];
		//$appt_end_time = $appt_exploded_bits[2]; - we dont use this because we have duration to find the end time
		$appt_duration = $appt_exploded_bits[3];
		
		$appt_date_exploded = explode("/",$appt_date);
		$appt_time_exploded = explode(":",$appt_start_time);
		$appt_start_mins = substr($appt_time_exploded[1],0,-2);//minutes
		$appt_start_AM_or_PM = substr($appt_time_exploded[1],-2);
		if(strcmp($appt_start_AM_or_PM,"AM") != 0 && $appt_time_exploded[0] != 12) { 
			$appt_time_exploded[0] += 12;
			} //adding 12 if it is PM. And dont add 12 to 12 which will make it 24 or midnight
		
		//$start_time = strtotime($form_state['storage']['values'][2]['chosen_date']);
		//$end_time = $start_time + (3600 * $requested_hours) - 1;
		$start_time = mktime($appt_time_exploded[0],$appt_start_mins,0,$appt_date_exploded[0],$appt_date_exploded[1],$appt_date_exploded[2]);
		$end_time = $start_time + $appt_duration*60*60;
		/*$outformat =  '%A, %d %B %Y %T %Z';  - Use this to test if the unix timestamp makes sense
		var_dump(strftime($outformat , $start_t));
		var_dump(strftime($outformat , $end_t));*/
		
		$node->field_extra_personal_shopping[0]['value'] = $extra_hours;

		$node->field_apt_date[0] = array(
			  "value" => $start_time,
			  "value2"=> $end_time,
			  "timezone" => date('T'),//The timezone is set using date_default_timezone_set. So date('T') will give me PST/EST/CST/CDT etc.
			  "offset" => 0,
			  "offset2" => 0,
			  "timezone_db" => "UTC",
			  "date_type" => "datestamp"
		);

		
		$node->field_apt_fname[0]['value'] = $form_state['storage']['values'][1]['fname'];/* subu added the below 2 lines to have first and last names */
		$node->field_apt_name[0]['value'] = $form_state['storage']['values'][1]['lname'];/* subu added this */
		$node->field_apt_company[0]['value'] = $form_state['storage']['values'][1]['company'];/* subu added this */
		$node->field_apt_address1[0]['value'] = $form_state['storage']['values'][1]['address1'];
		$node->field_apt_address2[0]['value'] = $form_state['storage']['values'][1]['address2'];
		$node->field_apt_city[0]['value'] = $form_state['storage']['values'][1]['city'];
		$node->field_apt_state[0]['value'] = $form_state['storage']['values'][1]['state'];
		$node->field_apt_zip[0]['value'] = $form_state['storage']['values'][1]['zip'];
		$node->field_apt_phone[0]['value'] = $form_state['storage']['values'][1]['phone'];/* subu added this */
		$node->field_apt_price[0]['value'] = $total;
		$node->comment = 0;

		//node_save($node);
		//var_dump($node); exit;
		$stylist_name = styleforhire_user_name($node->field_apt_stylist[0]['uid']);
		styleforhire_add_apt(
			$node->field_apt_type[0]['nid'],
			$node,
			$node->field_apt_price[0]['value'],
			array(
				"stylist" => $stylist_name,
				"requested_hours" => $appt_duration,
				"extra_hours" => $extra_hours,
				"date" => $start_time,//$form_state['storage']['values'][2]['chosen_date']
				"tz" => $timezone
			),
			( !empty($form_state['storage']['values'][1]['cart_id']) ? $form_state['storage']['values'][1]['cart_id'] : NULL)
		);
		}//end of loop foreach
		$baid = $node->field_apt_stylist[0]['uid'];
		setcookie("dragstylist[$baid][stylist_introduction_info]", "", 0, '/', $_SERVER['HTTP_HOST']);
		setcookie("dragstylist[$baid][closet_audit_info]", "", 0, '/', $_SERVER['HTTP_HOST']);
		setcookie("dragstylist[$baid][closet_shopping_info]", "", 0, '/', $_SERVER['HTTP_HOST']);
		setcookie("dragstylist[$baid][personal_shopping_with_info]", "", 0, '/', $_SERVER['HTTP_HOST']);
		setcookie("dragstylist[$baid][personal_shopping_for_info]", "", 0, '/', $_SERVER['HTTP_HOST']);
		
		/* Stalking starts here - Stalk and check if there are users who 
		get to this step and leave. So I am capturing info on all these users.*/
		stalk_customer(	2,
						$node->field_apt_fname[0]['value'],
						$node->field_apt_name[0]['value'],
						$node->field_apt_company[0]['value'],
						$node->field_apt_address1[0]['value'],
						$node->field_apt_address2[0]['value'],
						$node->field_apt_city[0]['value'],
						$node->field_apt_state[0]['value'],
						$node->field_apt_zip[0]['value'],
						$node->field_apt_phone[0]['value'],
						$stylist_name,
						$node->field_apt_price[0]['value']);
		/* Stalking ends here */
		
		drupal_goto("cart/checkout");
	}

	$form_state['rebuild'] = TRUE;
}

function styleforhire_edit_appointment($nid) {

	$node = node_load($nid);

	$name = styleforhire_user_name($uid);
	
	//var_dump($node);

	return drupal_get_form(
		'styleforhire_edit_appointment_form',
		$node->field_apt_stylist[0]['uid'],
		$node
	);
}

function styleforhire_edit_appointment_form($form_state, $uid, $node) {

	if (empty($form_state['storage']['step'])) {
		$form_state['storage']['step'] = 1;
	}

	$user = user_load(array('uid'=>$uid));
	$rate = styleforhite_get_stylist_rate($uid);
	$appt_types = styleforhire_get_appointment_types();
	$appt_output = array();
	$cart_id = arg(2);
	$item = styleforhire_get_cart_apt($cart_id);

	$requested_hours = ceil(($node->field_apt_date[0]['value2'] - $node->field_apt_date[0]['value'] +1)/3600);


	$first_day = styleforhire_first_day_availible($uid, $requested_hours);

	$week_view = styleforhire_week_view($uid, $requested_hours, $first_day);
	
	$form['appointment_date'] = array(
		'#type' => 'hidden'
	);

	$form['chosen_date'] = array(
		'#prefix' => '<p>Based on the length of your appointment, we have calculated your stylist\'s first available start times. Please select any one that is convenient for you. Click the "Next" button to see future weeks.</p><div id="step2">'.$recap.'</div><div id="calendar-container">'.$week_view.'</div>',
		'#type' => 'textarea',
		'#type' => 'textfield',
		'#title' => 'Chosen Date',
		'#default_value' => $form_state['storage']['values'][1]['chosen_date'],
		'#id' => 'chosen_date'
	);

	$form['next'] = array(
		'#type' => 'submit',
		'#value' => 'Update >>'
	);

	return $form;
}
/* Dont think this ever gets called anymore - subu to check */
function styleforhire_edit_appointment_form_submit($form, &$form_state) {

	global $user;

	$node = node_load(arg(1));

	if ( $user->uid == 1 OR $user->uid == $node->uid OR $user->uid == $node->field_apt_stylist[0]['uid']) {

		//date_default_timezone_set('America/New_York');

		$start_time = strtotime($form_state['values']['chosen_date']);

		$requested_hours = ceil(($node->field_apt_date[0]['value2'] - $node->field_apt_date[0]['value'] +1)/3600);

		$end_time = $start_time + (3600 * $requested_hours) - 1;

		$node->field_apt_date[0] = array(
			  "value" => $start_time,
			  "value2"=> $end_time,
			  "timezone" => "UTC",
			  "offset" => 0,
			  "offset2" => 0,
			  "timezone_db" => "UTC",
			  "date_type" => "datestamp"
		);

		node_save($node);

		drupal_goto('node/'.arg(1));
	}

}

function styleforhire_pricing_engine($form_state, $rate, $appt_types, $service_id) {
	//var_dump($form_state['storage']['values'][1]);
	//$selected_service_key = $form_state['storage']['values'][1]['service_type'];
	//$selected_service = $appt_types[$form_state['storage']['values'][1]['service_type']];
	$selected_service_key = $service_id;
	$selected_service = $appt_types[$service_id];

	/*$distance = styleforhire_stylist_distance(

		$form_state['storage']['values'][1]['stylist_uid'],
		$form_state['storage']['values'][1]['address1'],
		$form_state['storage']['values'][1]['city'],
		$form_state['storage']['values'][1]['state'],
		$form_state['storage']['values'][1]['zip']
	);

	if ( $distance > 50) {

		$totals['Distance charge ('.$distance.' miles)'] = floor($distance-50);
	}
*/
	if ( !empty($selected_service['fixed_hours'])) {

		$stylist_hours = $selected_service['fixed_hours'];

		if ( $selected_service['free'] == "Yes") {
			$totals['Stylist Hours'] = 0;
		}
		else {
			$totals['Stylist Hours'] = $selected_service['fixed_hours'] * $rate;
		}

		if ( $selected_service['private_shopping'] == 'Yes') {

			$private_shopping = $form_state['storage']['values'][1]['requested_hours_'.$selected_service_key];

			$totals['Private Shopping'] = $rate * $private_shopping;					
		}

		$hours = $selected_service['fixed_hours'];
		$private = $totals['Private Shopping'];
	}
	else {

		$stylist_hours = $form_state['storage']['values'][1]['requested_hours_'.$selected_service_key];
		$totals['Stylist Hours'] = $rate * $stylist_hours;
		$hours = $stylist_hours;
		$private = 0;
	}

	$total = 0;
	foreach($totals as $description => $price) {

		$total += $price;

		if ( empty($price)) {

			$price = 'FREE';
		}
		else {

			$price = '$'.number_format($price, 2);
		}
	}

	return array(
		'hours' => $hours,
		'private' => $private,
		'total' => $total
	);
}

function styleforhire_get_apt_recap($form_state, $rate, $appt_types, $uid, $requested_date, $comments = NULL) {

	if ( !empty($requested_date)) {
		$current_date = strtotime($requested_date);
		$requested_date = date("D m/d, h:ia", $current_date);
	}

	//$selected_service_key = $form_state['storage']['values'][1]['service_type'];
	//$selected_service = $appt_types[$form_state['storage']['values'][1]['service_type']];
	$selected_services = array();
	foreach($appt_types as $key => $value){
		if(1 === $form_state['storage']['values'][1]['service_type_'.$key]){
				$selected_services[$key] = $key;
			}
	}

	/*$distance = styleforhire_stylist_distance(
		$form_state['storage']['values'][1]['stylist_uid'],
		$form_state['storage']['values'][1]['address1'],
		$form_state['storage']['values'][1]['city'],
		$form_state['storage']['values'][1]['state'],
		$form_state['storage']['values'][1]['zip']
	);

	if ( $distance > 50) {

		$totals['Distance charge ('.$distance.' miles)'] = floor($distance-50);
	}

	if ( !empty($selected_service['fixed_hours'])) {

		$stylist_hours = $selected_service['fixed_hours'];

		if ( $selected_service['free'] == "Yes") {
			$totals['Stylist Hours'] = 0;
		}
		else {
			$totals['Stylist Hours'] = $selected_service['fixed_hours'] * $rate;
		}

		if ( $selected_service['private_shopping'] == 'Yes') {

			$private_shopping = $form_state['storage']['values'][1]['requested_hours_'.$selected_service_key];

			$totals['Private Shopping'] = $rate * $private_shopping;					
		}
	}
	else {

		$stylist_hours = $form_state['storage']['values'][1]['requested_hours_'.$selected_service_key];

		$totals['Stylist Hours'] = $rate * $stylist_hours;
	}
*/
	//var_dump($form_state['storage']['values']);
	$apptsTxtList = '';
	$i = 0;
	foreach($selected_services as $key => $value){
			$selected_service=$appt_types[$value];
				
				
			$i++;
			if($key === 107){
				$selected_service['title'] = 'Stylist Introduction';
				$id = 1;
			}
			else if($key === 51){
				$selected_service['title'] = 'Closet Audit';
				$id = 2;
			}
			else if($key === 16){
				$selected_service['title'] = 'Closet Shopping';
				$id = 3;
			}
			else if($key === 52){
				$selected_service['title'] = 'Personal Shopping: Shopping with you';
				$id = 4;
			}
			else if($key === 108){
				$selected_service['title'] = 'Personal Shopping: Shopping for you';
				$id = 5;
			}
			$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. '.$selected_service['title'].'</span>';
			//$apptsTxtList = $apptsTxtList.'<span id="requested_time_'.$id.'"></span><span id="requested_date_'.$id.'"></span>';
			$apptsTxtList = $apptsTxtList.'<span id="requested_date_'.$id.'">
				<table width="100%" style="margin:1px 0px;"><tr><td>Date:</td><td align="right">&nbsp;</td></tr><tr><td>Time:</td><td align="right">&nbsp;</td></tr>'./*'<tr><td>Duration:</td><td align="right">&nbsp;</td></tr>'.*/'</table>
			</span>';
	}
	$duration=0;
	if(!empty($form_state['storage']['values'][2]['stylist_introduction_info'])){
		$temp= $form_state['storage']['values'][2]['stylist_introduction_info'];
		$duration += (int)substr($temp,strrpos($temp,'-')+1);
	}
	if(!empty($form_state['storage']['values'][2]['closet_audit_info'])){
		$temp= $form_state['storage']['values'][2]['closet_audit_info'];
		$duration += (int)substr($temp,strrpos($temp,'-')+1);
	}
	if(!empty($form_state['storage']['values'][2]['closet_shopping_info'])){
		$temp= $form_state['storage']['values'][2]['closet_shopping_info'];
		$duration += (int)substr($temp,strrpos($temp,'-')+1);
	}
	if(!empty($form_state['storage']['values'][2]['personal_shopping_with_info'])){
		$temp= $form_state['storage']['values'][2]['personal_shopping_with_info'];
		$duration += (int)substr($temp,strrpos($temp,'-')+1);
	}
	if(!empty($form_state['storage']['values'][2]['personal_shopping_for_info'])){
		$temp= $form_state['storage']['values'][2]['personal_shopping_for_info'];
		$duration += (int)substr($temp,strrpos($temp,'-')+1);
	}
	//var_dump($duration);
	
	$recap = '
	<div class="myorder clearfix">
		<h3 style="text-align:center;">My Order</h3>
		<div class="myorder-content">
		<ul id="top">
		<li class="clearfix"><span class="label">Total: </span><span id="total_order"></span></li>
		<li class="clearfix"><span class="label">Stylist: '.styleforhire_user_name($uid).'</span></li>
	       <li class="clearfix"><span class="label">Appointment(s): </span>'.$apptsTxtList.
		   '</li>'.
			/*'<li class="clearfix"><span class="label">Duration with Stylist: </span><span>'.(!empty($selected_service['fixed_hours']) ? $selected_service['fixed_hours'] : $form_state['storage']['values'][1]['requested_hours_'.$selected_service_key]).' hours</span></li>.*/
			((!empty($selected_service['fixed_hours']) AND !empty($form_state['storage']['values'][1]['requested_hours_'.$selected_service_key])) ? '<li class="clearfix"><span class="label">Personal Shopping: </span><span>'.$form_state['storage']['values'][1]['requested_hours_'.$selected_service_key].' hours</span></li>' : '').
			/*'<li class="clearfix"><span class="label">Appointment Type: </span><span>'.$selected_service['title'].'</span></li>'.*/
			/*'<li class="clearfix"><span class="label">Stylist: </span><span>'.styleforhire_user_name($uid).'</span></li>'.*/
			(!empty($comments) ? '<li><span class="label">Comments:</span> <span class="comments">'.$comments.'</span></li>' : '').
			
		'</ul>
		<div class="estimate">'.
			/*'<table>'.*/
	'';
	/*
	$total = 0;
	foreach($totals as $description => $price) {

		$total += $price;

		if ( empty($price)) {

			$price = 'FREE';
		}
		else {

			$price = '$'.number_format($price, 2);
		}

		$recap .= '<tr><td class="desc">'.$description.':</td><td class="price">'.$price.'</td></tr>';
	}
*/
	$recap .= /*'
			<tr class="total"><td class="desc">Total:</td><td class="price">$'.number_format($total, 2).'</td></tr>
			</table>'.
			'<ul id="appt">
			<li class="clearfix"><span class="label">Appointment Date: </span><span id="requested_date">'.$requested_date.'</span></li>
			</ul>'.*/
	'</div>
	</div>
	</div>
	</div>';


	return $recap;
}
function styleforhire_get_apt_recap_step3($form_state, $rate, $appt_types, $uid, $requested_date, $comments = NULL) {

	$apptsTxtList = '';
	
	$baid = arg(1);
	
	$duration=0;
	$duration_si=0;
	$i=1;
	$charge = 0;
	if(!empty($form_state['storage']['values'][2]['stylist_introduction_info'])){
		$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. Stylist Introduction Info'.'</span>';
		$temp= $form_state['storage']['values'][2]['stylist_introduction_info'];
		$duration += 0.5;
		//$apptsTxtList = $apptsTxtList.'<span>'.$temp.' hrs'.'</span>';
		$duration_si=0.5;
		$i++;
		
		$timeex = explode("-", $temp);
		$apptsTxtList .= '<table width="100%" class="st-3-time">
							<tr><td>Date</td><td align="right">'. $timeex[0] .'</td></tr>
							<tr><td>Time</td><td align="right">'. $timeex[1] .' - '. $timeex[2] .'</td></tr>
							<tr><td>Duration</td><td align="right">'. $timeex[3] .' hrs</td></tr>
							<tr><td>Total</td><td align="right">FREE</td></tr>
						</table></br>';
		
		$jval = json_encode(array(
			'id' => 1,
			'title' => "Stylist introduction",
			'start' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[1]")) ,
			'end' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[2]")),
			'allDay' => false
		));		
		setcookie("dragstylist[$baid][stylist_introduction_info]",$jval, time()+3600, '/', $_SERVER['HTTP_HOST']);
		
	}
	if(!empty($form_state['storage']['values'][2]['closet_audit_info'])){
		$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. Closet Audit'.'</span>';
		$temp= $form_state['storage']['values'][2]['closet_audit_info'];
		$duration += (float)substr($temp,strrpos($temp,'-')+1);
		//$apptsTxtList = $apptsTxtList.'<span id="requested_time">'.substr($temp,strrpos($temp,'-',0)).'.</span><span id="requested_date"></span>';
		//$apptsTxtList = $apptsTxtList.'<span>'.$temp.' hrs'.'</span>';
		$i++;
		
		$timeex = explode("-", $temp);
		$apptsTxtList .= '<table width="100%" class="st-3-time">
							<tr><td>Date</td><td align="right">'. $timeex[0] .'</td></tr>
							<tr><td>Time</td><td align="right">'. $timeex[1] .' - '. $timeex[2] .'</td></tr>
							<tr><td>Duration</td><td align="right">'. $timeex[3] .' hrs</td></tr>
							<tr><td>Total</td><td align="right">$'. number_format($timeex[3]*$rate, 2) .'</td></tr>
						</table></br>';
						
		$jval = json_encode(array(
			'id' => 2,
			'title' => "Closet Audit",
			'start' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[1]")),
			'end' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[2]")),
			'allDay' => false
		));
		setcookie("dragstylist[$baid][closet_audit_info]",$jval, time()+3600, '/', $_SERVER['HTTP_HOST']);
		$charge += (float)$timeex[3]*$rate;
	}
	if(!empty($form_state['storage']['values'][2]['closet_shopping_info'])){ 
		$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. Closet Shopping'.'</span>';
		$temp= $form_state['storage']['values'][2]['closet_shopping_info'];
		$duration += (float)substr($temp,strrpos($temp,'-')+1);
		//$apptsTxtList = $apptsTxtList.'<span id="requested_time">'.substr($temp,strrpos($temp,'-',0)).'</span><span id="requested_date"></span>';
		//$apptsTxtList = $apptsTxtList.'<span>'.$temp.' hrs'.'</span>';
		$i++;
		
		$timeex = explode("-", $temp);
		$apptsTxtList .= '<table width="100%" class="st-3-time">
							<tr><td>Date</td><td align="right">'. $timeex[0] .'</td></tr>
							<tr><td>Time</td><td align="right">'. $timeex[1] .' - '. $timeex[2] .'</td></tr>
							<tr><td>Duration</td><td align="right">'. $timeex[3] .' hrs</td></tr>
							<tr><td>Total</td><td align="right">$'. number_format($timeex[3]*$rate, 2) .'</td></tr>
						</table></br>';
		$jval = json_encode(array(
			'id' => 3,
			'title' => "Closet Shopping",
			'start' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[1]")),
			'end' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[2]")),
			'allDay' => false
		));
		setcookie("dragstylist[$baid][closet_shopping_info]",$jval, time()+3600, '/', $_SERVER['HTTP_HOST']);
		$charge += (float)$timeex[3]*$rate;
	}
	if(!empty($form_state['storage']['values'][2]['personal_shopping_with_info'])){
		$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. Personal Shopping With You'.'</span>';
		$temp= $form_state['storage']['values'][2]['personal_shopping_with_info'];
		$duration += (float)substr($temp,strrpos($temp,'-')+1);
		//$apptsTxtList = $apptsTxtList.'<span id="requested_time">'.substr($temp,strrpos($temp,'-',0)).'</span><span id="requested_date"></span>';
		//$apptsTxtList = $apptsTxtList.'<span>'.$temp.' hrs'.'</span>';
		$i++;
		
		$timeex = explode("-", $temp);
		$apptsTxtList .= '<table width="100%" class="st-3-time">
							<tr><td>Date</td><td align="right">'. $timeex[0] .'</td></tr>
							<tr><td>Time</td><td align="right">'. $timeex[1] .' - '. $timeex[2] .'</td></tr>
							<tr><td>Duration</td><td align="right">'. $timeex[3] .' hrs</td></tr>
							<tr><td>Total</td><td align="right">$'. number_format($timeex[3]*$rate, 2) .'</td></tr>
						</table></br>';
		$jval = json_encode(array(
			'id' => 4,
			'title' => "Personal Shopping With You",
			'start' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[1]")),
			'end' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[2]")),
			'allDay' => false
		));
		setcookie("dragstylist[$baid][personal_shopping_with_info]",$jval, time()+3600, '/', $_SERVER['HTTP_HOST']);				
		$charge += (float)$timeex[3]*$rate;
	}
	if(!empty($form_state['storage']['values'][2]['personal_shopping_for_info'])){
		$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. Personal Shopping For You'.'</span>';
		$temp= $form_state['storage']['values'][2]['personal_shopping_for_info'];
		$duration += (float)substr($temp,strrpos($temp,'-')+1);
		//$apptsTxtList = $apptsTxtList.'<span id="requested_time_'.$id.'">'.substr($temp,strrpos($temp,'-',0)).'</span><span id="requested_date_'.$id.'"></span>';
		//$apptsTxtList = $apptsTxtList.'<span>'.$temp.' hrs'.'</span>';
		$i++;
				$timeex = explode("-", $temp);
				//$timeex[3] = (int)$form_state['storage']['values'][1]['requested_hours_108'];
		$apptsTxtList .= '<table width="100%" class="st-3-time">
							<tr><td>Date</td><td align="right">'. $timeex[0] .'</td></tr>
							<tr><td>Time</td><td align="right">'. $timeex[1] .' - '. $timeex[2] .'</td></tr>
							<tr><td>Duration</td><td align="right">'. $timeex[3] .' hrs</td></tr>
							<tr><td>Total</td><td align="right">$'. number_format($timeex[3]*$rate, 2) .'</td></tr>
						</table></br>';
		$jval = json_encode(array(
			'id' => 5,
			'title' => "Personal Shopping For You",
			'start' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[1]")),
			'end' => date("Y-m-d H:i", strtotime("$timeex[0] $timeex[2]")),
			'allDay' => false
		));
		setcookie("dragstylist[$baid][personal_shopping_for_info]",$jval, time()+3600, '/', $_SERVER['HTTP_HOST']);
		$charge += (float)$timeex[3]*$rate;
	}
	//$duration -=$duration_si;
	
/*
	$selected_services = array();
	foreach($appt_types as $key => $value){
		if(1 === $form_state['storage']['values'][1]['service_type_'.$key]){
				$selected_services[$key] = $key;
			}
	}
	var_dump($form_state['storage']['values']);
	$i = 0;
	
	foreach($selected_services as $key => $value){
			$selected_service=$appt_types[$value];
				
				
			$i++;
			$apptsTxtList = $apptsTxtList.'<span class="label">'.$i.'. '.$selected_service['title'].'</span>';
			if($key === 107){
				$id = 1;
			}
			else if($key === 51){
				$id = 2;
			}
			else if($key === 16){
				$id = 3;
			}
			else if($key === 52){
				$id = 4;
			}
			else if($key === 108){
				$id = 5;
			}
			
	}
	*/
	$recap = '
	<div class="myorder clearfix">
		<h3>My Order</h3>
		<div class="myorder-content">
		<ul id="top">
		<li class="clearfix"><span class="label">Stylist:     '.styleforhire_user_name($uid).'</span></li>
	       <li class="clearfix"><span class="label" style="width:100%;">Appointment(s): </span><br/>'.$apptsTxtList.
		   '</li>
			<li class="clearfix"><span class="label">Duration with Stylist:     '.$duration.' hours</span></li>
			'.((!empty($selected_service['fixed_hours']) AND !empty($form_state['storage']['values'][1]['requested_hours_'.$selected_service_key])) ? '<li class="clearfix"><span class="label">Personal Shopping: </span><span>'.$form_state['storage']['values'][1]['requested_hours_'.$selected_service_key].' hours</span></li>' : '').
			/*'<li class="clearfix"><span class="label">Appointment Type: </span><span>'.$selected_service['title'].'</span></li>
			<li class="clearfix"><span class="label">Stylist: </span><span>'.styleforhire_user_name($uid).'</span></li>'.*/
			(!empty($comments) ? '<li><span class="label">Comments:</span> <span class="comments">'.$comments.'</span></li>' : '').
			'<li class="clearfix"><span class="label">Total:     $'.number_format($charge, 2).'</span></li>'.
		'</ul>
		<div class="estimate">
			<table>
	';
	
	$total = 0;
/*	foreach($totals as $description => $price) {

		$total += $price;

		if ( empty($price)) {

			$price = 'FREE';
		}
		else {

			$price = '$'.number_format($price, 2);
		}

		$recap .= '<tr><td class="desc">'.$description.':</td><td class="price">'.$price.'</td></tr>';
	}
*/
	$recap .= /*'<tr class="total"><td class="desc">Total:</td><td class="price">$'.number_format($charge, 2).'</td></tr>'.*/
			'</table>'.
		/*	'<ul id="appt">
			<li class="clearfix"><span class="label">Appointment Date: </span><span id="requested_date">'.$requested_date.'</span></li>
			</ul>'. */
	'</div>
	</div>
	</div>';


	return $recap;
}
/*
function styleforhire_appointment_form($form_state, $uid) {

    if (empty($form_state['storage']['step'])) {
        // we are coming in without a step, so default to step 1
        $form_state['storage']['step'] = 1;
    }

	jquery_ui_add(
		array('ui.datepicker')
	);

	$user = user_load(array('uid'=>$uid));
	$rate = styleforhite_get_stylist_rate($uid);
	$name = styleforhire_user_name($uid);
	$appt_types = styleforhire_get_appointment_types();
	$appt_output = array();
	$cart_id = arg(2);
	$item = styleforhire_get_cart_apt($cart_id);

	foreach($appt_types as $key => $value) {

		if ($value["free"] == "Yes") { $effective_rate = 0; }
		else { $effective_rate = $rate; }

		$appt_output[$key] = $value["title"].
			(!empty($value["hours"]) ? ' - '.($value["hours"] < 1 ? ($value["hours"]*60).' minutes' : $value["hours"].' hours') : '').
			(!empty($value["hours"]) ? ', $'.$value["hours"]*$effective_rate : ' - $'.$effective_rate.'/hour');
	}

    //demo different fields on different steps
    switch ($form_state['storage']['step']) {
        case 1:
	
			$service_type = !empty($form_state['storage']['values'][1]['service_type']) ? $form_state['storage']['values'][1]['service_type'] : $item->data['apt_node']->field_apt_type[0]['nid'];

			$form['stylist_uid'] = array(
				'#type' => 'hidden',
				'#default_value' => $uid
			);
			$form['service_type'] = array (
				'#prefix' => '
					<div id="page-title"><div id="page-title-inner"><h1>Book an Appointment with Stylist '.$name.'</h1></div></div>'.l('<< Back to '.$name.'\'s Profile','stylist/'.$uid),
				'#type' => 'radios',
				'#title' => t('<span class="step">Step 1</span>: Pick a Service'),
				'#options' => $appt_output,
				'#required' => TRUE,
				'#attributes' => array(
					'onchange' => '
					
						if ( this.value == 52 || this.value == 108) {
							
							$("#requested_hours").removeAttr("disabled");
						}
						else {

							$("#requested_hours").attr("disabled", "disabled");
						}
					'
				),
				'#default_value' => !empty($form_state['storage']['values'][1]['service_type']) ? $form_state['storage']['values'][1]['service_type'] : $item->data['apt_node']->field_apt_type[0]['nid']
			);
			
			if ( $service_type != 108 AND $service_type != 52) {
				$attr = array("disabled"=>"disabled");
			}
			else { $attr = array(); }

			$form['requested_hours']  = array (
				'#type' => 'select',
				'#id' => 'requested_hours',
				'#title' => t('Requested Hours'),
				'#options' => array(
					2 => '2 Hours',
					3 => '3 Hours',
					4 => '4 Hours',
					5 => '5 Hours',
					6 => '6 Hours',
					7 => '7 Hours',
					8 => '8 Hours',
					9 => '9 Hours',
					10 => '10 Hours',
					11 => '11 Hours',
					12 => '12 Hours',
					13 => '13 Hours',
					14 => '14 Hours',
					15 => '15 Hours',
					16 => '16 Hours',
					17 => '17 Hours',
					18 => '18 Hours',
				),
				'#attributes' => $attr,
				'#default_value' => (!empty($form_state['storage']['values'][1]['requested_hours']) ? $form_state['storage']['values'][1]['requested_hours'] : (!empty($item->data['apt_details']['extra_hours']) ? $item->data['apt_details']['extra_hours'] : $item->data['apt_details']['requested_hours'])),
			);

			 $form['requested_date'] = array (
				'#type' => 'textfield',
				//'#default_value' => formDemo_dv($form_state['storage']['values'][2]['field2']),
				'#title' => t('Requested Date'),
				'#description' => 'Please indicate your first preferred date for this appointment.',
				'#size' => 10,
				'#suffix' => '
					<script type="text/javascript">
						$(function() {
							$("#edit-requested-date").datepicker();
						});
					</script>
				',
				'#default_value' => (!empty($form_state['storage']['values'][1]['requested_date']) ? $form_state['storage']['values'][1]['requested_date'] : $item->data['apt_details']['date']),
				'#required' => TRUE
			);

			$form['address1'] = array(
				'#title' => t('Address1'),
				'#type' => 'textfield',
				'#description' => 'The address where the appointment will take place',
				'#size' => 40,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['address1']) ? $form_state['storage']['values'][1]['address1'] : $item->data["apt_node"]->field_apt_address1[0]['value']
			);

			$form['address2'] = array(
				'#title' => t('Address2'),
				'#type' => 'textfield',
				'#size' => 40,
				'#default_value' => !empty($form_state['storage']['values'][1]['address2']) ? $form_state['storage']['values'][1]['address2'] : $item->data["apt_node"]->field_apt_address2[0]['value']
			);

			$form['city'] = array(
				'#title' => t('City'),
				'#type' => 'textfield',
				'#size' => 40,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['city']) ? $form_state['storage']['values'][1]['city'] : $item->data["apt_node"]->field_apt_city[0]['value']
			);

			$form['state'] = array(
				'#title' => t('State'),
				'#type' => 'textfield',
				'#size' => 2,
				'#max_length' => 2,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['state']) ? $form_state['storage']['values'][1]['state'] : $item->data["apt_node"]->field_apt_state[0]['value']
			);

			$form['zip'] = array(
				'#title' => t('Zip'),
				'#type' => 'textfield',
				'#size' => 12,
				'#max_length' => 12,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['zip']) ? $form_state['storage']['values'][1]['zip'] : $item->data["apt_node"]->field_apt_zip[0]['value']
			);

			$form['next'] = array(
				'#type' => 'submit',
				'#value' => 'Next >>'
			);
			$form['cart_id'] = array(
				'#type' => 'hidden',
				'#default_value' => arg(2)
			);
          break;
        case 2:

		include_once(drupal_get_path('module', 'styleforhire')."/calendar.php");

		global $user;

		$date = explode("/", $form_state['storage']['values'][1]['requested_date']);

		if ( empty($appt_types[$form_state['storage']['values'][1]['service_type']]['hours'])) {

			$requested_hours = $form_state['storage']['values'][1]['requested_hours'];
		}
		else {

			$requested_hours = $appt_types[$form_state['storage']['values'][1]['service_type']]['hours'];
		}

		if ( $form_state['storage']['values'][1]['service_type'] == 108) {

			$extra_hours = $form_state['storage']['values'][1]['requested_hours'];
		}



		$rate = styleforhite_get_stylist_rate($form_state['storage']['values'][1]['stylist_uid']);
		
		$hours = ($extra_hours+$requested_hours) * $rate;
		$totals[$hours] = "<div class='hours'>Scheduled $hours hours @ $rate with Stylist</div>";

		$distance = styleforhire_stylist_distance(
			$form_state['storage']['values'][1]['stylist_uid'],
			$form_state['storage']['values'][1]['address1'],
			$form_state['storage']['values'][1]['city'],
			$form_state['storage']['values'][1]['state'],
			$form_state['storage']['values'][1]['zip']
		);

		if ( $distance > 50) {

			$totals[floor($distance-50)] = "
				<div class='distance'>
					Distance charge ($distance miles)
				</div>
			";
		}

		$total_text = '<table><tr>';
		$total = 0;
		foreach($totals as $key => $value) {

			$total += $key;
			$total_text .= '<tr><td>'.$value.'</td><td>$'.number_format($key, 2).'</td></tr>';
		}

		$total_text .= '<tr><td>Total:</td><td>$'.number_format($total,2).'</td></tr>';

		$total_text .= '</tr></table>';

		$calendar = new Calendar;
		//var_dump(styleforhire_open_slots_array($uid, $requested_hours, $date[0], $date[1], $date[2]));
         $form['start_time'] = array (
			'#prefix' => '
				<div id="page-title"><div id="page-title-inner"><h1>Book an Appointment with Stylist '.$name.'</h1></div></div>
				<label><span class="step">Step 2:</span> Specify Time</label>
				<div class="requested-service">
				Requested Service: <div class="service">'.$appt_types[$form_state['storage']['values'][1]['service_type']]['title'].
				', <div class="num_hours">'.$requested_hours.' hours</div>'.(empty($extra_hours) ? '' : '<div class="extra_hours">Additional scheduled hours: '.$extra_hours.' hours</div>').'</div></div>

				<h2>Pick A Date</h2>
				<div id="calendar-container">
				'.$calendar->getMonthHTML($date[0], $date[2], 1, $uid, $requested_hours).'
				</div>
				<div class="form-item">
				<label for="requested_date">Appointment Date: </label>
					<div id="requested_date">'.$form_state['storage']['values'][1]['requested_date'].'</div>
				</div>
				<script>
					$(document).ready(function(){
						update_chosen_date(\''.$uid.'\', \''.$requested_hours.'\', \''."{$date[0]}/{$date[1]}/{$date[2]}".'\')
					});
				</script>
			',
            '#type' => 'select',
            '#title' => t('Start Time'),
			'#options' => styleforhire_times(),
			'#required' => true,
			'#suffix' => $total_text
		);
		$form['comments'] = array (
			'#type' => 'textarea',
			'#title' => t('Comments')
		);
        $form['previous'] = array(
            '#type' => 'submit',
            '#value' => '<< Previous'
          );
		$form['next'] = array(
			'#type' => 'submit',
			'#value' => 'Add to Cart >>'
		  );
				<label for="requested_date">Appointment Date: </label>
					<div id="requested_date">'.$form_state['storage']['values'][1]['requested_date'].'</div>
				</div>
		$form['chosen_date'] = array(
			'#type' => 'hidden',
			'#default_value' => $form_state['storage']['values'][1]['requested_date']
		);
          break;
	}

    //don't show back button on first tab

    
    //show next button all the time in this demo

    return $form;
}
*/
function distance_between_2_points(	$address1, $city1, $state1, $zip1, 
										$address2, $city2, $state2, $zip2) {
									
		$data1 = styleforhire_get_geocode(
			$address1, 
			$city1,
			$state1,
			$zip1
		);								
		$data2 = styleforhire_get_geocode(
			$address2, 
			$city2,
			$state2,
			$zip2
		);
		$distance = round(
						acos(
							sin($data1[2] * pi() / 180) * sin($data2[2] * pi() / 180) + 
							cos($data1[2] * pi() / 180) * cos($data2[2] * pi() / 180) *
							cos(($data1[3]-$data2[3])*pi() / 180)
						) * (180 / pi()) * 60 * 1.1515, 
						2);
		return $distance;
}

function styleforhire_stylist_distance($uid, $address, $city, $state, $zip) {

	$data = styleforhire_get_geocode(
		$address, 
		$city,
		$state,
		$zip
	);
	
	$distance = "round(((
	ACOS(
		SIN({$data[2]} * PI() / 180) * 
		SIN(ctp.field_latitude_value * PI() / 180) +
		COS({$data[2]} * PI() / 180) *
		COS(ctp.field_latitude_value * PI() / 180) *
		COS(({$data[3]} - ctp.field_longitude_value) * PI() / 180)
	) *
		180 / PI()
	) * 60 * 1.1515), 2) AS distance";

	//var_dump($distance);
		
	$result = db_query('

		SELECT '.$distance.', ctsf.field_travel_distance_value as stylist_travel_distance

		FROM users u
	
		LEFT JOIN node an1 ON an1.uid = u.uid AND an1.type="stylists_file"
		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		JOIN content_type_stylists_file ctsf ON ctsf.nid=an1.nid

		WHERE pn.uid=%d

	', $uid);


	$row = db_fetch_array($result);

	return ($row["distance"]<$row["stylist_travel_distance"]?TRUE:FALSE);
}

function styleforhite_get_stylist_rate($uid) {

	global $user;

	$result = db_query('
		SELECT cfsa.field_hourly_rate_1_value AS rate

		FROM users u

		/* application file */
		LEFT JOIN node an ON an.uid=u.uid AND an.type="stylist_application"
		LEFT JOIN content_type_stylist_application cfsa ON cfsa.nid=an.nid

		WHERE u.uid=%d
	', $uid
	);

	return db_result($result);
}

/*
function styleforhire_appointment_form_submit($form, &$form_state) {

	$appt_types = styleforhire_get_appointment_types();
    //save the values for the current step into the storage array
    $form_state['storage']['values'][$form_state['storage']['step']] = $form_state['values'];
    
    // check the button that was clicked and action the step chagne
    if ($form_state['clicked_button']['#id']=='edit-previous') {
        $form_state['storage']['step']--;
    } elseif ($form_state['clicked_button']['#id']=='edit-next') {
        $form_state['storage']['step']++;
    }
    
	if ( $form_state['storage']['step'] > 2) {

		global $user;

		$rate = styleforhite_get_stylist_rate($form_state['storage']['values'][1]['stylist_uid']);

		$node->type = "appointment";
		$node->uid = $user->uid;
		$node->body = $form_state['storage']['values'][2]['comments'];
		$node->status = 0;

		if ( empty($appt_types[$form_state['storage']['values'][1]['service_type']]['hours'])) {

			$requested_hours = $form_state['storage']['values'][1]['requested_hours'];
		}
		else {

			$requested_hours = $appt_types[$form_state['storage']['values'][1]['service_type']]['hours'];
		}		

		if ( $form_state['storage']['values'][1]['service_type'] == 108) {

			$extra_hours = $form_state['storage']['values'][1]['requested_hours'];
		}
		else {
			$extra_hours = 0;
		}

		$node->field_apt_price[0]['value'] = $rate * ($requested_hours + $extra_hours);

		$distance = styleforhire_stylist_distance(
			$form_state['storage']['values'][1]['stylist_uid'],
			$form_state['storage']['values'][1]['address1'],
			$form_state['storage']['values'][1]['city'],
			$form_state['storage']['values'][1]['state'],
			$form_state['storage']['values'][1]['zip']
		);

		//var_dump($node->field_apt_price[0]['value']);

		if ( $distance > 50) {

			$node->field_apt_price[0]['value'] += floor(($distance-50));
		}

		$node->field_apt_stylist[0]['uid'] = $form_state['storage']['values'][1]['stylist_uid'];
		$node->field_apt_type[0]['nid'] = $form_state['storage']['values'][1]['service_type'];
		$node->field_apt_status[0]['value'] = 'Unconfirmed';

		$start_time = strtotime($form_state['storage']['values'][2]['chosen_date']) + $form_state['storage']['values'][2]['start_time'];

		$end_time = $start_time + (3600 * $requested_hours) -1;

		$node->field_extra_personal_shopping[0]['value'] = $extra_hours;

	//var_dump($start_time, $end_time);exit;

		$node->field_apt_date[0] = array(
			  "value" => $start_time,
			  "value2"=> $end_time,
			  "timezone" => "UTC",
			  "offset" => 0,
			  "offset2" => 0,
			  "timezone_db" => "UTC",
			  "date_type" => "datestamp"
		);

		$node->field_apt_address1[0]['value'] = $form_state['storage']['values'][1]['address1'];
		$node->field_apt_address2[0]['value'] = $form_state['storage']['values'][1]['address2'];
		$node->field_apt_city[0]['value'] = $form_state['storage']['values'][1]['city'];
		$node->field_apt_state[0]['value'] = $form_state['storage']['values'][1]['state'];
		$node->field_apt_zip[0]['value'] = $form_state['storage']['values'][1]['zip'];

		//var_dump($node->field_apt_price[0]['value'], $node, $distance); exit;


		styleforhire_add_apt(
			$node->field_apt_type[0]['nid'],
			$node,
			$node->field_apt_price[0]['value'],
			array(
				"requested_hours" => $requested_hours,
				"extra_hours" => $extra_hours,
				"date" => $form_state['storage']['values'][2]['chosen_date']
			),
			( !empty($form_state['storage']['values'][1]['cart_id']) ? $form_state['storage']['values'][1]['cart_id'] : NULL)
		);



		drupal_goto("cart");

		//var_dump($node);


		//content_insert($node);
	}

    //tell Drupal we are redrawing the same form
    $form_state['rebuild'] = TRUE;

	//var_dump($form_state);
    
}
*/

function styleforhire_block($op, $delta = 0, $edit = array()) {

	switch($op) {

		case 'list':

		$blocks[0] = array(
			'info' => t('S4H Client Order History')
		);
		$blocks[1] = array(
			'info' => t('S4H Client Appointments')
		);
		$blocks[2] = array(
			'info' => t('S4H Stylist Headshot')
		);
		$blocks[3] = array(
			'info' => t('S4H Basic Search'),
			'cache' => BLOCK_NO_CACHE
		);
		$blocks[4] = array(
			'info' => t('S4H Advanced Search'),
			'cache' => BLOCK_NO_CACHE
		);
		$blocks[5] = array(
			'info' => t('S4H Stylist Appointments')
		);
		$blocks[6] = array(
			'info' => t('Gift Cert Selector')
		);

		return $blocks;

		case 'view':

			//var_dump( arg(1));
		
		switch($delta) {

			case 0:

				$block["subject"] = "Order History";
				$block["content"] = styleforhire_order_history(arg(1));

				return $block;
			
			case 1:

				$block["subject"] = "My Appointments";
				
				$result = db_query("
					
					SELECT *,
						cta.field_apt_fname_value AS first_name,
						cta.field_apt_name_value AS last_name,
						n.nid as node_id
					FROM node n
					JOIN content_type_appointment cta ON cta.nid=n.nid
					/*JOIN content_field_apt_date cfad ON cfad.nid=n.nid*/
					JOIN node pn ON cta.field_apt_stylist_uid=pn.uid AND pn.type='profile'
					JOIN content_type_profile ctp ON ctp.nid=pn.nid
					WHERE n.uid=%d ANd n.type='Appointment' AND cta.field_apt_date_value > %d AND n.status=1
					GROUP BY n.nid
					ORDER BY cta.field_apt_date_value DESC

				", arg(1), time());
			
				$stylist = styleforhire_client_mystylist(arg(1));

				$contents = l('Book an Appointment', 'book_appointment/'.$stylist['uid']);
				while($row = db_fetch_object($result)) {
					global $user;
					$delete_priv = '';
					if(	isset($user->roles[8]) OR 
						isset($user->roles[9]) OR 
						isset($user->roles[10]) OR 
						isset($user->roles[7])){
							$delete_priv = ' | '.l('Cancel', 'node/'.$row->node_id.'/delete');
						}
					
					$contents .= '<div class="appt-list">';
					$contents .= '
									<div class="when">
										<div class="appt-date">
											<div class="day">'.
												date('D m/d', $row->field_apt_date_value).
											'</div>
										</div>'.
									'<div class="hour">'.
									date('h:ia', $row->field_apt_date_value).
									'</div>
									<div class="who">
										<div class="name">
											'.$row->first_name.' '.$row->last_name.'
										<span class="options">
											'.l('Modify', 'node/'.$row->node_id.'/edit').$delete_priv.'
										</span>
										</div>
											<div class="details">
												'.l('Details', 'node/'.$row->node_id).'
											</div>
										</div>
									</div>
								</div>';
				}

				$block["content"] = $contents;

				return $block;

			case 2:
				$pos = strrpos(arg(1),'.');
				if($pos !== false){ // If the client supplies 'firstname.lastname' instead of 'uid'
						$whereclause = "WHERE u.name='%s'";
							
					}
				else{
						$whereclause = "WHERE u.uid=%d";
					}
				$sql = 	'SELECT u.uid AS uid,
						f.filepath AS filename
						FROM users u
						/* application file */
						LEFT JOIN node an ON an.uid=u.uid AND an.type="stylist_application"
						LEFT JOIN content_type_stylist_application cfsa ON cfsa.nid=an.nid
						LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid '.$whereclause;
				$result = db_query($sql, arg(1));
				$rows = array();
				$user_data = db_fetch_object($result);

				/*$block["content"] .= '<a href="/book_appointment/'.($user_data->uid).'">';*/
				$block["content"] .= theme(
					'imagecache',
					'stylist_profile',
					"{$user_data->filename}"
				);
				/*$block["content"] .= '</a>';*/

				return $block;

			case 3:

				$block["content"] = drupal_get_form('styleforhire_basic_search_form');
				return $block;

			case 4:
		
				$block["content"] = drupal_get_form('styleforhire_adv_search_form');
				return $block;

			case 5:

				

				$result = db_query("
					
					SELECT cta.field_apt_fname_value AS first_name,
						cta.field_apt_name_value AS last_name,
						n.nid as node_id, 
						u.uid as user_id,
						cta.field_apt_date_value as field_apt_date_value,
						cta.field_apt_status_value as field_apt_status_value,
						ctsf.field_region_value as field_region_value,
						cta.field_apt_type_nid as field_apt_type_nid
					FROM 	node n
					JOIN users u on n.uid=u.uid
					JOIN content_type_appointment cta ON cta.nid=n.nid
					LEFT JOIN node pn ON n.uid=pn.uid AND pn.type='profile'
					LEFT JOIN content_type_profile ctp ON ctp.nid=pn.nid
					LEFT JOIN node nsf ON nsf.uid=%d AND nsf.type='stylists_file'
					LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=nsf.nid
					WHERE 	cta.field_apt_stylist_uid=%d AND
							n.type='Appointment' AND
							(	cta.field_apt_date_value > %d OR 
								cta.field_apt_status_value LIKE 'Reschedule') AND
							n.status=1
					GROUP BY n.nid
					ORDER BY cta.field_apt_date_value DESC

				", arg(1), arg(1), time()-15*24*60*60);//subu Customer Rating temporary fix

				$rows = array();
				while($row = db_fetch_object($result)) {
				date_default_timezone_set(styleforhire_timezone($row->field_region_value));
				styleforhire_debug(styleforhire_timezone($row->field_region_value),$row->field_region_value);
				$rows[] = $row;
				}
				
				if(count($rows) > 0 ){
					$block["subject"] = "My Appointments";
				}
				
				$contents = array();

				foreach($rows as $row) {
					
					if ( date("m/d/y", time()) == date("m/d/y", $row->field_apt_date_value) and
						$row->field_apt_status_value !== "Canceled") {
						global $user;
						$delete_priv = '';
						if(	isset($user->roles[8]) OR 
							isset($user->roles[9]) OR 
							isset($user->roles[10]) OR 
							isset($user->roles[7])){
								$delete_priv = ' | '.l('Cancel', 'node/'.$row->node_id.'/delete');
							}
						$contents['today'] .= '
										<div class="when">
											<div class="appt-date">
												<div class="day">'.
													date('D m/d', $row->field_apt_date_value).
												'</div>
											</div>'.
											'<div class="hour">'.
											date('h:ia T', $row->field_apt_date_value).
											'</div>
											<div class="who">
												<div class="name">
													'.$row->first_name.' '.$row->last_name.'
												<span class="options">
													'.l('Modify', 'node/'.$row->node_id.'/edit').$delete_priv.'
												</span>
												</div>
												<div class="details">
													'.l('Details', 'node/'.$row->node_id).'
												</div>
											</div>
										</div>';
					}
				}

				foreach($rows as $row) {
					
					//if ( date("m/d/y", time()) < date("m/d/y", $row->field_apt_date_value) and $row->field_apt_status_value == "Unconfirmed") {
					if ( (time() < $row->field_apt_date_value+24*60*60) and 
					($row->field_apt_status_value == "Unconfirmed" or
					$row->field_apt_status_value == "Reschedule")) {
						global $user;
						$delete_priv = '';
						//var_dump(date("m/d/y", time()));
						//var_dump(date("m/d/y", $row->field_apt_date_value));
						if(	isset($user->roles[8]) OR 
							isset($user->roles[9]) OR 
							isset($user->roles[10]) OR 
							isset($user->roles[7])){
								$delete_priv = ' | '.l('Cancel', 'node/'.$row->node_id.'/delete');
							}
						$contents['unconfirmed'] .= '
										<div class="when">
											<div class="appt-date">
												<div class="day">'.
													date('D m/d', $row->field_apt_date_value).
												'</div>
											</div>'.
											'<div class="hour">'.
											date('h:ia T', $row->field_apt_date_value).
											'</div>
											<div class="who">
												<div class="name">
													'.$row->first_name.' '.$row->last_name.'
												<span class="options">'.
												//	l('Modify', 'node/'.$row->node_id.'/edit').' | '.l('Confirm', 'confirm_appointment/'.$row->node_id.'/'.arg(1)).$delete_priv.
												'<a href="javascript:openModifyAppt('.$row->node_id.','.$row->field_apt_type_nid.');">Modify</a>'.' | '.l('Confirm', 'confirm_appointment/'.$row->node_id.'/'.arg(1)).$delete_priv.
												'</span>
												</div>
												<div class="details">
													'.l('Details', 'node/'.$row->node_id).'
												</div>
											</div>
										</div>';
					}
				}

				foreach($rows as $row) {

					//if ( date("m/d/y", time()) < date("m/d/y", $row->field_apt_date_value) and $row->field_apt_status_value == "Confirmed") {
					if ( (time() < $row->field_apt_date_value + 24*60*60) and $row->field_apt_status_value == "Confirmed") {
						global $user;
						$delete_priv = '';
						if(	isset($user->roles[8]) OR 
							isset($user->roles[9]) OR 
							isset($user->roles[10]) OR 
							isset($user->roles[7])){
								$delete_priv = ' | '.l('Cancel', 'node/'.$row->node_id.'/delete');
							}
						$contents['confirmed'] .= '
										<div class="when">
											<div class="appt-date">
												<div class="day">'.
													date('D m/d', $row->field_apt_date_value).
												'</div>
											</div>'.
											'<div class="hour">'.
											date('h:ia T', $row->field_apt_date_value).
											'</div>
											<div class="who">
												<div class="name">
													'.$row->first_name.' '.$row->last_name.'
												<span class="options">'.
												//	l('Modify', 'node/'.$row->node_id.'/edit').$delete_priv.'
													'<a href="javascript:openModifyAppt('.$row->node_id.','.$row->field_apt_type_nid.');">Modify</a>'.' | '.l('Confirm', 'confirm_appointment/'.$row->node_id.'/'.arg(1)).$delete_priv.
												'</span>
												</div>
												<div class="details">
													'.l('Details', 'node/'.$row->node_id).'
												</div>
											</div>
										</div>';
					}
				}
				
				foreach($rows as $row) {

					//if ( date("m/d/y", time()) >= date("m/d/y", $row->field_apt_date_value) and $row->field_apt_status_value == "Confirmed") {
					if ( (	time() >= $row->field_apt_date_value+5*60*60 and 
							$row->field_apt_status_value !== "Completed" and
							$row->field_apt_status_value !== "Canceled" and
							$row->field_apt_type_nid != 107)){ // Don't display Stylist introduction.
						//and $row->field_apt_status_value == "Confirmed") {
						/* Making the event a past event after 5 hours */
						global $user;
						$delete_priv = '';
						if(	isset($user->roles[8]) OR 
							isset($user->roles[9]) OR 
							isset($user->roles[10]) OR 
							isset($user->roles[7])){
								$delete_priv = ' | '.l('Cancel', 'node/'.$row->node_id.'/delete');
							}
						
						$contents['past'] .= '
										<div class="when">
											<div class="appt-date">
												<div class="day">'.
													date('D m/d', $row->field_apt_date_value).
												'</div>
											</div>'.
											'<div class="hour">'.
											date('h:ia T', $row->field_apt_date_value).
											'</div>
											<div class="who">
												<div class="name">
													'.$row->first_name.' '.$row->last_name.'
												<span class="options">
													'.l('Mark as Completed', 'complete_appointment/'.$row->node_id.'/'.$user->uid).$delete_priv.' | '.
													'<a href="javascript:openModifyAppt('.$row->node_id.','.$row->field_apt_type_nid.');">Modify</a>'.
													'
												</span>
												</div>
												<div class="details">
													'.l('Details', 'node/'.$row->node_id).'
												</div>
											</div>
										</div>';
					}
				}

				if ( !empty($contents['today'])) {

					$html_contents = '
						<span class="today">TODAY:</span>
					'.$contents['today'];

				}

				if ( 	!empty($contents['unconfirmed'])	or 
						!empty($contents['confirmed'])) {

					$html_contents .= '
						<span class="upcoming">UPCOMING:</span>
					';

					if (!empty($contents['unconfirmed'])) {

						$html_contents .= '
							<span class="unconfirmed">Unconfirmed:</span>
						'.$contents['unconfirmed'];
					}

					if (!empty($contents['confirmed'])) {

						$html_contents .= '
							<span class="confirmed">Confirmed:</span>
						'.$contents['confirmed'];
					}
					

				}
				if ( 	!empty($contents['past'])){
					$html_contents .= '
						<span class="upcoming">PAST:</span>
					';
					$html_contents .= '
							<span class="past">Please Mark them as Completed</span>
						'.$contents['past'];

				}

				$block["content"] = '<div class="appt-list">'.$html_contents.'</div>';

				return $block;

			case 6:

	
				$block["content"] = drupal_get_form('styleforhire_gift_cert_select_form');
				return $block;
		}
	}

}

function styleforhire_gift_cert_select_form() {

	$result = db_query('
		SELECT n.nid, title
		FROM node n
		JOIN uc_products ucp ON ucp.nid=n.nid
		WHERE n.type="product" AND title LIKE "%Gift Certificate%"
		ORDER BY ucp.sell_price
	');

	$select_options = array();
	while($row=db_fetch_array($result)) {

		$select_options[$row['nid']] = str_replace("Gift Certificate", "", $row['title']);
	}

	$form = array(
		'gift_cert_id' => array(
			'#type' => 'select',
			'#title' => '',
			'#options' => $select_options
		),
		'submit' => array(
			'#type' => 'submit',
			'#value' => 'Buy'
		)
	);


	return $form;
}

function styleforhire_gift_cert_select_form_submit($form, $form_values) {

	drupal_goto('node/'.$form_values['values']['gift_cert_id']);
}

function styleforhire_basic_search_form() {

	$form = array(
		's_zip' => array(
			'#name' => 's_zip',
			'#title' => 'Find A Stylist',
			'#type' => 'textfield',
			'#default_value' => 'ENTER ZIPCODE HERE',
			'#size' => 20,
			'#maxlength' => 30,
			'#autocomplete_path' => 'styleforhire/autocomplete',
			/*'#prefix' => '<h6 class="trigger"><a href="#">Find a Stylist</a></h6><div class="toggle_container"><div>',
			'#suffix' => '</div></div>',*/
			'#attributes' => array(
				'onclick' => 'if ( this.value=="ENTER ZIPCODE HERE") { this.value="" }'
			)
		),
		'basic_search' => array(
			'#name' => 'basic_search',
			'#id'=> 'basic_search',
			'#type' => 'submit',
			'#value' => 'Search',
			'#attributes' => array(
				'onclick' => '
					location = "/adv_search/zip/" + $("#edit-s-zip").val();
					return false;
				'
			)
		)
	);

	return $form;
}

function styleforhire_basic_search_form_submit($form, &$form_state) {
	drupal_goto('adv_search/zip/'.$form_state['values']['s_zip']);
}

function styleforhire_get_allowed_values($cck_field) {

	$result = db_query("
			SELECT global_settings
			FROM content_node_field
			WHERE field_name='%s'
		", $cck_field
	);

	$result = unserialize(db_result($result));

	return explode("\n", $result['allowed_values']);

}

function styleforhire_client_mystylist($uid) {

	$result = db_query('
	
		SELECT
			u.field_apt_stylist_uid as uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name

		FROM (
			SELECT MAX(n.nid) as nid, n.uid, field_apt_stylist_uid
			FROM `content_type_appointment` cta
			JOIN node n ON cta.nid=n.nid
			GROUP BY n.uid
		) as u

		/* profile node */
		JOIN node pn ON pn.uid=u.field_apt_stylist_uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		WHERE u.uid=%d

	', $uid);

	$rows = array();

	while($row = db_fetch_array($result)) {

		$rows[] = $row;
	}

	return $rows[0];

}

function styleforhire_build_name_link($uid, $first_name, $last_name) {

	return l($first_name.' '.$last_name, 'dashboard/'.$uid);
}

function styleforhire_dm_mystylists($uid) {

	$header = array(
		array('data'=>'Name','field'=>'last_name'),
		array('data'=>'Appts to Date','field'=>'apt_count'),
		array('data'=>'Earnings to Date','field'=>'earnings'),
		'Area Of Expertise',
		array('data'=>'Status','field'=>'status'),
		''
	);

	$result = db_query('
	
		SELECT
			u.uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			COUNT(*) AS apt_count,
			SUM(field_apt_price_value) AS earnings,
			(
				SELECT GROUP_CONCAT(DISTINCT cfae.field_areas_of_expertise_value SEPARATOR ", ") AS expertise
				/* stylist file */
				FROM node sn
				LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid
				LEFT JOIN content_field_areas_of_expertise cfae ON cfae.nid=sn.nid
				WHERE sn.type="stylists_file"
			) as expertise,
			ctsf.field_status_value AS status

		FROM users u

		JOIN users_roles ur ON ur.uid=u.uid AND ur.rid=3
		JOIN content_type_appointment cta ON cta.field_apt_stylist_uid=u.uid
		JOIN node an ON an.nid=cta.nid AND an.type="appointment" AND an.status=1

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		/* stylist file */
		LEFT JOIN node sn ON sn.uid=u.uid AND sn.type="stylists_file"
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid

		WHERE u.uid != %d

		GROUP BY u.uid

	'.tablesort_sql($header), $uid);

	$rows = array();

	while($row = db_fetch_array($result)) {

		$rows[] = array(
			l($row['first_name'].' '.$row['last_name'], 'dashboard/'.$row['uid']),
			$row['apt_count'],
			'$'.number_format($row['earnings'], 2),
			'<div class="expertise">'.$row['expertise'].'</div><div class="edit">'.l('Edit', 'user/'.$row['uid'].'/edit/stylists_file')."</div>",
			$row['status'],
			l('View/Add Notes', 'user/'.$row['uid'].'/edit/stylists_file')
		);
	}

	return theme('table', $header, $rows);

}

function styleforhire_stylist_myclients($uid) {

	$result = db_query('
	
		SELECT 
			u.uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name/*,
			ln.nid*/

		FROM (
			SELECT MAX(n.nid), n.uid, field_apt_stylist_uid
			FROM `content_type_appointment` cta
			JOIN node n ON cta.nid=n.nid
			GROUP BY n.uid
		) as u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		/* lookbook node */
		/*LEFT JOIN node ln ON ln.uid=u.uid AND ln.type="lookbook"*/

		WHERE u.field_apt_stylist_uid=%d

	', $uid);

	$rows = array();

	while($row = db_fetch_array($result)) {

		$rows[] = $row;
	}

	return $rows;
}

function styleforhire_dm_get_alerts($uid) {

	$result = db_query("
		SELECT * FROM dm_alerts WHERE timestamp > %d
	", time()-86400*7);

	$alerts = "<ul>";
	while($row = db_fetch_array($result)) {

		$alerts .= '<li class="date">'.date("m.d.y", $row['timestamp']).'</li>';
		$alerts .= '<li class="alert">'.$row['alert'].'</li>';
	}

	$alerts .= "</ul>";

	return $alerts;
}

function styleforhire_stylist_dashboard($user,$stalker_id, $is_stalker_dm_admin) {

	$uid = $user->uid;
	if(	!(strcmp($stalker_id,$user->uid)==0
			|| $is_stalker_dm_admin)){
		drupal_access_denied();
		exit;
	}
	$result = db_query('

			SELECT u.uid as uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_address1_value AS address1,
			ctp.field_address2_value AS address2,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			ctp.field_zip_value AS zip,
			pr.value AS birthday,
			ctp.field_phone_num_value AS phone,
			ctp.field_personal_email_value AS email,
			ctcp.field_your_style_value AS style,
			GROUP_CONCAT(DISTINCT cfsi.field_style_icons_value SEPARATOR "</li><li>") AS icons,
			GROUP_CONCAT(DISTINCT cfsb.field_your_brands_value SEPARATOR "</li><li>") AS brands,
			GROUP_CONCAT(DISTINCT cfss.field_your_shops_value SEPARATOR "</li><li>") AS shops,
			cfff1.field_fav_fashion1_value AS url1,
			cfff2.field_fav_fashion2_value AS url2,
			cfff3.field_fav_fashion3_value AS url3,
			ctsp.field_affiliations_value AS affiliations,
			ctsp.field_intro_statement_value AS introduction,
			ctsp.field_experience_value AS experience,
			ctsp.field_education_training_value AS education,
			ctsp.field_things_i_love_value AS things_i_love,
			ctsp.field_hourly_rate_1_value AS hourly_rate,
			ctsp.field_testimonial1_value as testimonial1,
			ctsp.field_testimonial_name1_value as testimonial_name1,
			ctsp.field_testimonial2_value as testimonial2,
			ctsp.field_testimonial_name2_value as testimonial_name2,
			ctsp.field_testimonial3_value as testimonial3,
			ctsp.field_testimonial_name3_value as testimonial_name3,
			ctsp.field_case_study1_value as case_study1_value,
			ctsp.field_case_study2_value as case_study2_value,
			ctsp.field_case_study3_value as case_study3_value,
			ctsp.field_hours_of_experience_1_value as hrs_exp_value,
			ctcp.field_your_brands_other_value as brands_other,
			ctcp.field_your_shops_other_value as shops_other,
			ctcp.field_style_icons_other_value as icons_other,
			ctsf.field_s4h_id_value as s4h_id,
			ctsf.field_status_value as stylist_status,
			ctsf.field_travel_distance_value as stylist_travel_distance


		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		/* client prefs */
		LEFT JOIN node cn ON cn.uid=u.uid AND cn.type="preferences"
		LEFT JOIN content_type_preferences ctcp ON ctcp.nid=cn.nid
		LEFT JOIN content_field_style_icons cfsi ON cfsi.nid=cn.nid
		LEFT JOIN content_field_your_brands cfsb ON cfsb.nid=cn.nid
		LEFT JOIN content_field_your_shops cfss ON cfss.nid=cn.nid
		LEFT JOIN content_field_fav_fashion1 cfff1 ON cfff1.nid=cn.nid
		LEFT JOIN content_field_fav_fashion2 cfff2 ON cfff2.nid=cn.nid
		LEFT JOIN content_field_fav_fashion3 cfff3 ON cfff3.nid=cn.nid
		LEFT JOIN profile_values pr ON pr.uid=u.uid

		LEFT JOIN node an ON an.uid=u.uid AND an.type="stylist_application"
		LEFT JOIN node an1 ON an1.uid = u.uid AND an1.type="stylists_file"
		LEFT JOIN content_type_stylist_application ctsp ON ctsp.nid=an.nid
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=an1.nid
		/*LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid*/

		WHERE u.uid=%d

		GROUP BY u.uid

		', $uid
	);
	
	$user_data = db_fetch_object($result);
	
	if(	$user_data == null ||
		$user_data->uid != $uid){

			/* profile */
	    $result = db_query('SELECT nid FROM node WHERE type="profile" AND uid=%d',$uid);
		if(db_fetch_object($result) == null){
			$node->type = "profile";
			$node->uid = $uid;
			$node->status = 1;
			node_save($node);
		}
	/* stylists_file */
		$result = db_query('SELECT nid FROM node WHERE type="stylists_file" AND uid=%d',$uid);
		if(db_fetch_object($result) == null){
			$node->type = "stylists_file";
			$node->uid = $uid;
			$node->status = 1;
			node_save($node);
		}
	/* stylist_application */
		$result = db_query('SELECT nid FROM node WHERE type="stylist_application" AND uid=%d',$uid);
		if(db_fetch_object($result) == null){
			$node->type = "stylist_application";
			$node->uid = $uid;
			$node->status = 1;
			node_save($node);
		}
	/* preferences */
		$result = db_query('SELECT nid FROM node WHERE type="preferences" AND uid=%d',$uid);
		if(db_fetch_object($result) == null){
			$node->type = "preferences";
			$node->uid = $uid;
			$node->status = 1;
			node_save($node);
		}	
	}

	//Extracting linkshare links for Stylist's mall.
	if($user_data->s4h_id != null){
		$mallSection_header = "<li><a href=\"#my-mall\" title=\"my mall\">My Mall</a></li>";
		$result = db_query('select partner, linkshare_link, is_linkshare, special_id from partners');
		$mall_links = "<div id=\"my-mall\"><div class=\"section-white\"><b>To be eligible for commissions at the following stores, you must click through using these links:</b><div class=\"color-code-darkblue\">";
		while($row = db_fetch_array($result)){
		if($row['is_linkshare'] === '1'){
			$mall_links .= "<div><a target=\"_blank\" href=\"".$row['linkshare_link']."&u1={$user_data->s4h_id}\" title=\"".
							$row['partner']."\">".$row['partner']."</a></div>";
			}
		}
		$mall_links .= "</div></div><div class=\"section-grey\"><br><b>To be eligible for commissions and discounts (when applicable) at the following stores, you will enter your Style for Hire Stylist ID during the checkout process.  Further details can be found on the <i>Style for Hire Retail and Services Partners spreadsheet</i> in your Stylist folder.</b><br><div class=\"color-code-lightblue\">";
		$result = db_query('select partner, linkshare_link, is_linkshare, special_id from partners');
		while($row = db_fetch_array($result)){
		if($row['is_linkshare'] !== '1'){
			$mall_links .= "<div><a target=\"_blank\" href=\"".$row['linkshare_link']."\" title=\"".
							$row['partner']."\">".$row['partner'];
				if($row['special_id'] === '1'){
					$mall_links .= "&nbsp;(Use ".$row['partner']." Assigned ID to Initiate Commission/Discount)";
				}
			$mall_links .= "</a></div>";
			}
		} 
		$mall_links .= "</div></div></div>";
		//drupal_set_message($mall_links);		
		$customerSection_header = "<li><a href=\"#my-customer\" title=\"my customer\">My Clients</a></li>";
		$customerSection = 	"<div id=\"my-customer\">".
								"<div id=\"tab3\">".
								"<ul>".
									"<li><a href=\"#special-discounts\" title=\"special discounts\">Special Discounts</a></li>".
									"<li><a href=\"#clients-outside-s4h-network\" title=\"import clients\">Clients you bring to Style for Hire</a></li>".
								"</ul>".
								"<div id=\"special-discounts\">";
		$result = db_query('SELECT id, StylistHourlyRate,FirstName, LastName from stylist_special_rate where StylistID=%d',$user_data->uid);
		$iter = 0;
		while($row = db_fetch_array($result)){
			if($iter == 0){
				$customerSection .= "<div><b>Existing clients with special discounts</b></div>";
				$customerSection .= "<div><table class='jtable stylist-dashboard-table'><tr><th>Name</th><th>Hourly Rate</th><th></th></tr>";
				$iter++;
			}
			$customerSection .= "<tr><td>".$row['FirstName']." ".$row['LastName']."</td><td>$ ".$row['StylistHourlyRate']."</td><td><a href='/remove_special_customers/".$user_data->uid.'/'.$row['id'].'/'."0'>Remove</a></td></tr>";
		} 
			if($iter > 0){
				$customerSection .= "</table></div>";
			}
		$customerSection .= drupal_get_form("stylist_add_discounts_for_customers_form",$user_data->uid)."</div>";
		$customerSection .= "<div id=\"clients-outside-s4h-network\">";
		$result = db_query('SELECT id, First_Name , Last_Name , Phone , Email FROM customers_outside_s4h WHERE Stylist_id =%d',$user_data->uid);
		$iter = 0;
		while($row = db_fetch_array($result)){
			if($iter == 0){
				$customerSection .= "<div><b>Clients you would like to bring to the Style for Hire Network.</b></div>";
				$customerSection .= "<div><table class='jtable stylist-dashboard-table'><tr><th>Name</th><th>Phone</th><th>Email</th><th></th></tr>";
				$iter++;
			}
			$customerSection .= "<tr><td>".$row['First_Name']." ".$row['Last_Name']."</td><td>".$row['Phone']."</td><td>".$row['Email']."</td><td><a href='/remove_special_customers/".$user_data->uid.'/'.$row['id'].'/'."1'>Remove</a></td></tr>";
		} 
			if($iter > 0){
				$customerSection .= "</table></div>";
			}
		$customerSection .= drupal_get_form("stylist_add_non_sfh_customers_form",$user_data->uid)."</div>";
		$customerSection .= "</div></div>";
		//styleforhire_debug($customerSection,'customersection');
	}
	
	$client_output = "<ul>";
	$clients = styleforhire_stylist_myclients($uid);

	foreach($clients as $client) {

		/*if ( ! empty($client['nid'])) {

			$client_output .= '<li>'.
			l($client['first_name'].' '.$client['last_name'], 'dashboard/'.$client['uid']).
			' <span class="createLookbook">['.l('edit Lookbook', 'node/'.$client['nid'].'/edit').']<span></li>';

		} else {*/

			$client_output .= '<li>'.
			l($client['first_name'].' '.$client['last_name'], 'dashboard/'.$client['uid']).
			' <span class="createLookbook">['.l('edit Lookbook', 'user/'.$client['uid'].'/profile/lookbook').']<span></li>';
		//}
	}

	$client_output .= "</ul>";

	if ( isset($user->roles[7])) {

		$alerts = styleforhire_dm_get_alerts($user->uid);

		$alerts = "
		<div class='alerts group'>
			<div class='outer'>
				<div class='inner'>
					<h2>Alerts</h2>
					$alerts
				</div>
			</div>
		</div>";
	}
		

	if ( isset($user->roles[7])) {

		$stylist_output = styleforhire_dm_mystylists($uid);

		$stylist_output = "
			<div class='stylists-list group'>
				<div class='outer'>
					<div class='inner'>
						<h2>My Stylists</h2>
						{$stylist_output}
					</div>
				</div>
			</div>
		";
	}
/* subu 10/11/10 adding calendar */
$calendarStr ="";

drupal_add_js(drupal_get_path('module', 'styleforhire').'/stylist_dashboard.js');
drupal_add_css(drupal_get_path('module', 'styleforhire').'/stylist_dashboard.css');
if(strcmp($stalker_id,$user->uid)==0
	|| $is_stalker_dm_admin){ /* Show the calendar if the stalker is actually the
						user OR if the stalker is a District Manager*/
			drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery.js');
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/fullcalendar.js');
		    drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/fullcalendar.css');
		    
		    drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/smoothness/theme.css');
		    
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery-ui-1.8.8.custom.min.js');
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery.qtip-1.0.js');
			drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery.cookie.js');
			drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/jquery-timepicker-addon.js');
		    
		    drupal_add_js(drupal_get_path('module', 'styleforhire').'/calendar/StylistCustFullCalendar.js');
		    drupal_add_css(drupal_get_path('module', 'styleforhire').'/calendar/StylistCustFullCalendar.css');
			drupal_add_js(array('userid' => $uid),'setting');
			$calendarStr = "<div id='calendar'></div>";
	}
			
	/*return "<a href=\"{$GLOBALS['base_url']}/user/$uid/schedule/\">Manage Schedule</a>
		<div class=\"widget-left\">
		$alerts

		<div class='my-clients group'>
			<div class='outer'>
				<div class='inner clearfix'>
					<h2>My Clients</h2>
					{$client_output}
				</div>
			</div>
		</div>

		<div class='affiliations group'>
			<div class='outer'>
				<div class='inner'>
					<div class='controls'>
						<a class='edit' href='{$GLOBALS['base_url']}/user/$uid/edit/stylist_application'>Edit</a>
					</div>
					<h2>Affiliations</h2>
					{$user_data->affiliations}
				</div>
			</div>
		</div>
		</div> <!-- end widget-left -->
		<div class=\"widget-right\">
		<div class='account-info group'>
			<div class='outer'>
				<div class='inner'>
					<div class='controls'>
						<a class='edit' href='{$GLOBALS['base_url']}/user/{$user->uid}/edit'>Edit</a>
					</div>
					<h2>Account Information</h2>
					<dl>
						<dt class='address'>Address:</dt>
							<dd>{$user_data->address1}</dd>
							<dd class=\"dd-block\">{$user_data->address2}</dd>
						<dd>{$user_data->city}</dd>, <dd>{$user_data->state}</dd> <dd>{$user_data->zip}</dd><br />
						<dt class='email'>Email:</dt><dd>{$user->mail}</dd><br />
						<dt class='birthday'>Birthday:</dt><dd>".(date('F d, Y', $user_data->birthday))."</dd><br />
						<dt class='username'>Username:</dt><dd>{$user->name} [<span><a href=\"/user/{$user->uid}/edit\">change password</a>]</span></dd>
					</dl>
				</div>
			</div>
		</div>
		</div> <!-- end widget-right -->
		$stylist_output
		$calendarStr
	";*/ // subu 10/11/10 - added calendar on Stylist's dashboard
	if($user_data->stylist_status != null && $user_data->s4h_id != null){
	/*if(	($user_data->stylist_status != null) &&
		($user_data->stylist_status == "Active" ||
		 $user_data->stylist_status == "On Vacation" ||
		 $user_data->stylist_status == "Active but limited access")){*/ 
		$calSection_header = "<li><a href=\"#calendar-section\" title=\"calendar section\">Calendar</a></li>";
		$calSection_div = "<div id=\"calendar-section\">".
									$stylist_output.$calendarStr.
									//"<div><a href=\"/node/add/event\" title=\"create repeating events\">Click here to create Repeating Events</a></div>".
								"</div>";
		$stylist_s4h_id = "Style for Hire ID:  {$user_data->s4h_id}";
		}
		

	$outputs = '<div style="display:none;" class="thanksbox">Thanks for you feedback!<br><br>We look forward to working with you in the future.<br><br></div>';
	$final_output =  $outputs."<div id=\"stylist-dashboard\">".
						"<div id=\"tabs\">".
						"<ul>".
							$calSection_header.
							"<li><a href=\"#my-profile\" title=\"my profile\">My Profile</a></li>".
							$mallSection_header.
							$customerSection_header.
						"</ul>".
								$calSection_div.
								"<div id=\"my-profile\">".
									"<div id=\"tab2\">".
									"<ul>".
										"<li><a href=\"#basic-information\" title=\"basic information\">About Me</a></li>".
										"<li><a href=\"#case-studies\" title=\"case studies\">Case Studies & Testimonials</a></li>".
									"</ul>".
									"<div id=\"basic-information\">".
										"<div id=\"tab3\">".
											"<ul>".
												"<li><a href=\"#personal\" title=\"personal\">Personal</a></li>".
												"<li><a href=\"#profile\" title=\"picture\">Profile</a></li>".
												"<li><a href=\"#otherdetails\" title=\"otherdetails\">Other Details</a></li>".
											"</ul>".
											"<div id=\"personal\">".
												"{$user_data->first_name} {$user_data->last_name}".
												"<br>".
												$stylist_s4h_id."<br>".
												drupal_get_form('stylist_basic_personal_form',$user_data, $uid).
												drupal_get_form('stylist_picture_form',$user_data, $uid).
											"</div>".
											"<div id=\"profile\">".
												"{$user_data->first_name} {$user_data->last_name}".
												"<br>".
												$stylist_s4h_id."<br>".
												drupal_get_form('stylist_profile_form',$user_data, $uid).
											"</div>".
											"<div id=\"otherdetails\">".
												"{$user_data->first_name} {$user_data->last_name}".
												"<br>".
												$stylist_s4h_id."<br>".
												drupal_get_form('stylist_rate_and_preferences_form',$user_data, $uid).
											"</div>".
										"</div>".
									"</div>".
									"<div id=\"case-studies\">".
										"{$user_data->first_name} {$user_data->last_name}".
										"<br>".
										$stylist_s4h_id."<br>".
										drupal_get_form('stylist_testimonials_form',$user_data, $uid).
										drupal_get_form('stylist_case_study1_form',$user_data, $uid).
										drupal_get_form('stylist_case_study1_before_picture_form',$user_data, $uid).
										drupal_get_form('stylist_case_study1_after_picture_form',$user_data, $uid).
									"</div>".
									"</div>".
								"</div>".
								 $mall_links.$customerSection.
									/*"<div>".
										"<ol id=\"selectable\">".
										"<li class=\"ui-state-default\">Children/Teen</li>".
										"<li class=\"ui-state-default\">Eco Styling</li>".
										"<li class=\"ui-state-default\">Gift Buying</li>".
										"<li class=\"ui-state-default\">Groups</li>".
										"<li class=\"ui-state-default\">Maternity / Post Natal</li>".
										"<li class=\"ui-state-default\">Men</li>".
										"<li class=\"ui-state-default\">Professional</li>".
										"<li class=\"ui-state-default\">Plus Size</li>".
										"<li class=\"ui-state-default\">Petite</li>".
										"</ol>".
									"</div>".*/
							"</div>".
						"</div>";
	return $final_output;
}
function stylist_case_study1_before_picture_form($form_state,$user_data, $uid){
	
	$query 		= 	"SELECT f.filepath as filePath,f.fid as fileId,an.nid as nodeId,  
					concat(ctp.field_first_name_value,'_',ctp.field_last_name_value) as stylistName,
					ctp.field_state_value as state, an.nid as nodeId FROM users u
					JOIN node pn ON pn.uid=u.uid AND pn.type='profile'
					JOIN content_type_profile ctp ON ctp.nid=pn.nid
					LEFT JOIN node an ON an.uid=u.uid AND an.type='stylist_application'
					LEFT JOIN content_type_stylist_application ctsp ON ctsp.nid=an.nid
					LEFT JOIN files f on f.fid=ctsp.field_case_study_before1_fid 
					where u.uid=%d";
	$rs 		=	db_query($query, $uid);
	
	while ($row = db_fetch_array($rs)){
		$file_path  	= $row['filePath'];
		$file_id 		= $row['fileId'];
		$node_num		= $row['nodeId'];
	//	drupal_set_message('<pre>fileID set is '. print_r($file_id, TRUE) .'</pre>');
		$stylistName 	= $row['stylistName'];
		$state 			= $row['state'];
	}
		
		$form['picture'] = array('#type' => 'fieldset', '#title' => t('Case Study 1 - Before'));
		/*$form['picture']['casestudy1'] = array(
							'#type' => 'textarea',
							'#title' => t('Case Study 1'),
							'#default_value' => $user_data->case_study1_value,
							'#required' => FALSE
						); */
						

			if($file_path != FALSE){
				//drupal_set_message('<pre>'. print_r($file_path, TRUE) .'</pre>');
				$picture = theme(
								'imagecache',
								'stylist_casestudies',
								$file_path
							);
				//$form['stylist_picture_file_path'] = $file_path;
				$form['picture']['current_picture'] = array('#value' => $picture);
			/*	$form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), 
					'#description' => t('Check this box to delete your current picture.'));
			*/
			}
			else {
				$form['picture']['picture_delete'] = array('#type' => 'hidden');
			}

    $form['picture']['picture_upload'] = 
					array(	'#type' => 'file', 
							'#title' => t('Upload Image'),
							'#size' => 48, 
							'#description' => t('Requirements: Full-body shot against a background that\'s as neutral as possible, high-resolution, 500KB-5MB; portrait format (taller than wide).'));
/*	$form['picture']['picture_upload_after'] = 
					array(	'#type' => 'file', 
							'#title' => t('Upload Image'),
							'#size' => 48, 
							'#description' => t('Maximum size is %size MB.', array('%dimensions' => 	'250x250', '%size' => '10')));
*/
    $form['#validate'][] = 'stylist_case_study1_before_picture_validate';
	$form['fid'] = array(
					'#type'  => 'hidden',
					'#value' => $file_id,
	 			);
	if($file_id == null){
				$form['nid'] = array(
								'#type'  => 'hidden',
								'#value' => $node_num,
							);
				}
	$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);
	$form['sub-directory'] = array(
					'#type'  => 'hidden',
					'#value' => 'sites/default/files/stylists/'.$state.'/'.$stylistName.'/case_study1/'.$stylistName.'_cs1_before',
				);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Upload'),
	);
 
	/*$form['#redirect'] = 'product_list'; */
	$form['#attributes']['enctype'] = 'multipart/form-data';
 
	return $form;
}
function stylist_case_study1_before_picture_validate(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$destination	= $form_values['sub-directory'];
	//drupal_set_message('<pre> fid in validate is '. print_r($form_values['fid'], TRUE) .'</pre>');
	
	
	$validators = array(
    		'file_validate_is_image' => array(),
	    	'file_validate_image_resolution' => array('450x650'),
    		'file_validate_size' => array(5 * 1024 * 1024),
  	);
	if($file = file_save_upload('picture_upload', $validators)){
		
		if($form_values['fid'] == null){ $form_state['values']['fid'] = $file->fid;}

		$info = image_get_info($file->filepath);
		if($info['width']>1500){
			form_set_error('picture_upload', t("Failed to upload the picture. Please reduce the size of the file before uploading."));
			return;
		}
		if($info['width']>$info['height']){
			form_set_error('picture_upload', t("Failed to upload the picture. Please upload your picture in the portrait format."));
			return;
		}
		if($info['width']<260){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The width of the image is less than 260"));
			return;
		}
		if($info['height']<380){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The height of the image is less than 380."));
			return;
		}
		if(!is_dir($destination) &&  @mkdir($destination,0775,TRUE)) {
		//if(!file_check_directory($directory, 1)){
			//drupal_set_message(t('The directory %directory has been created.', array('%directory' => $destination)));
		}

		if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
	//	if (copy($file->filepath, $destination)) {
				$form_state['values']['picture'] = $file->filepath;
				//drupal_set_message('file copied from '.$file->filepath.' to '.$destination);

    		}
    		else {
				drupal_set_message('Error: Couldnt copy file from '.$file.' to '.$destination,'error');
      			form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", 
                        array('%directory' => variable_get('product_picture_path', 'product_pictures'))));
    		}

	}
	
}

function stylist_case_study1_before_picture_form_submit(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$image_path		= $form_values['picture'];
	$fid			= $form_values['fid'];
	$nid			= $form_values['nid'];
	
	//drupal_set_message('<pre>file id is'.$fid.'</pre>');
	//drupal_set_message('<pre>image path is'.$image_path.'</pre>');
	//drupal_set_message('<pre>node id is'.$nid.'</pre>');
	db_query("UPDATE files set filepath='%s', status=1 where fid=%d",$image_path,$fid);
	
	if($nid == null){
		db_query("INSERT INTO content_type_stylist_application(vid,nid,field_case_study_before1_fid) VALUES(%d,%d,%d)",$nid,$nid, $fid);
	}
	else{
		db_query("UPDATE content_type_stylist_application set field_case_study_before1_fid='%d' where nid=%d",$fid,$nid);
	}
	
}

function stylist_case_study1_after_picture_form($form_state,$user_data, $uid){

	
	
	$query 		= 	"SELECT f.filepath as filePath,f.fid as fileId, 
					concat(ctp.field_first_name_value,'_',ctp.field_last_name_value) as stylistName,
					ctp.field_state_value as state, an.nid as nodeId FROM users u
					JOIN node pn ON pn.uid=u.uid AND pn.type='profile'
					JOIN content_type_profile ctp ON ctp.nid=pn.nid
					LEFT JOIN node an ON an.uid=u.uid AND an.type='stylist_application'
					LEFT JOIN content_type_stylist_application ctsp ON ctsp.nid=an.nid
					LEFT JOIN files f on f.fid=ctsp.field_case_study_after1_fid 
					where u.uid=%d";
	$rs 		=	db_query($query, $uid);
	
	while ($row = db_fetch_array($rs)){
		$file_path  	= $row['filePath'];
		$file_id 		= $row['fileId'];
		$node_num		= $row['nodeId'];
		//drupal_set_message('<pre>fileID set is '. print_r($file_id, TRUE) .'</pre>');
		$stylistName 	= $row['stylistName'];
		$state 			= $row['state'];
	}
		$form['picture'] = array('#type' => 'fieldset', '#title' => t('Case Study 1 - After'));
			if($file_path != FALSE){
				//drupal_set_message('<pre>'. print_r($file_path, TRUE) .'</pre>');
				$picture = theme(
								'imagecache',
								'stylist_casestudies',
								$file_path
							);
				//$form['stylist_picture_file_path'] = $file_path;
				$form['picture']['current_picture'] = array('#value' => $picture);
			/*	$form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), 
					'#description' => t('Check this box to delete your current picture.'));
			*/
			}
			else {
				$form['picture']['picture_delete'] = array('#type' => 'hidden');
			}

    $form['picture']['picture_upload'] = 
					array(	'#type' => 'file', 
							'#title' => t('Upload Image'),
							'#size' => 48, 
							'#description' => t('Requirements: Full-body shot against a background that\'s as neutral as possible, high-resolution, 500KB-5MB; portrait format (taller than wide).'),
							);
 
    $form['#validate'][] = 'stylist_case_study1_after_picture_validate';
	$form['fid'] = array(
					'#type'  => 'hidden',
					'#value' => $file_id,
				);
	if($file_id == null){
				$form['nid'] = array(
								'#type'  => 'hidden',
								'#value' => $node_num,
							);
				}
	$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);
	$form['sub-directory'] = array(
					'#type'  => 'hidden',
					'#value' => 'sites/default/files/stylists/'.$state.'/'.$stylistName.'/case_study1/'.$stylistName.'_cs1_after',
				);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Upload'),
	);
 
	/*$form['#redirect'] = 'product_list'; */
	$form['#attributes']['enctype'] = 'multipart/form-data';
 
	return $form;
}
function stylist_case_study1_after_picture_validate(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$destination	= $form_values['sub-directory'];
	//drupal_set_message('<pre> fid in validate is '. print_r($form_values['fid'], TRUE) .'</pre>');
	
	
	$validators = array(
    		'file_validate_is_image' => array(),
	    	'file_validate_image_resolution' => array('450x650'),
    		'file_validate_size' => array(5 * 1024 * 1024),
  	);
	if($file = file_save_upload('picture_upload', $validators)){
		//drupal_set_message('<pre>'. print_r($form_state['values'], TRUE) .'</pre>');
		if($form_values['fid'] == null){ $form_state['values']['fid'] = $file->fid;}
		$info = image_get_info($file->filepath);
		if($info['width']>1500){
			form_set_error('picture_upload', t("Failed to upload the picture. Please reduce the size of the file before uploading."));
			return;
		}
		if($info['width']>$info['height']){
			form_set_error('picture_upload', t("Failed to upload the picture. Please upload your picture in the portrait format."));
			return;
		}
		if($info['width']<260){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The width of the image is less than 260"));
			return;
		}
		if($info['height']<380){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The height of the image is less than 380."));
			return;
		}
		if(!is_dir($destination) &&  @mkdir($destination,0775,TRUE)) {
		//if(!file_check_directory($directory, 1)){
			//drupal_set_message(t('The directory %directory has been created.', array('%directory' => $destination)));
		}

		if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
	//	if (copy($file->filepath, $destination)) {
				$form_state['values']['picture'] = $file->filepath;
				//drupal_set_message('file copied from '.$file->filepath.' to '.$destination);

    		}
    		else {
						drupal_set_message('Error - Couldnt copy file from '.$file.' to '.$destination, 'error');
						form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", 
                        array('%directory' => variable_get('product_picture_path', 'product_pictures'))));
    		}

	}
}

function stylist_case_study1_after_picture_form_submit(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$image_path		= $form_values['picture'];
	$fid			= $form_values['fid'];
	$nid			= $form_values['nid'];
	
	db_query("UPDATE files set filepath='%s',status=1 where fid=%d",$image_path,$fid);
	
	if($nid != null){
		db_query("UPDATE content_type_stylist_application set field_case_study_after1_fid='%d' where nid=%d",$fid,$nid);
	}
	else {
		db_query("INSERT INTO content_type_stylist_application(vid,nid,field_case_study_after1_fid) VALUES(%d,%d,%d)",$nid,$nid, $fid);
	}
}

function stylist_picture_form($form_state,$user_data, $uid){

	/*$query 		= 	"SELECT f.filepath as filePath, f.fid as fileId FROM content_type_stylist_application cfsa
					LEFT JOIN node n on n.nid=cfsa.nid
					LEFT JOIN files f on f.fid=cfsa.field_headshot_fid
					WHERE n.uid=%d";*/
	
	
	$query 		= 	"SELECT f.filepath AS filePath,f.fid AS fileId, an.nid AS nodeId,
					concat(ctp.field_first_name_value,'_',ctp.field_last_name_value) AS stylistName,
					ctp.field_state_value AS state FROM users u
					JOIN node pn ON pn.uid=u.uid AND pn.type='profile'
					JOIN content_type_profile ctp ON ctp.nid=pn.nid
					LEFT JOIN node an ON an.uid=u.uid AND an.type='stylist_application'
					LEFT JOIN content_type_stylist_application ctsp ON ctsp.nid=an.nid
					LEFT JOIN files f on f.fid=ctsp.field_headshot_fid 
					where u.uid=%d";
	$rs 		=	db_query($query, $uid);
	//drupal_set_message('<pre>user id is '. print_r($user_data, TRUE) .'</pre>');
	while ($row = db_fetch_array($rs)){
		$file_path  	= $row['filePath'];
		$file_id 		= $row['fileId'];
		$node_num		= $row['nodeId'];
		$stylistName 	= $row['stylistName'];
		$state 			= $row['state'];
		if($state == null){ $state = 'NODATA';}
		if($stylistName == null) { $stylistName == 'NODATA';}
	}
		$form['picture'] = array('#type' => 'fieldset', '#title' => t('Headshot'));
			if($file_path != FALSE){
				//drupal_set_message('<pre>'. print_r($file_path, TRUE) .'</pre>');
				$picture = theme(
								'imagecache',
								'stylist_profile',
								$file_path
							);
				//$form['stylist_picture_file_path'] = $file_path;
				$form['picture']['current_picture'] = array('#value' => $picture);
			/*	$form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), 
					'#description' => t('Check this box to delete your current picture.'));
			*/
			}
			else {
				$form['picture']['picture_delete'] = array('#type' => 'hidden');
			}

    $form['picture']['picture_upload'] = 
					array(	'#type' => 'file', 
							'#title' => t('Upload Image'),
							'#size' => 48, 
							'#description' => t('Requirements: Color photo, forward facing from waist up or chest up; high-resolution, 500KB-5MB; portrait format (taller than wide).'),
							);
 
    $form['#validate'][] = 'stylist_picture_validate';
	$form['fid'] = array(
					'#type'  => 'hidden',
					'#value' => $file_id,
				);
	$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);
	//if($file_id == null) $newfile = 1;
	if($node_num > 0) $newfile = 0;
	else $newfile = 1;
	$form['newfile'] = array(
								'#type'  => 'hidden',
								'#value' => $newfile,
							);
							
	$form['nid'] = array(
								'#type'  => 'hidden',
								'#value' => $node_num,
							);
	
	$form['sub-directory'] = array(
					'#type'  => 'hidden',
					'#value' => 'sites/default/files/stylists/'.$state.'/'.$stylistName,
				);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Upload'),
	);
 
	/*$form['#redirect'] = 'product_list'; */
	$form['#attributes']['enctype'] = 'multipart/form-data';
 
	return $form;
}
function stylist_picture_validate(&$form, &$form_state){
	
	$form_values	= $form_state['values'];
	$destination	= $form_values['sub-directory'];
	$nid			= $form_values['nid'];
	$uid			= $form_values['uid'];
	//drupal_set_message('<pre> fid in validate is '. print_r($form_values['fid'], TRUE) .'</pre>');
	if(stripos($destination, 'NODATA') !== false){ //The stripos function works a little strange. it returns false and 0. Have to use === operator. look at the documentation.
		form_set_error('picture_upload', t("Failed to upload the picture. Please fill out all the fields including your name and address in the personal information section prior to uploading your picture."));
		return;
	}
	
	$validators = array(
    		'file_validate_is_image' => array(),
	    	'file_validate_image_resolution' => array('700x1000'),
    		'file_validate_size' => array(1*1024*1024),
  	);
	if($file = file_save_upload('picture_upload', $validators)){
		//drupal_set_message('<pre>'. print_r($form_state['values'], TRUE) .'</pre>');
		if($form_values['fid'] == null){ $form_state['values']['fid'] = $file->fid;}

		$info = image_get_info($file->filepath);
		if($info['width']>1500){
			form_set_error('picture_upload', t("Failed to upload the picture. Please reduce the size of the file before uploading."));
			return;
		}
		if($info['width']>$info['height']){
			form_set_error('picture_upload', t("Failed to upload the picture. Please upload your picture in the portrait format."));
			return;
		}
		if($info['width']<260){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The width of the image is less than 260"));
			return;
		}
		if($info['height']<380){
			form_set_error('picture_upload', t("Failed to upload the picture. The picture is too small. The height of the image is less than 380."));
			return;
		}
		if(!is_dir($destination) &&  @mkdir($destination,0775,TRUE)) {
		//if(!file_check_directory($directory, 1)){
			//drupal_set_message(t('The directory %directory has been created.', array('%directory' => $destination)));
		}

		if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
	//	if (copy($file->filepath, $destination)) {
				$form_state['values']['picture'] = $file->filepath;
				//drupal_set_message('file copied from '.$file->filepath.' to '.$destination);
				if($nid != null){

				}

    		}
    		else {
				//drupal_set_message('couldnt copy file from '.$file.' to '.$destination);
      			form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", 
                        array('%directory' => variable_get('product_picture_path', 'product_pictures'))));
    		}

	}
	
}
function stylist_picture_form_submit(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$image_path		= $form_values['picture'];
	$fid			= $form_values['fid'];
	$nid			= $form_values['nid'];
	$uid 			= $form_values['uid'];
	$newfile		= $form_values['newfile'];
	styleforhire_debug($nid, "node id in stylist_picture_form_submit is");
	styleforhire_debug($fid, "file id in stylist_picture_form_submit is");
	styleforhire_debug($uid, "user id in stylist_picture_form_submit is");
	styleforhire_debug($newfile, "newfile in stylist_picture_form_submit is");
	db_query("UPDATE files set filepath='%s',status=1 where fid=%d",$image_path,$fid);//Subu - BUG - @Title: Susan Ford bug @date: 9/26/11 - the pictures got deleted automatically. Apparantly, file_save_upload - sets the status flag=0 (FILE_STATUS_TEMPORARY). Drupal's file garbage collector deletes the  ones that are set to FILE_STATUS_TEMPORARY(0). I had to update this flag to 1 for permanent storage.
	//var_dump($nid);
	//var_dump($fid);
	if(0 == (int)$newfile){
		db_query("UPDATE content_type_stylist_application set field_headshot_fid=%d where nid=%d",(int)$fid,(int)$nid);
		/*$stylist_application_node = noad_load($nid); - Subu - giving me fatal error problem
		$stylist_application_node->field_headshot[0]['fid'] = $fid;
		node_save($stylist_application_node);*/
		
	}
	else{
		//db_query("INSERT INTO content_type_stylist_application(vid,nid,field_headshot_fid) VALUES(%d,%d,%d)",$nid,$nid, $fid);
		$stylist_application_node = new stdClass();
		$stylist_application_node->type = "stylist_application";
		$stylist_application_node->language = "en";
		$stylist_application_node->title = "Application[uid: ".$uid."]";
		$stylist_application_node->uid = $uid;
		$stylist_application_node->field_headshot[0]['fid'] = $fid;
		node_save($stylist_application_node);
	}
	
}

function stylist_rate_and_preferences_form($form_state,$user_data, $uid){
//drupal_set_message('<pre>'. print_r($user_data, TRUE) .'</pre>');
/* to extract the areas of expertise - this returns more than 1 row unlike the previous query - start*/
	$result = db_query('select field_areas_of_expertise_value  
						from content_field_areas_of_expertise cfae  
						join node n on n.nid=cfae.nid and n.type="stylists_file" 
						where n.uid=%d',$uid);
	
	// fetch database results in an array
	$blah = array();
	while ($row = db_fetch_array($result)){
		if($row['field_areas_of_expertise_value'] != null){
		//drupal_set_message('<pre>ofcourse'. print_r($row['field_areas_of_expertise_value'], TRUE) .'</pre>');
		$blah[] = $row['field_areas_of_expertise_value'];
		}
	}
	
	//drupal_set_message('<pre>blah'. print_r($blah, TRUE) .'</pre>');
	$result1 = db_query('select field_speciality_value from content_field_speciality cfs
						join node n on n.nid=cfs.nid and n.type="stylists_file"
						where n.uid=%d',$uid);
	// fetch database results in an array
	$glah = array();
	while ($row = db_fetch_array($result1)){
		if($row['field_speciality_value'] != null){
		//drupal_set_message('<pre>ofcourse'. print_r($row['field_speciality_value'], TRUE) .'</pre>');
		$glah[] = $row['field_speciality_value'];
		}
	}
	
	$result1 = db_query('select field_speciality_value from content_field_speciality cfs
						join node n on n.nid=cfs.nid and n.type="stylists_file"
						where n.uid=%d',$uid);
	// fetch database results in an array
	$glah = array();
	while ($row = db_fetch_array($result1)){
		if($row['field_speciality_value'] != null){
		//drupal_set_message('<pre>ofcourse'. print_r($row['field_speciality_value'], TRUE) .'</pre>');
		$glah[] = $row['field_speciality_value'];
		}
	}
	
	$result2 = db_query('select sum((field_apt_date_value2-field_apt_date_value)/(60*60)) as hrs 
				from content_type_appointment where field_apt_stylist_uid=%d',$uid);
	$num_hrs = db_fetch_object($result2);
	//drupal_set_message('<pre>glah'. print_r($glah, TRUE) .'</pre>');
	/* to extract the areas of expertise - this returns more than 1 row unlike the previous query - end*/
	
	
			$form['fav'] = array(
							'#title' => t('Favorite way to shop'),
							'#type' => 'fieldset'
						);
			$form['fav']['my_preference'] = array(
				  '#type' => 'checkboxes',
				 /* '#title' => t('My favorite way to shop'),*/
				  /*'#default_value' => variable_get('node_options_'. $node->type, array('status', 'promote')),*/
				  '#options' => array(
					'Budget' => t('Budget'),
					'Luxury' => t('Luxury'),
					'High-Low' => t('High-Low'),
				  ),
				  '#default_value' => $glah,
				  '#description' => t('You are allowed to choose more than one. But, it is preferred that you choose one.'),
			);			
			$form['pro_exp'] = array(
							'#title' => t('Hours of Professional Experience - Paid '),
							'#type' => 'fieldset'
						);
			if($num_hrs->hrs > 5){
				$my_hrs_prof_exp_desc = '';//t('You have completed '.ceil($num_hrs->hrs).' hours with Style for Hire.');
			}
			$form['pro_exp']['my_hours_of_professional_experience'] = array(
				  '#type' => 'radios',
				  //'#title' => t('(Please be honest!)'),
				  /*'#default_value' => variable_get('node_options_'. $node->type, array('status', 'promote')),*/
				  '#options' => array(
					'0' => t('Zero: Just starting out'),
					'20' => t('Related experience: I have paid experience in a related field (costume design, retail sales, tailoring, personal shopping, etc.)'),
					'100' => t('Up to 100 hours: Less than one year of experience'),
					'500' => t('101 - 500 hours: One year of full-time or a few years of part-time experience'),
					'1000' => t('501 - 1000 hours: Two years of full-time or four to five years of part-time experience'),
					'5000' => t('1000 - 5000 hours: Two to ten years of full-time, or five to fifteen years part-time experience'),
					'10000' => t('Over 5000: Over ten years of full-time or over fifteen years of part-time experience'),
				  ),
				  '#default_value' => $user_data->hrs_exp_value,
				  '#description' => t('Key: 500 hours = Stylist working professionally with an average of three 3-hour appointments per week over a year.'),
			);
			$form['exp'] = array(
							'#title' => t('Areas of Expertise'),
							'#type' => 'fieldset'
						);
			$form['exp']['my_areas_of_expertise'] = array(
				  '#type' => 'checkboxes',
				  /*'#title' => t('My Areas of Expertise'),*/
				  /*'#default_value' => variable_get('node_options_'. $node->type, array('status', 'promote')),*/
				  '#options' => array(
					'Children/Teen' => t('Children/Teen'),
					'Eco Styling' => t('Eco Styling'),
					'Gala/Formal' => t('Gala/Formal'),
					'Gift Buying' => t('Gift Buying'),
					'Groups' => t('Groups'),
					'Maternity/ Post Natal' => t('Maternity/ Post Natal'),
					'Men' => t('Men'),
					'Professional' => t('Professional'),
					'Plus Size' => t('Plus Size'),
					'Petite' => t('Petite'),
					'Vacation Packing' => t('Vacation Packing'),
					'Weight Gain/Loss' => t('Weight Gain/Loss'),
					'Disability/Rehabilitation Fashion Styling' => t('Disability/Rehabilitation Fashion Styling'),
				  ),
				  '#default_value' => $blah,
				  '#description' => t('Choose up to 5 that will differentiate you from other stylists.  Stylists with specialties tend to get the most clients.'),
			);
			$form['price'] = array(
							'#title' => t('Hourly Rate (in Dollars)'),
							'#type' => 'textfield',
							'#size' => 4,
							'#default_value' => $user_data->hourly_rate,
						);
			$form['distance'] = array(
							'#title' => t('Distance I am willing to travel (in miles)'),
							'#type' => 'textfield',
							'#size' => 4,
							'#default_value' => $user_data->stylist_travel_distance,
						);
						
			$form['areas_exp'] = array(
					'#type'  => 'hidden',
				);
			$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);

			$form['submit'] = array(
					'#type' => 'submit',
					'#value' => t('Save'),
				);

	return $form;					
}

function stylist_rate_and_preferences_form_submit(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$uid = $form_state['values']['uid'];
	
	//$my_preference = $form_values['my_preference'];
	//$hrs_experience = $form_values['my_hours_of_professional_experience'];
	
	//drupal_set_message('<pre>'. print_r($form_state['values'], TRUE) .'</pre>');
	//drupal_set_message('<pre>pokeepsie'. print_r($form_state['values']['my_areas_of_expertise'], TRUE) .'</pre>');

	
	$result1 = db_query('SELECT nid FROM node WHERE type="stylists_file" AND uid=%d',$uid);
	$result3 = db_query('SELECT nid FROM node WHERE type="stylist_application" AND uid=%d',$uid);
	

	//drupal_set_message('<pre>res1 '.print_r($nid1, TRUE).'</pre>');
	//drupal_set_message('<pre>res2 '.print_r($nid2, TRUE).'</pre>');
	//drupal_set_message('<pre>res3 '.print_r($nid3, TRUE).'</pre>');
	if(!empty($result1)){
		$nid1 = db_result($result1);
		$node = node_load($nid1);
		
		unset($node->field_speciality);
		//drupal_set_message('<pre>blah'. print_r($node->field_areas_of_expertise, TRUE) .'</pre>');
		unset($node->field_areas_of_expertise);
		unset($node->field_travel_distance);
		$node->field_travel_distance[0]= array('value' => (int)$form_state['values']['distance']);
		$i = 0;
		foreach($form_state['values']['my_areas_of_expertise']as $key=>$value){
		
			if(strcmp($value,'0')!=0){
				//drupal_set_message("<pre><li> value is not 0 ".$value."<br/></li></pre>");
				$node->field_areas_of_expertise[$i++]= array('value' => $value);
				//$node->field_areas_of_expertise[$i++]= $value;
			}
		}
		$i = 0;
		foreach($form_state['values']['my_preference'] as $key=>$value){
			if(strcmp($value,'0')!=0){
					$node->field_speciality[$i++]= array('value' => $value);
					//$node->field_speciality[0]= $value;
				}
		}
		
		//drupal_set_message("<pre><li>glah".print_r($node->field_areas_of_expertise, TRUE)."</li></pre>");
		//$node->field_areas_of_expertise[0]["value"]=array("value" => "Children/Teen");
											
		//drupal_set_message('<pre>'. $result2.' '.print_r($node, TRUE) .'</pre>');
		node_save($node);
		}

	if(!empty($result3)){
		$nid3 = db_result($result3);
		$node = node_load($nid3);
		//drupal_set_message('<pre>blah2'. print_r($node, TRUE) .'</pre>');
		$node->field_hours_of_experience_1[0] = array('value' => (int)$form_state['values']['my_hours_of_professional_experience']);
		//drupal_set_message('<pre>$form_stateprice'. print_r($form_state['values']['price'], TRUE) .'</pre>');
		$node->field_hourly_rate_1[0]= array('value' => (int)$form_state['values']['price']);
		node_save($node);
		}
	//drupal_add_js(array('tab1' => '1','tab2'=>'2'),'setting');
	
	

}
function stylist_case_study1_form($form_state,$user_data, $uid){
					if(	$user_data->case_study1_value == null ||
						$user_data->case_study1_value == ''){ 
						 $user_data->case_study1_value = 'S.L. is a 40 something professional in the finance sector who felt that her work wardrobe was drastically out of date.  Using an amazing tailor, we were able to modernize most of her staple blazers and trousers, which allowed us to spend more on chic new tops, shoes and accessories to up her style-ante.';
						}

						$form['profile']['casestudy1'] = array(
							'#type' => 'textarea',
							'#title' => t('Case Study 1'),
							'#default_value' => $user_data->case_study1_value,
							'#required' => FALSE
						);
						
						$form['uid'] = array(
							'#type'  => 'hidden',
							'#value' => $uid,
							);
						$form['submit'] = array(
						'#type' => 'submit',
						'#value' => t('Save'),
						);
						
	return $form;					


}

function stylist_case_study1_form_submit($form, &$form_state) {
	$uid = $form_state['values']['uid'];
	$casestudy1 = $form_state['values']['casestudy1'];
	if($casestudy1 === 'S.L. is a 40 something professional in the finance sector who felt that her work wardrobe was drastically out of date.  Using an amazing tailor, we were able to modernize most of her staple blazers and trousers, which allowed us to spend more on chic new tops, shoes and accessories to up her style-ante.')
	{
		$casestudy1= null;
	}
	//drupal_set_message('<pre>'. print_r($form_state['values'], TRUE) .'</pre>');
	
	$result = db_query('SELECT nid FROM node WHERE type="stylist_application" AND uid=%d',$uid);

	$nid = db_result($result);
	
	if(!empty($nid)){
		$node = node_load($nid);
		$node->field_case_study1[0]['value'] = $casestudy1;
		node_save($node);
		/*	db_query("UPDATE  {content_type_stylist_application} 
					SET field_case_study1_value='%s'
					WHERE nid=%d", 
					$casestudy1,$nid);*/
		}
	else{
		drupal_set_message('<pre>uid is '.$uid.'</pre>');
		$node->type = "stylist_application";
		$node->uid = $uid;
		$node->status = 1;
		$node->field_case_study1[0]['value'] = $casestudy1;
		node_save($node);
		
	}
}

function stylist_testimonials_form($form_state,$user_data, $uid){
if(	$user_data->testimonial1 == null ||
	$user_data->testimonial1 == ''){
		$user_data->testimonial1 = 'Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.';
	}
if(	$user_data->testimonial2 == null ||
	$user_data->testimonial2 == ''){
		$user_data->testimonial2 = 'Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.';
	}
if(	$user_data->testimonial3 == null ||
	$user_data->testimonial3 == ''){
		$user_data->testimonial3 = 'Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.';
	}
if(	$user_data->testimonial_name1 == null ||
	$user_data->testimonial_name1 == ''){
		$user_data->testimonial_name1 = 'Enter initials here with periods, ex. S.L.';
	}
if(	$user_data->testimonial_name2 == null ||
	$user_data->testimonial_name2 == ''){
		$user_data->testimonial_name2 = 'Enter initials here with periods, ex. S.L.';
	}
if(	$user_data->testimonial_name3 == null ||
	$user_data->testimonial_name3 == ''){
		$user_data->testimonial_name3 = 'Enter initials here with periods, ex. S.L.';
	}

						$form['profile'] = array(
							'#title' => t('Testimonials'),
							'#type' => 'fieldset'
						);
						$form['profile']['testimonial1'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 1'),
							'#default_value' => $user_data->testimonial1,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name1'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#size' => 40,
							'#default_value' => $user_data->testimonial_name1,
							'#required' => FALSE
						);
						$form['profile']['testimonial2'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 2'),
							'#default_value' => $user_data->testimonial2,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name2'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#size' => 40,
							'#default_value' => $user_data->testimonial_name2,
							'#required' => FALSE
						);
						$form['profile']['testimonial3'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 3'),
							'#default_value' => $user_data->testimonial3,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name3'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#size' => 40,
							'#default_value' => $user_data->testimonial_name3,
							'#required' => FALSE
						);
						$form['uid'] = array(
							'#type'  => 'hidden',
							'#value' => $uid,
							);
						$form['submit'] = array(
						'#type' => 'submit',
						'#value' => t('Save'),
						);
												
	return $form;					

}
function stylist_testimonials_form_submit($form, &$form_state) {
	$uid = $form_state['values']['uid'];
	$testimonial1 = ($form_state['values']['testimonial1']=='Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.'?null:$form_state['values']['testimonial1']);
	$testimonial2 = ($form_state['values']['testimonial2']=='Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.'?null:$form_state['values']['testimonial2']);
	$testimonial3 = ($form_state['values']['testimonial3']=='Ex. Sally was amazing!  She helped me clean out my closet (and even convinced me to get rid of my too-small high school jeans), and we were able to make a bunch of outfits out of what was left.  She even found me the PERFECT reunion dress.'?null:$form_state['values']['testimonial3']);
	$testimonial_name1 = $form_state['values']['testimonial_name1']=='Enter initials here with periods, ex. S.L.'?null:$form_state['values']['testimonial_name1'];
	$testimonial_name2 = $form_state['values']['testimonial_name2']=='Enter initials here with periods, ex. S.L.'?null:$form_state['values']['testimonial_name2'];
	$testimonial_name3 = $form_state['values']['testimonial_name3']=='Enter initials here with periods, ex. S.L.'?null:$form_state['values']['testimonial_name3'];
	
	
	
	$result = db_query('SELECT n.nid FROM node n
    JOIN content_type_stylist_application ctsa ON ctsa.nid=n.nid
    WHERE n.type="stylist_application" AND n.uid=%d',$uid);

	$nid = db_result($result);
	
	if(!empty($nid)){
			db_query("UPDATE  {content_type_stylist_application} 
					SET 
					field_testimonial1_value='%s',
					field_testimonial_name1_value='%s',
					field_testimonial2_value='%s',
					field_testimonial_name2_value='%s',
					field_testimonial3_value='%s',
					field_testimonial_name3_value='%s' 
					WHERE nid=%d", 
			$testimonial1, $testimonial_name1, $testimonial2, $testimonial_name2, $testimonial3, $testimonial_name3,$nid);
		}
	else{
			$result = db_query('SELECT nid FROM node WHERE type="stylist_application" AND uid=%d', $uid);
			$nid = db_result($result);
			db_query("	INSERT into {content_type_stylist_application} 
						(nid, vid, 
						field_testimonial1_value,
						field_testimonial_name1_value,
						field_testimonial2_value,
						field_testimonial_name2_value,
						field_testimonial3_value,
						field_testimonial_name3_value) 
						values (%d,%d,'%s','%s','%s','%s','%s','%s')",
						$nid,$nid,
						$testimonial1, $testimonial_name1, $testimonial2, $testimonial_name2, $testimonial3,
						$testimonial_name3);
	}
}

function stylist_profile_form($form_state,$user_data, $uid){

						if($user_data->affiliations == null ||
							$user_data->affiliations == ''){ 
							$user_data->affiliations = $aff = "Relevant trade or professional organization memberships and volunteer experience. Ex. NAPO, Girl Scout Troop Leader, AICI, Junior League DC, on the board of local Dress for Success, PTA.";
						}
						if($user_data->introduction == null ||
							$user_data->introduction == ''){ 
							$user_data->introduction = $intr = "Ex. I am a down-to-earth mother of two with an eye for high style and a nose for bargains.  My mother owned a small boutique so you could even say I was born into fashion!  I love mixing and matching brands and prices to create amazing outfits for women who are looking to update their work and casual looks.";
						}
						if($user_data->experience == null ||
							$user_data->experience == ''){ 
							$user_data->experience = $exp = "Ex.  I have had my own styling business for 5 years, prior to that I worked at Nordstrom as a personal shopper for 3 years.  I have moonlighted as a tailor and used to be a buyer at Ralph Lauren.";
						}
						if($user_data->education == null ||
							$user_data->education == ''){ 
							$user_data->education = $edu = "Ex.  I have a BA in Fashion Merchandising from X College, attended AICIs 2009 Workshop, apprenticed with a professional stylist for 2 years, interned at Glamour in 2003.";
						}
						if($user_data->things_i_love == null||
							$user_data->things_i_love == ''){ 
							$user_data->things_i_love = $love = "Let your personality shine here. We want to know about your aesthetic but also about you: Ex. Ballroom dancing, favorite movie is Moonstruck, 1960 Harper Bazaar, Vintage DVF wrap dresses, cats over dogs, my Hermes cuff with my tailored H&M dress.  I love taking my kids to the park on Saturday afternoons and movies with my best friend from high school.";
						}
						
						
						$form['profile'] = array(
							'#title' => t('Profile'),
							'#type' => 'fieldset'
						);
						$form['profile']['introduction'] = array(
							'#type' => 'textarea',
							'#title' => t('Introduction'),
							'#default_value' => $user_data->introduction,
							'#required' => FALSE
						);
						$form['introduction_default'] = array(
							'#type'  => 'hidden',
							'#value' => $intr,
							);
						$form['profile']['education'] = array(
							'#type' => 'textarea',
							'#title' => t('Education & Training'),
							'#default_value' => $user_data->education,
							'#required' => FALSE
						);
						$form['education_default'] = array(
							'#type'  => 'hidden',
							'#value' => $edu,
							);
						$form['profile']['affiliations'] = array(
							'#type' => 'textarea',
							'#title' => t('Affiliations'),
							'#default_value' => $user_data->affiliations,
							'#required' => FALSE
						);
						$form['affiliations_default'] = array(
							'#type'  => 'hidden',
							'#value' => $aff,
							);
						$form['profile']['experience'] = array(
							'#type' => 'textarea',
							'#title' => t('Relevant Experience'),
							'#default_value' => $user_data->experience,
							'#required' => FALSE
						);
						$form['experience_default'] = array(
							'#type'  => 'hidden',
							'#value' => $exp,
							);
						$form['profile']['things_i_love'] = array(
							'#type' => 'textarea',
							'#title' => t('Things I Love'),
							'#default_value' => $user_data->things_i_love,
							'#required' => FALSE
						);
						$form['things_i_love_default'] = array(
							'#type'  => 'hidden',
							'#value' => $love,
							);
	/*					$form['profile']['testimonial1'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 1'),
							'#default_value' => $user_data->testimonial1,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name1'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#default_value' => $user_data->testimonial_name1,
							'#required' => FALSE
						);
						$form['profile']['testimonial2'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 2'),
							'#default_value' => $user_data->testimonial2,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name2'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#default_value' => $user_data->testimonial_name2,
							'#required' => FALSE
						);
						$form['profile']['testimonial3'] = array(
							'#type' => 'textarea',
							'#title' => t('Testimonial 3'),
							'#default_value' => $user_data->testimonial3,
							'#required' => FALSE
						);
						$form['profile']['testimonial_name3'] = array(
							'#type' => 'textfield',
							'#title' => t('Testimonial Provided By'),
							'#default_value' => $user_data->testimonial_name3,
							'#required' => FALSE
						);
*/						$form['uid'] = array(
							'#type'  => 'hidden',
							'#value' => $uid,
							);
						$form['submit'] = array(
						'#type' => 'submit',
						'#value' => t('Save'),
						);
						
	return $form;					
}

function stylist_profile_form_submit($form, &$form_state) {
	$uid = $form_state['values']['uid'];
	$introduction = $form_state['values']['introduction']=="Ex. I am a down-to-earth mother of two with an eye for high style and a nose for bargains.  My mother owned a small boutique so you could even say I was born into fashion!  I love mixing and matching brands and prices to create amazing outfits for women who are looking to update their work and casual looks."?null:$form_state['values']['introduction'];
	$education = $form_state['values']['education']=="Ex.  I have a BA in Fashion Merchandising from X College, attended AICIs 2009 Workshop, apprenticed with a professional stylist for 2 years, interned at Glamour in 2003."?null:$form_state['values']['education'];
	
	$affiliations = $form_state['values']['affiliations']=="Relevant trade or professional organization memberships and volunteer experience. Ex. NAPO, Girl Scout Troop Leader, AICI, Junior League DC, on the board of local Dress for Success, PTA."?null:$form_state['values']['affiliations'];
	$experience = $form_state['values']['experience']=="Ex.  I have had my own styling business for 5 years, prior to that I worked at Nordstrom as a personal shopper for 3 years.  I have moonlighted as a tailor and used to be a buyer at Ralph Lauren."?null:$form_state['values']['experience'];
	$things_i_love = $form_state['values']['things_i_love']=="Let your personality shine here. We want to know about your aesthetic but also about you: Ex. Ballroom dancing, favorite movie is Moonstruck, 1960 Harper Bazaar, Vintage DVF wrap dresses, cats over dogs, my Hermes cuff with my tailored H&M dress.  I love taking my kids to the park on Saturday afternoons and movies with my best friend from high school."?null:$form_state['values']['things_i_love'];
/*	$testimonial1 = $form_state['values']['testimonial1'];
	$testimonial2 = $form_state['values']['testimonial2'];
	$testimonial3 = $form_state['values']['testimonial3'];
	$testimonial_name1 = $form_state['values']['testimonial_name1'];
	$testimonial_name2 = $form_state['values']['testimonial_name2'];
	$testimonial_name3 = $form_state['values']['testimonial_name3'];
*/	
	$result = db_query('SELECT n.nid FROM node n
    JOIN content_type_stylist_application ctsa ON ctsa.nid=n.nid
    WHERE n.type="stylist_application" AND n.uid=%d',$uid);

	$nid = db_result($result);
	
	if(!empty($nid)){
			db_query("UPDATE  {content_type_stylist_application} 
					SET field_intro_statement_value='%s', 
					field_education_training_value='%s',
					field_affiliations_value='%s', 
					field_experience_value='%s',
					field_things_i_love_value='%s' 
					WHERE nid=%d", 
			$introduction, $education, $affiliations, $experience, $things_i_love,
			$nid);
		}
	else{
			$result = db_query('SELECT nid FROM node WHERE type="stylist_application" AND uid=%d', $uid);
			$nid = db_result($result);
			db_query("	INSERT into {content_type_stylist_application} 
						(nid, vid, field_intro_statement_value, 
						field_education_training_value,
						field_affiliations_value, 
						field_experience_value,
						field_things_i_love_value) 
						values (%d,%d,'%s','%s','%s','%s','%s')",
						$nid,$nid,$introduction, $education, $affiliations, $experience, $things_i_love);
	}
}

function stylist_basic_personal_form($form_state,$user_data, $uid){
						/*$form['address'] = array(
							'#title' => t('Personal Information'),
							'#type' => 'fieldset'
						);*/
						$form['address']['firstname'] = array(
						/*	'#title' => t('First Name'),*/
							'#type' => 'textfield',
							'#description' => '',
							'#size' => 20,
							'#required' => true,
							'#default_value' => $user_data->first_name,
						);
						$form['address']['lastname'] = array(
						/*	'#title' => t('Last Name'),*/
							'#type' => 'textfield',
							'#description' => '',
							'#size' => 20,
							'#required' => true,
							'#default_value' => $user_data->last_name,
						);
						$form['address']['address1'] = array(
							/*'#title' => t('Address1'),*/
							'#type' => 'textfield',
							'#description' => '',
							'#size' => 40,
							'#required' => true,
							'#default_value' => $user_data->address1,
						);
			
						$form['address']['address2'] = array(
							/*'#title' => t('Address2'),*/
							'#type' => 'textfield',
							'#size' => 40,
							'#default_value' => $user_data->address2,
						);
			
						$form['address']['city'] = array(
							/*'#title' => t('City'),*/
							'#type' => 'textfield',
							'#size' => 20,
							'#required' => true,
							'#default_value' => $user_data->city,
							);
			
						$form['address']['state'] = array(
							/*'#title' => t('State/Province'),*/
							'#type' => 'select',
							'#options' => styleforhire_states(),/* subu changed from styleforhire_states() to accomodate the state bug when existing address are selected in the billing page */
							'#max_length' => 2,
							'#required' => true,
							'#default_value' => $user_data->state,
							);
			
						$form['address']['zip'] = array(
							/*'#title' => t('Zip'),*/
							'#type' => 'textfield',
							'#size' => 5,
							'#max_length' => 5,
							'#required' => true,
							'#default_value' => $user_data->zip,
							);
						$form['address']['personal_email'] = array(
							/*'#title' => t('Personal Email'),*/
							'#type' => 'textfield',
							'#size' => 30,
							'#max_length' => 30,
							'#required' => true,
							'#default_value' => $user_data->email,
							);
						$form['address']['date_of_birth'] = array(
							/*'#title' => t('Date of Birth'),*/
							'#type' => 'date',
							'#required' => true,
							'#default_value' => unserialize($user_data->birthday),
							);
						$form['address']['phone'] = array(
							/*'#title' => t('Phone'),*/
							'#type' => 'textfield',
							'#size' => 20,
							'#max_length' => 20,
							'#required' => true,
							'#default_value' => $user_data->phone,
							);
						$form['uid'] = array(
							'#type'  => 'hidden',
							'#value' => $uid,
							);
						$form[] = array(
							'#type' => 'submit',
							'#value' => 'Save'
							);
							
  
						//$form['#submit'][] = 'stylist_basic_personal_form_submit';
		return $form;
}
function theme_stylist_basic_personal_form($form) {
	//$output = drupal_render($form['address']);
	$output = 	'<fieldset>';
	$output .= 	'<legend> Personal Information </legend>';
	$output .= 	'<table>'.
					'<tr>'.
						'<td valign="top">'.
							'First Name <span style="color: #f00;">*</span>'.
						'</td>'.
						'<td valign="top">'.
							'Last Name <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top">'.
							drupal_render($form['address']['firstname']).
						'</td>'.
						'<td valign="top">'.
							drupal_render($form['address']['lastname']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top">'.
							'Address <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top" colspan="3">'.
							drupal_render($form['address']['address1']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top">'.
							'Address'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top" colspan="3">'.
							drupal_render($form['address']['address2']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							'City <span style="color: #f00;">*</span>'.
						'</td>'.
						'<td>'.
							'State <span style="color: #f00;">*</span>'.
						'</td>'.
						'<td>'.
							'Zip <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							drupal_render($form['address']['city']).
						'</td>'.
						'<td>'.
							drupal_render($form['address']['state']).
						'</td>'.
						'<td>'.
							drupal_render($form['address']['zip']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							'Personal Email <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td valign="top" colspan="3">'.
							drupal_render($form['address']['personal_email']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							'Date of Birth <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							drupal_render($form['address']['date_of_birth']).
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							'Phone number <span style="color: #f00;">*</span>'.
						'</td>'.
					'</tr>'.
					'<tr>'.
						'<td>'.
							drupal_render($form['address']['phone']).
						'</td>'.
					'</tr>'.
				'</table>';	
	$output .= drupal_render($form);
	$output .= '</fieldset>';
	return $output;
}

function stylist_basic_personal_form_submit($form, &$form_state) {
	$uid = $form_state['values']['uid'];
	$firstname = $form_state['values']['firstname'];
	$lastname = $form_state['values']['lastname'];
	$address1 = $form_state['values']['address1'];
	$address2 = $form_state['values']['address2'];
	$city = $form_state['values']['city'];
	$state = $form_state['values']['state'];
	$zip = $form_state['values']['zip'];
	$email = $form_state['values']['personal_email'];
	$dob = $form_state['values']['date_of_birth'];
	$phone = $form_state['values']['phone'];
	//drupal_set_message('<pre>'. print_r($form_state['values'], TRUE) .'</pre>');
	
	$result = db_query('SELECT nid FROM node WHERE type="profile" AND uid=%d',$uid);

	$nid = db_result($result);

	$data = styleforhire_get_geocode(
		$address1, 
		$city,
		$state,
		$zip
	);
	//var_dump($data);
	if(!empty($nid)){
		db_query("UPDATE  {content_type_profile} 
				SET field_first_name_value='%s', 
					field_last_name_value='%s', 
					field_address1_value='%s', 
					field_address2_value='%s',
					field_city_value='%s', 
					field_state_value='%s',
					field_zip_value='%s',
					field_personal_email_value='%s',
					field_phone_num_value='%s',
					field_latitude_value='%s',
					field_longitude_value='%s' 
					WHERE nid='%s'", 
			$firstname,$lastname,$address1, $address2, $city, $state, $zip, $email, $phone, $data[2], $data[3], $nid);
		}
	$result = db_query('select 1 from profile_values where uid=%d',$uid);
	$val = db_result($result);

	if(empty($val)){
		db_query("insert into profile_values (uid,value) values(%d,'%s')",$uid,serialize($dob));
	}
	else{
		db_query("update profile_values set value='%s' where uid=%d",serialize($dob),$uid);
	}
}
function styleforhire_customer_service_dashboard($user) {
$output = "	<br><br><br>
			<div><a href=\"/book_custom_appointment\">Book Custom Appointments</a>
			<a href=\"/appointment_manage\">Manage Appointments</a></div>";
return $output;
}
function styleforhire_corp_dashboard($user) {

	$uid = $user->uid;

	$result = db_query('

		SELECT u.uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_address1_value AS address1,
			ctp.field_address2_value AS address2,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			ctp.field_zip_value AS zip,
			ctp.field_birthday_value AS birthday,
			ctcp.field_your_style_value AS style

		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		/* corporate prefs */
		LEFT JOIN node cn ON cn.uid=u.uid AND cn.type="preferences"
		LEFT JOIN content_type_preferences ctcp ON ctcp.nid=cn.nid
		/*LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid*/

		WHERE u.uid=%d

		GROUP BY u.uid

	
	', $uid
	);

	$rows = array();
	$user_data = db_fetch_object($result);

	//var_dump($user_data);

	$output = "
		<div class=\"widget-left\">
		
			<div class='user group'>
				<div class='outer'>
					<div class='inner'>
						<h2>User Accounts</h2>
						".l("Create Account", 'admin/user/user/create')."
						<h2>User Search</h2>
						".drupal_get_form('styleforhire_user_search_form')."
					</div>
				</div>
			</div>
			<div class='alerts group'>
				<div class='outer'>
					<div class='inner'>
						<h2>Alerts</h2>
						".styleforhire_dm_get_alerts($user->uid)."
					</div>
				</div>
			</div>
			<div class='finacials group'>
				<div class='outer'>
					<div class='inner'>
						<h2>SFH Financials</h2>
						".l("Access CSV Reports", 'admin/store/reports/sales/custom')."
					</div>
				</div>
			</div>
		</div> <!-- end widget-left -->
		<div class='widget-right'>
		<div class='account-info group'>
			<div class='outer'>
				<div class='inner'>
					<div class='controls'>
						<a class='edit' href='{$GLOBALS['base_url']}/user/{$user->uid}/edit'>Edit</a>
					</div>
					<h2>Account Information</h2>
					<dl>
						<dt class='address'>Address:</dt>
							<dd>{$user_data->address1}</dd>
							<dd>{$user_data->address2}</dd><br />
						<dd>{$user_data->city}</dd>, <dd>{$user_data->state}</dd> <dd>{$user_data->zip}</dd><br />
						<dt class='email'>Email:</dt><dd>{$user->mail}</dd><br />
						<dt class='birthday'>Birthday:</dt><dd>".(date('F d, Y', $user_data->birthday))."</dd><br />
						<dt class='username'>Username:</dt><dd>{$user->name} [<span><a href=\"/user/{$user->uid}/edit\">change password</a>]</span></dd>
					</dl>
				</div>
			</div>
		</div>
		</div> <!-- end widget-right -->
	";

	return $output;
}

function styleforhire_user_search_form() {

	$form = array(
		'first_name' => array(
			'#name' => 'first_name',
			'#title' => 'First Name',
			'#type' => 'textfield',
			'#size' => '40'
		),
		'last_name' => array(
			'#name' => 'last_name',
			'#title' => 'Last Name',
			'#type' => 'textfield',
			'#size' => '40'
		),
		'submit' => array(
			'#name' => 'submit',
			'#id'=> 'search',
			'#type' => 'submit',
			'#value' => 'Search',
			'#title' => 'Search'
		)
	);

	return $form;	
}

function styleforhire_user_search_form_submit($form, &$form_state) {

	drupal_goto('user_search/'.$form_state['values']['first_name'].','.$form_state['values']['last_name']);
}

function styleforhire_user_search_results($name) {

	list($first_name, $last_name) = split(',', $name);

	$header = array(
		'Username',
		'Name',
	);

	$result = db_query('

		SELECT u.uid,
		u.name,
		ctp.field_first_name_value AS first_name,
		ctp.field_last_name_value AS last_name

		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		WHERE 1=1 
		'.(isset($first_name) ? ' AND ctp.field_first_name_value LIKE "%'.db_escape_string($first_name).'%"' : '').'
		'.(isset($last_name) ? ' AND ctp.field_last_name_value LIKE "%'.db_escape_string($last_name).'%"' : '').'
	');

	$rows = array();

	while($row = db_fetch_array($result)) {

		$rows[] = array(
			$row['name'],
			l($row['first_name'].' '.$row['last_name'], 'dashboard/'.$row['uid'])
		);

	}

	return l('<< Back to Dashboard', 'dashboard').theme('table', $header, $rows);
}

function styleforhire_client_dashboard($user) {

	drupal_add_js(drupal_get_path('module', 'styleforhire').'/styleforhire.js');
	drupal_add_css(drupal_get_path('module', 'styleforhire').'/styleforhire.css');

	$uid = $user->uid;

	$result = db_query('

		SELECT u.uid,
			u.name,
			u.mail,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_address1_value AS address1,
			ctp.field_address2_value AS address2,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			ctp.field_zip_value AS zip,
			ctp.field_birthday_value AS birthday,
			ctcp.field_your_style_value AS style,
			GROUP_CONCAT(DISTINCT cfsi.field_style_icons_value SEPARATOR ", ") AS icons,
			GROUP_CONCAT(DISTINCT cfsb.field_your_brands_value SEPARATOR ", ") AS brands,
			GROUP_CONCAT(DISTINCT cfss.field_your_shops_value SEPARATOR ", ") AS shops,
			cfff1.field_fav_fashion1_value AS url1,
			cfff2.field_fav_fashion2_value AS url2,
			cfff3.field_fav_fashion3_value AS url3,
			ctcp.field_your_brands_other_value as brands_other,
			ctcp.field_your_shops_other_value as shops_other,
			ctcp.field_style_icons_other_value as icons_other,
			lbn.nid as lb_nid


		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		/* client prefs */
		LEFT JOIN node cn ON cn.uid=u.uid AND cn.type="preferences"
		LEFT JOIN content_type_preferences ctcp ON ctcp.nid=cn.nid
		LEFT JOIN content_field_style_icons cfsi ON cfsi.nid=cn.nid
		LEFT JOIN content_field_your_brands cfsb ON cfsb.nid=cn.nid
		LEFT JOIN content_field_your_shops cfss ON cfss.nid=cn.nid
		LEFT JOIN content_field_fav_fashion1 cfff1 ON cfff1.nid=cn.nid
		LEFT JOIN content_field_fav_fashion2 cfff2 ON cfff2.nid=cn.nid
		LEFT JOIN content_field_fav_fashion3 cfff3 ON cfff3.nid=cn.nid
		/*LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid*/
		LEFT JOIN node lbn ON u.uid=lbn.uid AND lbn.type="lookbook"

		WHERE u.uid=%d

		GROUP BY u.uid

	
	', $uid
	);

	$rows = array();
	$user_data = db_fetch_object($result);

	$result = db_query('
		
		SELECT nid FROM node WHERE type="lookbook" AND uid=%d

	',$uid);

	$lookbook_nid = db_result($result);

	if ( !empty($lookbook_nid)) {
		$node = node_load($lookbook_nid);
	}
	else {
		$node = NULL;
	}

	if ( $user_data === FALSE) {

		drupal_set_title('Welcome to your account!');
		return '<div>Please '.l('Click Here', 'user/'.$user->uid.'/edit/profile').' to complete your profile information before proceeding</div>';
	}

	return theme('client_dashboard', $user, $user_data, $node);

	return "
	
		<!-- <a target='_blank' href='/sites/default/files/sfh_client_lookbook.pdf'>View Lookbook</a> -->

		<div class=\"widget-left\">

		<div class='preferences group'>

			<div class='outer'>
				<div class='inner'>
					<div class='controls'>
						<a class='edit' href='{$GLOBALS['base_url']}/user/$uid/edit/preferences'>Edit</a>
					</div>
					<div class='philosophy ".(empty($user_data->style) ? "empty" : "")."'>
					<h2>My Style Philosophy</h2>
						{$user_data->style}
					</div>
					<div class='icons ".(empty($user_data->icons) ? "empty" : "")."'>
					<h2>My Style Icons</h2>
						<ul>
							<li>
								{$user_data->icons}
							</li>
						</ul>
					</div>
					<div class='fav-brands ".(empty($user_data->brands) ? "empty" : "")."'>
					<h2>My Favorite Brands</h2>
						<ul>
							<li>
								{$user_data->brands}
							</li>
						</ul>
					</div>
					<div class='my-shops ".(empty($user_data->shops) ? "empty" : "")."'>
					<h2>Favorite Places to Shop</h2>
						<ul>
							<li>
								{$user_data->shops}	
							</li>
						</ul>
					</div>
					<div class='my-sites ".((empty($user_data->url1) AND empty($user_data->url2) AND empty($user_data->url3)) ? "empty" : "")."'>
					<h2>Favorite Fashion Sites</h2>
						<ul>
							<li>{$user_data->url1}</li>
							<li>{$user_data->url2}</li>
							<li>{$user_data->url3}</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
		</div> <!-- end widget-left -->
		<div class=\"widget-right\">
			<div class='account-info group'>
				<div class='outer'>
					<div class='inner'>
						<div class='controls'>
							<a class='edit' href='{$GLOBALS['base_url']}/user/{$user->uid}/edit'>Edit</a>
						</div>
						<h2>Account Information</h2>
						<dl>
							<dt class='address'>Address:</dt>
								<dd>{$user_data->address1}</dd>
								<dd>{$user_data->address2}</dd><br />
							<dd>{$user_data->city}</dd>, <dd>{$user_data->state}</dd> <dd>{$user_data->zip}</dd><br />
							<dt class='email'>Email:</dt><dd>{$user->mail}</dd><br />
							<dt class='birthday'>Birthday:</dt><dd>".(date('F d, Y', $user_data->birthday))."</dd><br />
							<dt class='username'>Username:</dt><dd>{$user->name} [<span><a href=\"/user/{$user->uid}/edit\">change password</a>]</span></dd>
						</dl>
					</div>
				</div>
			</div>
		</div> <!-- end widget-right -->

		<div class='fashion-profile group'>
			<div class='outer'>
				<div class='inner'>
					<h2>My Fashion Profile - by ".$user_data->first_name." ".$user_data->last_name."</h2>
				</div>
			</div>
		</div>

		<div class='my-photos group'>
			<div class='outer'>
				<div class='inner'>
					<h2>My Photos</h2>
				</div>
			</div>
		</div>
	";
}

/**
 * Returns the sortable table listing of a customer's orders.
 *
 * @param $uid
 *   The user ID whose orders you wish to list.
 */
function styleforhire_order_history($uid) {
  //drupal_set_title(t('My order history'));

	$user = user_load(array('uid'=>$uid));

  $header = array(
    array('data' => t('Date'), 'field' => 'o.created', 'sort' => 'desc'),
    array('data' => t('Order #'), 'field' => 'o.order_id'),
    array('data' => t('Status'), 'field' => 'os.title'),
    array('data' => t('Products'), 'field' => 'products'),
    array('data' => t('Total'), 'field' => 'o.order_total')
  );

  $result = pager_query("SELECT o.order_id, o.created, os.title, SUM(op.qty) AS products, o.order_total AS total FROM {uc_orders} AS o LEFT JOIN {uc_order_statuses} AS os ON o.order_status = os.order_status_id LEFT JOIN {uc_order_products} AS op ON o.order_id = op.order_id WHERE o.uid = %d AND o.order_status IN ". uc_order_status_list('general', TRUE) ." GROUP BY o.order_id, o.created, os.title, o.order_total". tablesort_sql($header), 20, 0, "SELECT COUNT(*) FROM {uc_orders} WHERE uid = %d AND order_status NOT IN ". uc_order_status_list('specific', TRUE), $user->uid);
  $context = array(
    'revision' => 'themed-original',
    'location' => 'order-history',
  );
  // Build a table based on the customer's orders.
  while ($order = db_fetch_object($result)) {
    $context['subject'] = array('order' => $order);
    $link = l($order->order_id, 'user/'. $user->uid .'/order/'. $order->order_id);
    if (user_access('view all orders')) {
      $link .= '<span class="order-admin-icons">'. uc_order_actions($order, TRUE) .'</span>';
    }
    $rows[] = array(
      array('data' => format_date($order->created, 'custom', variable_get('uc_date_format_default', 'm/d/Y'))),
      array('data' => $link, 'nowrap' => 'nowrap'),
      array('data' => $order->title),
      array('data' => (!is_null($order->products) ? $order->products : 0), 'align' => 'center'),
      array('data' => uc_price($order->total, $context), 'align' => 'right'),
    );
  }

  $output = theme('table', $header, $rows) . theme('pager', NULL, 20, 0);

  return $output;
}

function styleforhire_stylist_profile($uid) {

	$pos = strrpos($uid,'.');
	if($pos !== false){ // If the client supplies 'firstname.lastname' instead of 'uid'
		$where_clause = "WHERE u.name='%s'";
	}
	else{
		$user = user_load(
			array("uid"=>$uid)
		);
		$where_clause = "WHERE u.uid=%d ";
	}
$sql = "	SELECT u.uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			GROUP_CONCAT(DISTINCT cfae.field_areas_of_expertise_value SEPARATOR ', ') AS expertise,
			ctsf.field_status_value as status,
			cfsa.field_intro_statement_value AS intro,
			cfsa.field_hourly_rate_1_value AS rate,
			cfsa.field_hours_of_experience_value AS hours,
			f.filename AS filepath,
			GROUP_CONCAT(DISTINCT cfsi.field_style_icons_value SEPARATOR ', ') AS icons,
			GROUP_CONCAT(DISTINCT cfsb.field_your_brands_value SEPARATOR ', ') AS brands,
			GROUP_CONCAT(DISTINCT cfss.field_your_shops_value SEPARATOR ', ') AS shops,
			cfsa.field_apprentice_value as isApprentice,
			cfsa.field_education_training_value AS education,
			cfsa.field_affiliations_value AS affiliations,
			cfsa.field_experience_value AS experience,
			cfsa.field_things_i_love_value AS things_i_love,
			cfsa.field_testimonial1_value AS testimonial1,
			cfsa.field_testimonial_name1_value AS testimonial_name1,
			cfsa.field_testimonial2_value AS testimonial2,
			cfsa.field_testimonial_name2_value AS testimonial_name2,
			cfsa.field_testimonial3_value AS testimonial3,
			cfsa.field_testimonial_name3_value AS testimonial_name3,
			cfsa.field_testimonial3_value AS testimonial4,
			cfsa.field_testimonial_name3_value AS testimonial_name4,
			cfsa.field_testimonial3_value AS testimonial5,
			cfsa.field_testimonial_name3_value AS testimonial_name5,
			cfsa.field_case_study1_value AS case_study1,
			cfsa.field_case_study2_value AS case_study2,
			cfsa.field_case_study3_value AS case_study3,
			cs1bf.filepath AS cs1bf_filename,
			cs2bf.filepath AS cs2bf_filename,
			cs3bf.filepath AS cs3bf_filename,
			cs1af.filepath AS cs1af_filename,
			cs2af.filepath AS cs2af_filename,
			cs3af.filepath AS cs3af_filename

		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type='profile' 
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		/*
		JOIN content_field_first_name cffn ON cffn.nid=pn.nid
		JOIN content_field_last_name cfln ON cfln.nid=pn.nid
		JOIN content_field_city cfc ON cfc.nid=pn.nid
		JOIN content_field_state cfs ON cfs.nid=pn.nid
		*/

		/* stylist file */
		LEFT JOIN node sn ON sn.uid=u.uid AND sn.type='stylists_file'
		LEFT JOIN content_field_areas_of_expertise cfae ON cfae.nid=sn.nid
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid

		/* application file */
		LEFT JOIN node an ON an.uid=u.uid AND an.type='stylist_application'
		LEFT JOIN content_type_stylist_application cfsa ON cfsa.nid=an.nid
		LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid
		LEFT JOIN files cs1bf ON cfsa.field_case_study_before1_fid=cs1bf.fid
		LEFT JOIN files cs2bf ON cfsa.field_case_study_before2_fid=cs2bf.fid
		LEFT JOIN files cs3bf ON cfsa.field_case_study_before3_fid=cs3bf.fid
		LEFT JOIN files cs1af ON cfsa.field_case_study_after1_fid=cs1af.fid
		LEFT JOIN files cs2af ON cfsa.field_case_study_after2_fid=cs2af.fid
		LEFT JOIN files cs3af ON cfsa.field_case_study_after3_fid=cs3af.fid
		LEFT JOIN content_field_style_icons cfsi ON cfsi.nid=an.nid
		LEFT JOIN content_field_your_brands cfsb ON cfsb.nid=an.nid
		LEFT JOIN content_field_your_shops cfss ON cfss.nid=an.nid ".$where_clause;
	$result = db_query($sql,$uid);

	$rows = array();
	$user_data = db_fetch_object($result);
	
	$apprentice_Desc = null;
	if($user_data->isApprentice != null){
	 if($user_data->isApprentice == 'Yes'){
		$apprentice_Desc = "<div class='apprentice_text'> Style For Hire Apprentices are talented stylists who are gaining
							experience in our approach. We are pleased to offer these appointments
							at reduced rates.  Money back guarantee does not apply.</div>";
	 }
	}	
	if($user_data->status == "Active but inactive") {
			$apprentice_Desc="<div class='apprentice_txt'><i>".$user_data->first_name." ".$user_data->last_name." is currently not accepting any new clients.</i></div>";
	}
	
	$book_data = "<table class='heading-section' width='100%' cellspacing='0' cellpadding='0' border='0'><tbody><tr><td>"."<h1><a href=\"/book_appointment/".($user_data->uid)."\">"."{$user_data->first_name} {$user_data->last_name}"."</a>"."</h1>"."</td>".($apprentice_Desc != null?"<td class='apprentice'><h1>Apprentice</h1></td>":"")."</tr></tbody></table>".
					l('Book this Stylist', 'book_appointment/'.$user_data->uid);
	//setCookie('check_if_browser_cookies_enabled', 'true',time()+60*60);
	//if(!$_COOKIE['check_if_browser_cookies_enabled']){
	if(!$_COOKIE['has_js']){
		$book_data = "<table class='heading-section' width='100%' cellspacing='0' cellpadding='0' border='0'><tbody><tr><td>"."<h1>"."{$user_data->first_name} {$user_data->last_name}"."</h1>"."</td>".($apprentice_Desc != null?"<td class='apprentice'><h1>Apprentice</h1></td>":"")."</tr></tbody></table>".
		'<div class="contactStylist"><b>&nbsp;Book this Stylist:<br \>&nbsp;1.877.789.5307<br \>&nbsp;or enable cookies in your browser to continue with online booking.</b></div>';
	}


	//var_dump($user_data);
	if(	!in_array($user_data->status, array("Active","Active but limited access"))) { $book_data="<h1>"."{$user_data->first_name} {$user_data->last_name}"."</h1>";}
// subu removed the line below and moved $contents above
	//drupal_set_title("<a href=\"/book_appointment/".($user_data->uid)."\">"."{$user_data->first_name} {$user_data->last_name}"."</a>");
	$contents = $book_data./*"<h1><a href=\"/book_appointment/".($user_data->uid)."\">"."{$user_data->first_name} {$user_data->last_name}"."</a></h1>".
	l('Book this Stylist', 'book_appointment/'.$user_data->uid).*/
	/*"<br /><br /><br /><br /><h1>"."{$user_data->first_name} {$user_data->last_name}"."</h1>".
	'<div class="contactStylist">&nbsp;Book this Stylist:<br \>&nbsp;1.877.789.5307<br \>&nbsp;appointments@styleforhire.com</div>'.*/
	"<div>{$apprentice_Desc}</div>".
	"<div class='introduction group".(empty($user_data->intro) ? " empty" : "")."'>".
		"
			<h1>Introduction</h1>
			<p>{$user_data->intro}</p>
		</div>
		<div class='prices group".(empty($user_data->rate) ? " empty" : "")."'>
			<h2>Prices & Packages</h2>
			<p>\${$user_data->rate}/hour</p>
		</div>
		<div class='education group".(empty($user_data->education) ? " empty" : "")."'>
			<h2>Education & Training</h2>
			<p>{$user_data->education}</p>
		</div>		
		<div class='affiliations group".(empty($user_data->affiliations) ? " empty" : "")."'>
			<h2>Affiliations</h2>
			<p>{$user_data->affiliations}</p>
		</div>	
		<div class='expertise group".(empty($user_data->experience) ? " empty" : "")."'>
			<h2>Experience</h2>
			<p>{$user_data->experience}</p>
		</div>
		<div class='expertise group".(empty($user_data->things_i_love) ? " empty" : "")."'>
			<h2>Things I Love</h2>
			<p>{$user_data->things_i_love}</p>
		</div>		
		<div class='testimonials group".(empty($user_data->testimonial1) ? " empty" : "")."'>
			<h2>Testimonials</h2>
	";

	foreach(array(1,2,3) as $value) {

		$testimonial = 'testimonial'.$value;
		$testimonial_name = 'testimonial_name'.$value;

		if ( empty($user_data->$testimonial)) {

			continue;
		}

		$contents .= "
			<div class='testimonial'>
				<p>".$user_data->$testimonial."</p>
			</div>
			<div class='testimonial_name'>
				<p>".(($user_data->$testimonial_name!=null)?"- ".$user_data->$testimonial_name:"")."</p>
			</div>

		";
	}

	$contents .= "
		</div>
		<div class='case-studies group clearfix'>
		";
			
	if ( !empty($user_data->$case_study)) {
			$contents .= "<h2>Case Studies</h2>";
		}
		
	$i=1;
	foreach(array(1,2,3) as $value) {
		
		$case_study = 'case_study'.$value;
		$case_study_before = "cs{$value}bf_filename";
		$case_study_after = "cs{$value}af_filename";

		if ( empty($user_data->$case_study)) {

			continue;
		}

		$contents .= "<div class='case-study-section'>
			<div class='case-study'>
				<div class='case-study-heading'>Case Study - ".$i++."</div>
				<p>".$user_data->$case_study."</p>
			</div>
		";

		if ( !empty($user_data->$case_study_before)) {
			$contents .= "
				<div class='case-study-before'>
					<p>".
					theme(
						'imagecache',
						'stylist_casestudies',
						$user_data->$case_study_before
					)."<br />Before</p>
				</div>
			";
		}

		if ( !empty($user_data->$case_study_after)) {
			$contents .="
				<div class='case-study-after'>
					<p>".
					theme(
						'imagecache',
						'stylist_casestudies',
						$user_data->$case_study_after
					)."<br />After</p>
				</div>
			";
		}
		$contents .= "</div>";
	}

	$contents .= "</div>";

	return $contents;
}
function styleforhire_find_stylist_by_firstnamedotlastname($firstnamedotlastname){
	$lastname = substr($firstnamedotlastname,strrpos($firstnamedotlastname,'.')+1);
	$firstname = substr($firstnamedotlastname,0,strrpos($firstnamedotlastname,'.'));
	
	$result = db_query('SELECT u.uid as uid 
			FROM users u

			/* profile node */
			JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
			JOIN content_type_profile ctp ON ctp.nid=pn.nid
			
			/* stylist file */
			LEFT JOIN node sn ON sn.uid=u.uid AND sn.type="stylists_file"
			LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid
			
			where ctp.field_first_name_value="'.$firstname.'" and 
			ctp.field_last_name_value="'.$lastname.'" and 
			ctsf.field_status_value in ("Active","Active but inactive","Active but limited access")	');
	
	while($row = db_fetch_object($result)) {
			$uid = $row->uid;

	}
	if(!empty($uid)){
			drupal_goto("stylist/".$uid);
		}
}
function styleforhire_basic_search($zip) {

	return styleforhire_adv_search($zip);
}

function styleforhire_adv_search($zip = NULL) {
    if($zip != NULL){
		$int_value = intval($zip);
		if($int_value == 0) {
				$zip = str_replace(" ","_",$zip);
				$zip = "s_name=".$zip;
			}
	}
	
	drupal_add_css(drupal_get_path('module', 'styleforhire').'/styleforhire.css');
	$content =  '<div id="adv_search_container"><div id="page-title"><div id="page-title-inner">
				<h1 class="title">Search Results</h1></div></div>'.
				drupal_get_form('styleforhire_search_controls_form').
				'<div id="search_results"></div>

			</div>
			<div id="compare_stylists_container"><div id="page-title"><div id="page-title-inner">
				<h1 class="title">Compare Stylists</h1></div></div>
				<a href="javascript:adv_search_return()">Return to Search Results</a>
				<div id="compare_stylists">
				</div>
			</div>';
	
	if ( $zip == "forward") {
		$content .= "
			<script>
				$(document).ready(function(){
					$('#edit-search').trigger('click');
				});
			</script>
		";
	} elseif ( $zip != "") {

		$content .= "
			<script>
				$(document).ready(function(){
					basic_search_submit('".$zip."')
				});
			</script>
		";
	}

	return $content;
}

function styleforhire_states() {

	return array(
		'' => "Select State",
		'AL'=>"Alabama",
		'AK'=>"Alaska", 
		'AZ'=>"Arizona", 
		'AR'=>"Arkansas", 
		'CA'=>"California", 
		'CO'=>"Colorado", 
		'CT'=>"Connecticut", 
		'DE'=>"Delaware", 
		'DC'=>"District Of Columbia", 
		'FL'=>"Florida", 
		'GA'=>"Georgia", 
		'HI'=>"Hawaii", 
		'ID'=>"Idaho", 
		'IL'=>"Illinois", 
		'IN'=>"Indiana", 
		'IA'=>"Iowa", 
		'KS'=>"Kansas", 
		'KY'=>"Kentucky", 
		'LA'=>"Louisiana", 
		'ME'=>"Maine", 
		'MD'=>"Maryland", 
		'MA'=>"Massachusetts", 
		'MI'=>"Michigan", 
		'MN'=>"Minnesota", 
		'MS'=>"Mississippi", 
		'MO'=>"Missouri", 
		'MT'=>"Montana",
		'NE'=>"Nebraska",
		'NV'=>"Nevada",
		'NH'=>"New Hampshire",
		'NJ'=>"New Jersey",
		'NM'=>"New Mexico",
		'NY'=>"New York",
		'NC'=>"North Carolina",
		'ND'=>"North Dakota",
		'OH'=>"Ohio", 
		'OK'=>"Oklahoma", 
		'OR'=>"Oregon", 
		'PA'=>"Pennsylvania", 
		'RI'=>"Rhode Island", 
		'SC'=>"South Carolina", 
		'SD'=>"South Dakota",
		'TN'=>"Tennessee", 
		'TX'=>"Texas", 
		'UT'=>"Utah", 
		'VT'=>"Vermont", 
		'VA'=>"Virginia", 
		'WA'=>"Washington", 
		'WV'=>"West Virginia", 
		'WI'=>"Wisconsin", 
		'WY'=>"Wyoming",
		'ON'=>"Ontario",
		'QC'=>"Quebec",
		'NS'=>"Nova Scotia",
		'NB'=>"New Brunswick",
		'MB'=>"Manitoba",
		'BC'=>"British Columbia",
		'AB'=>"Alberta",
		'SK'=>"Saskatchewan"
	);
}
/*subu created state_full_spelling to state mapping because this information might get populated in the billing form later */
function styleforhire_states_full() {

    return array(
        '' => "Select State",
        'Alabama'=>"Alabama",
        'Alaska'=>"Alaska", 
        'Arizona'=>"Arizona", 
        'Arkansas'=>"Arkansas", 
        'California'=>"California", 
        'Colorado'=>"Colorado", 
        'Connecticut'=>"Connecticut", 
        'Delaware'=>"Delaware", 
        'District Of Columbia'=>"District Of Columbia", 
        'Florida'=>"Florida", 
        'Georgia'=>"Georgia", 
        'Hawaii'=>"Hawaii", 
        'Idaho'=>"Idaho", 
        'Illinois'=>"Illinois", 
        'Indiana'=>"Indiana", 
        'Iowa'=>"Iowa", 
        'Kansas'=>"Kansas", 
        'Kentucky'=>"Kentucky", 
        'Louisiana'=>"Louisiana", 
        'Maine'=>"Maine", 
        'Maryland'=>"Maryland", 
        'Massachusetts'=>"Massachusetts", 
        'Michigan'=>"Michigan", 
        'Minnesota'=>"Minnesota", 
        'Mississippi'=>"Mississippi", 
        'Missouri'=>"Missouri", 
        'Montana'=>"Montana",
        'Nebraska'=>"Nebraska",
        'Nevada'=>"Nevada",
        'New Hampshire'=>"New Hampshire",
        'New Jersey'=>"New Jersey",
        'New Mexico'=>"New Mexico",
        'New York'=>"New York",
        'North Carolina'=>"North Carolina",
        'North Dakota'=>"North Dakota",
        'Ohio'=>"Ohio", 
        'Oklahoma'=>"Oklahoma", 
        'Oregon'=>"Oregon", 
        'Pennsylvania'=>"Pennsylvania", 
        'Rhode Island'=>"Rhode Island", 
        'South Carolina'=>"South Carolina", 
        'South Dakota'=>"South Dakota",
        'Tennessee'=>"Tennessee", 
        'Texas'=>"Texas", 
        'Utah'=>"Utah", 
        'Vermont'=>"Vermont", 
        'Virginia'=>"Virginia", 
        'Washington'=>"Washington", 
        'West Virginia'=>"West Virginia", 
        'Wisconsin'=>"Wisconsin", 
        'Wyoming'=>"Wyoming"
    );
}


function styleforhire_adv_search_form() {


	if ( arg(1) == 'zip') {
		$zip = arg(2);
	}
	else {
		$zip = 'Zipcode';
	}

	drupal_add_js(drupal_get_path('module', 'styleforhire').'/styleforhire.js');

	$form = array(/*
		's_street' => array(
			'#name' => 's_street',
			'#title' => 'By Location**',
			'#type' => 'textfield',
			'#default_value' => 'Street',
			'#attributes' => array(
				'onclick' => 'if ( this.value=="Street") { this.value="" }'
			)
		),
		's_city' => array(
			'#name' => 's_city',
			'#type' => 'textfield',
			'#default_value' => 'City',
			'#attributes' => array(
				'onclick' => 'if ( this.value=="City") { this.value="" }'
			)
		),
		's_state' => array(
			'#name' => 's_state',
			'#type' => 'select',
			'#options' => styleforhire_states(),
			'#default_value' => '',
		),*/
		's_zipcode' => array(
			'#name' => 's_zipcode',
			'#type' => 'textfield',
			'#default_value' => $zip,
			'#attributes' => array(
				'onclick' => 'if ( this.value=="Zipcode") { this.value="" }'
			)
		),
		's_radius' => array(
			'#name' => 's_radius',
			'#type' => 'select',
			'#options' => array(
				50=>'Within 50 miles',
				75=>'Within 75 miles',
				100=>'Within 100 miles'
			),
			'#default_value' => 50
		),
		's_hours' => array(
			'#name' => 's_hours',
			'#title' => t('Hours of Experience'),
			'#type' => 'select',
			'#options' => array(
				''=>'No Preference',
				"20" => "Up to 20 hours",
				"50" => "Up to 50 hours",
				"100" => "Up to 100 hours",
				"500" => "Up to 500 hours",
				"1000" => "Up to 1000 hours",
				"5000" => "Up to 5000 hours"
			)
		),
		's_rate' => array(
			'#name' => 's_rate',
			'#title' => t('Max Rate per Hour'),
			'#type' => 'select',
			'#options' => array(
				''=>'No Preference',
				50=>'$50 or less',
				100=>'$100 or less',
				150=>'$150 or less',
				200=>'$200 or less',
				250=>'$250 or less',
				300=>'$300 or less'
			)
		)
	);
	
	//var_dump();
	$form['s_service_type'] = array (
		'#type' => 'checkboxes',
		'#title' => t('By Expertise'),
		'#options' => styleforhire_get_allowed_values('field_areas_of_expertise')
	);

	if ( arg(1) == 'forward') {

		foreach( explode(";", arg(2)) as $values) {
		
			$defaults = explode("=", $values);
			if ( $defaults[0] == 's_service_type') {
				$form[$defaults[0]]['#default_value'][] = $defaults[1];
			}
			else {
				$form[$defaults[0]]['#default_value'] = $defaults[1];
			}
		}
	}

	$form['search'] = array(
		'#name' => 'search',
		'#type' => 'button',
		'#value' => 'Search',
		'#attributes' => array(
			'onclick' => 'adv_search_submit(this.form, "'.(arg(0) == 'adv_search' ? '1': '0').'"); return false'
		),
		'#suffix' => '
			<script>
				$(document).ready(function() {
					var adv_search_url = getCookie("adv_search_url");
					//alert(adv_search_url);
					if ( adv_search_url != "") {
						setCookie("adv_search_url", "", 1);
						//$.get(adv_search_url, adv_search_response, "json");
					}
				});
			</script>
		'
	);
	
	return $form;
}

function styleforhire_search_controls_form() {

	$form = array(
		'compare_stylist' => array(
			'#name' => 'compare_stylist',
			'#type' => 'button',
			'#value' => 'Compare',
			'#attributes' => array(
				'onclick' => 'adv_search_compare(); return false'
			)
		),/*,
		'num_results' => array(
			'#name' => 'num_results',
			'#title' => 'SHOW',
			'#type' => 'select',
			'#options' => array(
				10=>'10 stylists per page',
				20=>'20 stylists per page',
			)
		),*/
		/*'sort_by' => array(
			'#name' => 'sort_by',
			'#title' => 'SORT BY',
			'#type' => 'select',
			'#options' => array(
				1=>'Distance',
				
			)
		)*/
	);

	return $form;

}

function styleforhire_adv_search_results($criteria) {

	$criteria = explode(";", trim($criteria, " ;"));
	
	foreach($criteria as $key => $value) {

		$criteria[$key] = explode("=", $value);

		if ( substr($criteria[$key][0], 2) != strtolower($criteria[$key][1]) AND $criteria[$key][1] != "") {

			if ( isset($search[$criteria[$key][0]])) {

				if ( ! is_array($search[$criteria[$key][0]])) {

					$search[$criteria[$key][0]] = array($search[$criteria[$key][0]]);
				}
	
				$search[$criteria[$key][0]][] = $criteria[$key][1];
			}
			else {
				$search[$criteria[$key][0]] = $criteria[$key][1];
			}
		}
	}

	/* drupal_json(
		array(
		'search' => !empty($search["s_name"]),
		)
	); */
	if(empty($search["s_name"]))	$stylist_results = styleforhire_stylists_search($search, 10);
	else { 							$stylist_results = styleforhire_stylists_search_by_name($search["s_name"]);}

	//build pager
	

	$stylist_num = 0;
	$results_html = '';
	
	foreach($stylist_results["results"] as $row) {

		//var_dump($row);
		$results_html .= styleforhire_stylist_html($row, $stylist_num++);
		
	}
	if($stylist_results["num_of_results"] == 0){
		$results_html = styleforhire_no_stylist_in_area('step1');
	}
	drupal_json(
		array(
			'pager' => $pager,
			'num_of_results' => $stylist_results["num_of_results"],
			'results_html' => $results_html,
			'compare_html' => styleforhire_compare_stylists_table($stylist_results["results"]),
			'logged_in' => $stylist_results["logged_in"]
		)
	);
}
function styleforhire_stylists_search_by_name($stylistname){
		
		$name = explode("_",$stylistname);
		/* debugging --->  drupal_json(
		array(
		'fname' => $name[0],
		'lname' => $name[1],
		)); */
		$result = db_query('SELECT u.uid, u.name,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			GROUP_CONCAT(DISTINCT cfae.field_areas_of_expertise_value SEPARATOR ", ") AS expertise,
			GROUP_CONCAT(DISTINCT cfs.field_speciality_value SEPARATOR ", ") AS speciality,
			GROUP_CONCAT(DISTINCT n1.title SEPARATOR ", ") AS my_appts,
			cfsa.field_intro_statement_value AS intro,
			cfsa.field_hourly_rate_1_value AS rate,
			cfsa.field_hours_of_experience_1_value AS hours,
			cfsa.field_apprentice_value AS isApprentice, 
			f.filepath AS filename,
			GROUP_CONCAT(DISTINCT cfsi.field_style_icons_value SEPARATOR ", ") AS icons,
			GROUP_CONCAT(DISTINCT cfsb.field_your_brands_value SEPARATOR ", ") AS brands,
			GROUP_CONCAT(DISTINCT cfss.field_your_shops_value SEPARATOR ", ") AS shops,
			cfsa.field_education_training_value AS education,
			cfsa.field_affiliations_value AS affiliations,
			ctsf.field_travel_distance_value as stylist_distance,
			ctsf.field_status_value as status

		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN users_roles ur ON ur.uid=u.uid AND ur.rid=3
		JOIN content_type_profile ctp ON ctp.nid=pn.nid AND
          ctp.field_first_name_value=\''.$name[0].'\' AND ctp.field_last_name_value=\''.$name[1].'\'
		/* stylist file */
		LEFT JOIN node sn ON sn.uid=u.uid AND sn.type="stylists_file"
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid
		LEFT JOIN content_field_my_apts cfma ON cfma.nid=sn.nid
		LEFT JOIN node n1 on n1.nid=cfma.field_my_apts_nid
		LEFT JOIN content_field_areas_of_expertise cfae ON cfae.nid=sn.nid
		LEFT JOIN content_field_speciality cfs ON cfs.nid=sn.nid

		/* application file */
		LEFT JOIN node an ON an.uid=u.uid AND an.type="stylist_application"
		LEFT JOIN content_type_stylist_application cfsa ON cfsa.nid=an.nid
		LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid

		LEFT JOIN node spn ON spn.uid=u.uid AND spn.type="preferences"
		LEFT JOIN content_field_style_icons cfsi ON cfsi.nid=spn.nid
		LEFT JOIN content_field_your_brands cfsb ON cfsb.nid=spn.nid
		LEFT JOIN content_field_your_shops cfss ON cfss.nid=spn.nid

		WHERE ctsf.field_status_value in ("Active","Active but inactive")
		GROUP BY u.uid');
	$rows = array();
	while($row = db_fetch_object($result)) {

		$row->headshot = theme(
			'imagecache',
			'stylist_search',
			$row->filename
		);

		$rows[] = $row;

	}

	$num_of_results = 3;
	$total_results = 5;
	/* debugging ---> drupal_json(
		array(
		'num_of_results' => count($rows),
		'results' => $rows,
		));*/
	global $user;

	return array(
		'num_of_results' => count($rows),
		'total_results' => $total_results,
		'results' => $rows,
		'logged_in' => $user->uid
	);	
}
function styleforhire_stylists_search($search, $limit) {

	$data = styleforhire_get_geocode(
		$search["s_street"], 
		$search["s_city"],
		$search["s_state"],
		$search["s_zipcode"]
	);

	//var_dump($data);
	
	/* This is for Manhattan - If stylists are in Manhattan, then search radius is only 10 miles */
	if(distance_between_2_points('','','',$search["s_zipcode"],'','','',10001) < 50) 
		$search['s_radius']=10;

	$distance = "round(((
	ACOS(
		SIN({$data[2]} * PI() / 180) * 
		SIN(ctp.field_latitude_value * PI() / 180) +
		COS({$data[2]} * PI() / 180) *
		COS(ctp.field_latitude_value * PI() / 180) *
		COS(({$data[3]} - ctp.field_longitude_value) * PI() / 180)
	) *
		180 / PI()
	) * 60 * 1.1515), 2) AS distance";

	//var_dump($distance);

	$result = db_query('

		SELECT u.uid,u.name,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			ctp.field_city_value AS city,
			ctp.field_state_value AS state,
			GROUP_CONCAT(DISTINCT cfae.field_areas_of_expertise_value SEPARATOR ", ") AS expertise,
			GROUP_CONCAT(DISTINCT cfs.field_speciality_value SEPARATOR ", ") AS speciality,
			GROUP_CONCAT(DISTINCT n1.title SEPARATOR ", ") AS my_appts,
			cfsa.field_intro_statement_value AS intro,
			cfsa.field_hourly_rate_1_value AS rate,
			cfsa.field_hours_of_experience_1_value AS hours,
			cfsa.field_apprentice_value AS isApprentice, 
			f.filepath AS filename,
			GROUP_CONCAT(DISTINCT cfsi.field_style_icons_value SEPARATOR ", ") AS icons,
			GROUP_CONCAT(DISTINCT cfsb.field_your_brands_value SEPARATOR ", ") AS brands,
			GROUP_CONCAT(DISTINCT cfss.field_your_shops_value SEPARATOR ", ") AS shops,
			cfsa.field_education_training_value AS education,
			cfsa.field_affiliations_value AS affiliations,
			'.$distance.',
			ctsf.field_travel_distance_value as stylist_distance,
			ctsf.field_status_value as status

		FROM users u

		/* profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN users_roles ur ON ur.uid=u.uid AND ur.rid=3
		JOIN content_type_profile ctp ON ctp.nid=pn.nid
		
		/*
		JOIN content_field_first_name cffn ON cffn.nid=pn.nid
		JOIN content_field_last_name cfln ON cfln.nid=pn.nid
		JOIN content_field_city cfc ON cfc.nid=pn.nid
		JOIN content_field_state cfs ON cfs.nid=pn.nid
		*/

		/* stylist file */
		LEFT JOIN node sn ON sn.uid=u.uid AND sn.type="stylists_file"
		LEFT JOIN content_type_stylists_file ctsf ON ctsf.nid=sn.nid
		LEFT JOIN content_field_my_apts cfma ON cfma.nid=sn.nid
		LEFT JOIN node n1 on n1.nid=cfma.field_my_apts_nid
		LEFT JOIN content_field_areas_of_expertise cfae ON cfae.nid=sn.nid
		LEFT JOIN content_field_speciality cfs ON cfs.nid=sn.nid

		/* application file */
		LEFT JOIN node an ON an.uid=u.uid AND an.type="stylist_application"
		LEFT JOIN content_type_stylist_application cfsa ON cfsa.nid=an.nid
		LEFT JOIN files f ON cfsa.field_headshot_fid=f.fid

		LEFT JOIN node spn ON spn.uid=u.uid AND spn.type="preferences"
		LEFT JOIN content_field_style_icons cfsi ON cfsi.nid=spn.nid
		LEFT JOIN content_field_your_brands cfsb ON cfsb.nid=spn.nid
		LEFT JOIN content_field_your_shops cfss ON cfss.nid=spn.nid

		WHERE ctsf.field_status_value in ("Active","Active but inactive")
		'.(!empty($search['s_rate']) ? " AND cfsa.field_hourly_rate_1_value <= {$search['s_rate']}" : "").'
		'.(!empty($search['s_hours']) ? " AND cfsa.field_hours_of_experience_value >= {$search['s_hours']}" : "").'

		GROUP BY u.uid
		HAVING distance <= stylist_distance 
		ORDER BY RAND()'
	);
	/*	subu - last few lines of the above query - changed it to include the customizable search. 
		i.e. - A stylist can now provide her service radius.
	    
		GROUP BY u.uid
		HAVING distance <= %d and distance <=ctsf.field_travel_distance_value 
		ORDER BY RAND()
	', $search['s_radius']
	);
	*/

	$rows = array();
	while($row = db_fetch_object($result)) {

		$row->headshot = theme(
			'imagecache',
			'stylist_search',
			$row->filename
		);

		$rows[] = $row;

	}

	$num_of_results = 3;
	$total_results = 5;

	global $user;

	return array(
		'num_of_results' => count($rows),
		'total_results' => $total_results,
		'results' => $rows,
		'logged_in' => $user->uid
	);
}

function styleforhire_stylist_html($result, $stylist_num) {
		
	$apprentice_val="";
	$apprentice_txt=null;
	if($result->isApprentice == "Yes") {
			$apprentice_val="Apprentice";
			$apprentice_txt="<div class=\"apprentice_txt\">Style For Hire Apprentices are talented stylists who are gaining experience in our approach. We are pleased to offer these appointments at reduced rates. Money back guarantee does not apply.</div>";
		}
	if($result->status == "Active but inactive") {
			$apprentice_txt="<div class=\"apprentice_txt\">".$result->first_name." ".$result->last_name." is currently not accepting any new clients.</div>";
	}
	//setCookie('check_if_browser_cookies_enabled', 'true',time()+60*60);
	//if(!$_COOKIE['check_if_browser_cookies_enabled']){
	if($result->status == "Active"){
		if (!$_COOKIE['has_js']) { // If user's don't have cookies enabled, they can't book online(ubercart needs cookies) - they will have to call customer service to book appointments
		
							$book_data = '<div class="contactStylist"><br \>Book this Stylist:<br \>1.877.789.5307<br \>or enable cookies in your browser to continue with online booking.</div>';
						}
						else{
							$book_data = '<div class="contactStylist">'.l('Book this Stylist', 'book_appointment/'.$result->uid).'</div>';
							//setCookie('check_if_browser_cookies_enabled', '',1);
						}
		}
		else $book_data = '<br>';
	$output = '<div class="stylist" id="stylist_'.$stylist_num.'">'.
				'<div class="compare">
					<label>
					<input type="checkbox" name="compare_stylist_'.$stylist_num.'" onclick="show_column(this, '.$result->uid.')" id="compare_checkbox_'.$result->uid.'"> Compare
					</label>
				</div>'.
				'<div class="hide" onclick="hide(\'stylist_info_'.$stylist_num.'\');">
					Hide
				</div>'.
				'<div class="expand" onclick="show(\'stylist_info_'.$stylist_num.'\');">
					Expand
				</div>'.
				'<div class="stylist_info" id="stylist_info_'.$stylist_num.'">'.
					'<div class="headshot">'.
						'<a href="/stylist/'.$result->name.'">'.$result->headshot.'</a>'.
					'<div class="rate">PRICE: $'.
						$result->rate. //changed this from "rate"
					'/Hour</div>'.
					'</div>'.
					'<div class="stylist_name">'.
						l($result->first_name.' '.$result->last_name, 'stylist/'.$result->name ).
					'</div>'.
					'<div class="apprentice">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.
                        			$apprentice_val.
                    			'</div>'.
					/*'<div class="from">'.
						$result->city.' '.$result->state.
					'</div>'.*/
					$book_data.
					($apprentice_txt!=null?'<i>'.$apprentice_txt.'</i><br>':'').
					'<div class="intro">'.
						$result->intro.'<br><a href="/stylist/'.$result->name.'">Click here to learn more about '.$result->first_name.' '.$result->last_name.'.</a>'.
					'</div>'.
					'<div class="expertise">AREAS OF EXPERTISE: '.
						$result->expertise.
					'</div>'.
					($result->hours>0?'<div class="hours">HOURS OF PROFESSIONAL EXPERIENCE: '.$result->hours.'</div>':'').
					($result->my_appts!=null?'<div class="hours">SERVICES: '.str_replace(" (30 minutes)","",str_replace(" (1 garment per hour, 2 hour minimum)","",str_replace(" (Up to 40 garments per hour, minimum 2 hours)","",$result->my_appts))).'</div>':'').
				'</div>';
			'</div>';
						
	//var_dump("iam here  -line 4349 styleforhire.module");
	return $output;
}


function styleforhire_compare_stylists_table($results) {

	$rows = array(
		"NAME" => '
			<a href="/stylist/[uid]">[headshot]</a><br />
			<a href="/stylist/[uid]" class="compare_stylist_name">[first_name] [last_name]</a>
		',
		"PRICE" => "$[rate]/Hour",
		"AREA OF EXPERTISE" => "[expertise]",
		"DISTANCE" => "[distance] miles",
		"EXPERIENCE" => "[hours] Hours",
		"&nbsp;" => '<input type="button" value="Remove" onclick="remove_column([uid])"> <input type="button" value="Select" onclick="goto_stylist([uid])">'
	);

	$table = '<table class="compare_results_table">';

	foreach($rows as $row_name => $row_content) {

		$table .= "<tr><th>$row_name</th>";

		foreach($results as $result) {

			$search = array();
			$replace = array();

			foreach($result as $key => $value) {

				$search[] = '['.$key.']';
				$replace[] = $value;

				//var_dump($row_content, $key, $value);
			}

			$id = str_replace($search, $replace, 'column_[uid]_'.$row_name);
			$table .= '<td class="compare_column" id="'.$id.'">'.
						str_replace($search, $replace, $row_content).
						'</td>';
		}

		$table .= "</tr>";
	}

	$table .= "</table>";

	return $table;
}

function styleforhire_get_geocode($address, $city, $state, $zip) {

	$url = GOOGLE_GEOCODE_URL.
		"q=".urlencode((!empty($address)?"$address,":"").(!empty($state)?" $state,":"").(" $zip")).
		"&output=csv&sensor=false&key=".GOOGLE_MAPS_API_KEY;

	//vaR_dump($url);

	$response = file_get_contents($url);

	$response = explode(",", $response);

	return $response;	
}

function styleforhire_new_stylists($stylist_id) {

	$result = db_query('

		SELECT u.uid,
			ctp.field_first_name_value AS first_name,
			ctp.field_last_name_value AS last_name,
			sctp.field_first_name_value AS first_name,
			sctp.field_last_name_value AS last_name,
				round(((
				ACOS(
					SIN(sctp.field_latitude_value * PI() / 180) * 
					SIN(ctp.field_latitude_value * PI() / 180) +
					COS(sctp.field_latitude_value * PI() / 180) *
					COS(ctp.field_latitude_value * PI() / 180) *
					COS((sctp.field_longitude_value - ctp.field_longitude_value) * PI() / 180)
				) *
					180 / PI()
				) * 60 * 1.1515), 2) AS distance

		FROM users u

		/* client profile node */
		JOIN node pn ON pn.uid=u.uid AND pn.type="profile"
		JOIN users_roles ur ON ur.uid=u.uid AND ur.rid=4
		JOIN content_type_profile ctp ON ctp.nid=pn.nid

		/* stylist profile node */
		JOIN node spn ON spn.type="profile"
		JOIN users_roles ur2 ON ur2.uid=spn.uid AND ur2.rid=3
		JOIN content_type_profile sctp ON sctp.nid=spn.nid

		WHERE ctp.field_notify_new_stylists_value = "yes" AND spn.uid=%d
		HAVING distance <= 50
		ORDER BY u.uid
	', $stylist_id
	);

	$rows = array();

	while($row = db_fetch_array($result)) {

		$rows[] = $row;
	}

	return $rows;
}

function styleforhire_add_apt($product_nid, $apt_node, $price, $apt_details, $cart_id = NULL) {

	$cid = uc_cart_get_id();

	if ( is_null($cart_id)) {
		uc_cart_add_item(
			$product_nid,
			$qty = 1,
			array(
				"apt_node" => $apt_node,
				"apt_price" => $price,
				"cart_id" => md5(time()),
				"apt_details" => $apt_details
			),
			$cid
		);
	}
	else {

		$item = styleforhire_get_cart_apt($cart_id);

		uc_cart_remove_item(
			$item->nid,
			$cid,
			$item->data
		);

		styleforhire_add_apt($product_nid, $apt_node, $price, $apt_details);
	}
}

function styleforhire_get_cart_apt($cart_id) {

	$items = uc_cart_get_contents($cid);
	foreach($items as $item) {

		if ($item->data["cart_id"] == $cart_id) {

			return $item;

		}
	}

	return NULL;
}

function styleforhire_order($op, &$arg1, $arg2) {

	if ( $op == "update") {
/******	subu 10/24/2011- Bug. When the total $ value of gift certificates > order value, 
	*** it wont reach the if ( $arg1->order_status... loop. Therefore no emails are sent to 
	*** the stylists about the order.
	*** This is because 'payment_received' state is never reached in such a situation.
	*** Including the 'pending' state takes care of the situation when 
	*** total $ value of gift certificates > order value and therefore emails are sent to the stylists. 
******/
		if ( $arg1->order_status == "payment_received" || 
		     $arg1->order_status == "pending") {

			$result = db_query('
		
				SELECT uid FROM uc_orders WHERE order_id=%d

			', $arg1->order_id);

			$uid = db_result($result);

			$user = user_load(array('uid'=>$uid));

			foreach($arg1->products as $product) {

				if ( isset($product->data["attributes"]["Certificate Code"])) {

					if ( $product->data["attributes"]["Certificate Type"][0] == "Printable (you can print and mail or bring it to the recipient, if you want it to arrive on a specific date)") {

						db_query("
							UPDATE uc_gift_certificates ugc
							JOIN uc_orders uo ON ugc.order_id=uo.order_id
							SET ugc.user_id=48, ugc.purchaser_id=uo.uid
							WHERE cert_code='%s' /*AND (ugc.purchaser_id = 0 OR ugc.user_id=0)*/
						", $product->data["attributes"]["Certificate Code"]);


						styleforhire_build_email(
							'printable_gift_cert',
							$user->mail,
							$arg1->order_id
						);
					}
				}

				if ( isset($product->data["apt_node"])) {
			
					$node = $product->data["apt_node"];
					$node->uid = $user->uid;
					$node->status = 1;
					/*
					db_query('
						INSERT IGNORE INTO users_roles
						(uid, rid)
						VALUES(%d, 4)
					', $user->uid);
					*/
					//var_dump($user, $node);exit;

					node_save($node);

					$stylist = user_load(array('uid'=>$node->field_apt_stylist[0]['uid']));
					$personal_mail = styleforhire_user_personal_mail($node->field_apt_stylist[0]['uid']);
					//styleforhire_debug($personal_mail,'sending email to personal email about a new order');
						if($node->field_apt_status[0]['value'] != 'Confirmed'){// Don't send emails to stylist if she calls in and confirms. This if block doesn't get executed when Customer Service adds an appointment extension.
						styleforhire_build_email(
							'appt_notice_to_stylist',
							$stylist->mail,
							$node->nid
						);
						if(personal_mail != null){
								styleforhire_build_email(
									'appt_notice_to_stylist_personal_email',
									$personal_mail,
									$node->nid
								);
							}
						}
				}
			}
		}
	}
}

/*
function styleforhire_uc_cart_alter(&$items) {

	foreach($items as $item) {
    // Print out the item array for debugging purposes.
		if ( $item->data['attributes'][8] == 2) {
			unset($item->data['attributes'][6]);
		}
    drupal_set_message('<pre>'. print_r($item->data['attributes'], TRUE) .'</pre>');
  }
}
*/

/**
 * Theme the checkout review order page.
 *
 * @param $panes
 *   An associative array for each checkout pane that has information to add to
 *   the review page.  The key is the pane's title and the value is either the
 *   data returned for that pane or an array of returned data.
 * @param $form
 *   The HTML version of the form that by default includes the 'Back' and
 *   'Submit order' buttons at the bottom of the review page.
 * @return
 *   A string of HTML for the page contents.
 * @ingroup themeable
 */
function s4h_uc_cart_checkout_review($panes, $form) {

	if ( stripos($panes['Cart contents'][0], "Printable")) {

		$panes['Cart contents'][0] = preg_replace("/<li.*>Recipient.*Email[^<]*<\/li>/", "", $panes['Cart contents'][0]);
	}

	//var_dump($panes);

  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  $output = check_markup(variable_get('uc_checkout_review_instructions', uc_get_message('review_instructions')), variable_get('uc_checkout_review_instructions_format', FILTER_FORMAT_DEFAULT), FALSE)
           .'<table class="order-review-table">';

  foreach ($panes as $title => $data) {
    $output .= '<tr class="pane-title-row"><td colspan="2">'. $title
              .'</td></tr>';
    if (is_array($data)) {
      foreach ($data as $row) {
        if (is_array($row)) {
          if (isset($row['border'])) {
            $border = ' class="row-border-'. $row['border'] .'"';
          }
          else {
            $border = '';
          }
          $output .= '<tr valign="top"'. $border .'><td class="title-col" '
                    .'nowrap>'. $row['title'] .':</td><td class="data-col">'
                   . $row['data'] .'</td></tr>';
        }
        else {
          $output .= '<tr valign="top"><td colspan="2">'. $row .'</td></tr>';
        }
      }
    }
    else {
      $output .= '<tr valign="top"><td colspan="2">'. $data .'</td></tr>';
    }
  }

  $output .= '<tr class="review-button-row"><td colspan="2">'. $form
            .'</td></tr></table>';

  return $output;
}

/**
 * Add markup and styling to the checkout panes.
 *
 * @ingroup themeable
 * @see uc_cart_checkout_form()
 */
function s4h_uc_cart_checkout_form($form) {

	if ( stripos($form['panes']['cart']["cart_review_table"]['#value'], "Printable")) {

		$form['panes']['cart']["cart_review_table"]['#value'] = preg_replace("/<li.*>Recipient.*Email[^<]*<\/li>/", "", $form['panes']['cart']["cart_review_table"]['#value']);
	}

  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  $output = '<div id="checkout-instructions">'. check_markup(variable_get('uc_checkout_instructions', ''), variable_get('uc_checkout_instructions_format', FILTER_FORMAT_DEFAULT), FALSE) .'</div>';

  foreach (element_children($form['panes']) as $pane_id) {
    if (function_exists(($func = _checkout_pane_data($pane_id, 'callback')))) {
      $result = $func('theme', $form['panes'][$pane_id], NULL);
      if (!empty($result)) {
        $output .= $result;
        $form['panes'][$pane_id] = array();
      }
      else {
        $output .= drupal_render($form['panes'][$pane_id]);
      }
    }
    else {
      $output .= drupal_render($form['panes'][$pane_id]);
    }
  }

  $output .= '<div id="checkout-form-bottom">'. drupal_render($form) .'</div>';

  return $output;
}

function s4h_uc_cart_view_form($form) {

  drupal_add_css(drupal_get_path('module', 'uc_cart') .'/uc_cart.css');

  foreach (element_children($form['items']) as $i) {

	if ( isset($form['items'][$i]['nid'])) {

		$data = unserialize($form['items'][$i]['data']['#value']);

		if ( isset($data['attributes']['8']) AND
				$data['attributes']['8'] == 2) {

			$form['items'][$i]['desc']['#value'] = preg_replace("/<li.*>Recipient.*Email[^<]*<\/li>/", "", $form['items'][$i]['desc']['#value']);
			
			//dsm($test);
		}

		if ( isset($data['apt_node'])) {

			//var_dump($form['items']);
			//dsm($form['items'][$i]);

			$form['items'][$i]['desc']['#value'] = preg_replace(
				"/<a[^>]*>([^<]*)<\/a>/",
				"<a href='book_appointment/".$data['apt_node']->field_apt_stylist[0]['uid']."/{$data['cart_id']}'>\\1</a>",
				$form['items'][$i]['desc']['#value']
			);
		}
		//dsm($data);
		//dsm($form['items'][$i]);
	}



	 //var_dump($form['items'][$i]);
    //$form['items'][$i]['desc']['#value'] = "steve";
  }

  $output = '<div id="cart-form-products">'
          . drupal_render($form['items']) .'</div>';

  foreach (element_children($form['items']) as $i) {
    foreach (array('title', 'options', 'remove', 'image', 'qty') as $column) {
      $form['items'][$i][$column]['#printed'] = TRUE;
    }
    $form['items'][$i]['desc']['#value'] = $desc;
    $form['items'][$i]['#printed'] = TRUE;
  }

  // Add the continue shopping element and cart submit buttons.
  if (($type = variable_get('uc_continue_shopping_type', 'link')) != 'none') {
    // Render the continue shopping element into a variable.
    $cs_element = drupal_render($form['continue_shopping']);

    // Add the element with the appropriate markup based on the display type.
    if ($type == 'link') {
      $output .= '<div id="cart-form-buttons"><div id="continue-shopping-link">'
               . $cs_element .'</div>'. drupal_render($form) .'</div>';
    }
    elseif ($type == 'button') {
      $output .= '<div id="cart-form-buttons"><div id="update-checkout-buttons">'
               . drupal_render($form) .'</div><div id="continue-shopping-button">'
               . $cs_element .'</div></div>';
    }
  }
  else {
    $output .= '<div id="cart-form-buttons">'. drupal_render($form) .'</div>';
  }

  return $output;
}

function styleforhire_cart_item($op, $item) {

	if ( $op == "load") {

		//var_dump($item);

		if ( isset($item->data['apt_price'])) {

			$item->price = $item->data['apt_price'];
		}

		/*
		if ( isset($item->data['gift_price'])) {

			$item->price = $item->data['gift_price'];
		}
		*/
	}

	if ( $op == "remove") {
		//var_dump("REMOVE");
		/*
		$item->data = unserialize($item->data);
		$node = node_load($item->data["apt_nid"]);

		if ( $node->status == 0 ) {
			node_delete($item->data["apt_nid"]);
		}
		*/
	}
}



/*

function styleforhire_add_gift_cert($gift_cert_nid, $price) {

	$cid = uc_cart_get_id();

	uc_cart_add_item(
		81,
		$qty = 1,
		array(
			"gift_cert_nid" => $gift_cert_nid,
			"gift_price" => $price
		),
		$cid
	);
}

function styleforhire_checkout_pane() {



  $panes[] = array(
    'id' => 'gift_cert',
    'callback' => 'styleforhire_gift_cert_page',
    'title' => t('Gift Certificate'),
    'desc' => t('Specify and collect payment for an order.'),
    'weight' => 4,
    'process' => TRUE
  );
  return $panes;
}
*/
/**
 * Implementation of hook_line_item()
 */

 /*
function styleforhire_line_item() {

  $items[] = array(
    'id' => 'gift_certificate',
    'title' => t('Gift Certificates'),
    'weight' => 10,
    'stored' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'add_list' => TRUE,
  );
  return $items;
}
*/

/**
 * Callback function for the discount line item.
 */

 /*
function styleforhire_line_item_discount($op, $order) {

var_dump($op, $order);

  drupal_set_message('in discount');
  switch ($op) {
    case 'load':
      $discounts = uc_gift_certificate_calculate_discounts($order);
      $lines = array();
      foreach ($discounts as $discount) {
        $lines[] = array(
          'id' => 'discount',
          'title' => $discount['title'],
          'amount' => $discount['amount'],
          'weight' => variable_get('uc_li_discount_weight', 5),
        );
      }
      return $lines;
  }
}
*/

/*
function styleforhire_gift_cert_page($op, &$arg1, $arg2) {

	//var_dump($op, $arg1, $arg2);

	switch ($op) {
		case 'view':

			$description = t('Enter a Gift Certificate for this order.');
			$contents['certificate_code'] = array(
			'#type' => 'textfield',
			'#title' => t('Coupon code'),
			'#default_value' => $arg1->data['certificate_code'],
			'#size' => 25,
			);
			return array('description' => $description, 'contents' => $contents);
	    case 'process':
	
			$result = db_query("
			
				SELECT *
				FROM `content_type_gift_cert`
				WHERE field_gift_promo_code_value = '%s'

			", $arg2["certificate_code"]);

			if ( ! empty($arg2["certificate_code"])) {

				$result = db_fetch_object($result);

				if ( empty($result)) {

					drupal_set_message('That Gift Certificate Code does not exist in our system.', 'error');
					return FALSE;
				}
				elseif ( $result->field_remaining_value_value <= 0 ) {

					drupal_set_message('That Gift Certificate has already been used.', 'error');
					return FALSE;
				}

				$arg1->data['certificate_code'] = $arg2['certificate_code'];
			}
			
			



	}
}
*/

//attribute-6

function styleforhire_lookbook($node, $op) {

	if ( $node->type == "lookbook") {

		if ( $op == "presave") {

			$node->field_lookbook_best_colors[0]['value'] = $node->selected_colors;

			/* sizes */
			$fields = array(
				"field_lookbook_store",
				"field_lookbook_tops",
				"field_lookbook_pants",
				"field_lookbook_dresses",
				"field_lookbook_skirts",
				"field_lookbook_shoes"
			);

			$sizes = array();

			for($i=0; $i<NUM_OF_SIZES; $i++) {

				if ( $node->{'delete_size_'.$i}) { continue; }

				foreach($fields as $field) {

					$variable = $field.'_'.$i;
					$node_var = $node->$variable;
					$value = $node_var[0]['value'];
					$sizes[$field][] = $value;

					unset($node->$variable);
				}
			}

			//var_dump($sizes);

			foreach($fields as $field) {
				
				$node->{$field}[0]['value'] = serialize($sizes[$field]);
			}

			//var_dump($node);
			//exit;

			/* recommendations */

			$fields = array(
				"field_lookbook_rec_description",
				"field_lookbook_rec_comments",
				"field_lookbook_type",
				"field_lookbook_color",
				"field_lookbook_style"
			);

			$sizes = array();

			for($i=0; $i<NUM_OF_SIZES; $i++) {

				if ( $node->{'delete_shopping_'.$i}) { continue; }

				foreach($fields as $field) {

					$variable = $field.'_'.$i;
					$node_var = $node->$variable;
					//var_dump($node_var);
					$value = $node_var[0]['value'];
					//var_dump($value);
					$sizes[$field][] = $value;

					unset($node->$variable);
				}
			}

			foreach($fields as $field) {

				$node->{$field}[0]['value'] = serialize($sizes[$field]);
			}

			//var_dump($node);exit;
		}
	}

	if ( $op == "prepare" AND $node->type == "lookbook" ) {
		
		global $user;

		if ( isset($user->roles[3])) {

			$clients = styleforhire_stylist_myclients($user->uid);

			$uids = array();
			foreach($clients as $client) {
				$uids[] = $client['uid'];
			}
		}

		if ( $user != 1 AND $user->uid != $node->uid AND ! in_array($node->uid, $uids)) {

			drupal_access_denied();
			exit;

		}
	}
}

function styleforhire_color_selector($colors, $type) {

	$output = '<div class="color-selector">';

	$output .= '<table><tr>';
	$row = 0;
	$column = 0;
	foreach($colors as $color) {

		$output .= "
			<td style='padding: 5px; margin: 5px;'>
				<div id='".$type."_".trim($color,'#')."' style='height: 25px; width: 25px; background-color: $color' class='color-selector'> &nbsp; &nbsp; 
				</div>
			</td>";

		$column++;
		if ( $column == 6) {
			
			$column = 0;
			$row++;
			$output .= "</tr><tr>";
		}
	}
	$output .= '</tr></table>';

	$output .= '</div>';
	
	return $output;
}

function styleforhire_color_palette($selected) {

		drupal_add_js(drupal_get_path('module', 'styleforhire').'/lookbook-select.js');
		drupal_add_css(drupal_get_path('module', 'styleforhire').'/lookbook.css');

	$colors = array( 0 => '#000000', 1 => '#003455', 2 => '#361171', 3 => '#8E4803', 4 => '#A50051', 5 => '#5B595A', 6 => '#277AA4', 7 => '#745DA3', 8 => '#DC6D01', 9 => '#DA3786', 10 => '#B9B7B8', 11 => '#A1C1D0', 12 => '#B5AACA', 13 => '#E9C29B', 14 => '#F7DDEA', 15 => '#4B3625', 16 => '#1D5001', 17 => '#771D02', 18 => '#B39B03', 19 => '#1DFF05', 20 => '#867362', 21 => '#67954D', 22 => '#AE2E00', 23 => '#DECE55', 24 => '#FF5F0A', 25 => '#C4B1A2', 26 => '#AEC99E', 27 => '#F3B096', 28 => '#E9E09D', 29 => '#FFDF01');

	return '
			<div id="best-colors"><h3>Best Colors:</h3>'.
				styleforhire_color_selector($colors, 'best').'
				<table id="selected_best_colors" class="selected_colors">
					<tr>
						<td><div id="best_0"> &nbsp; &nbsp; </div></td>
						<td><div id="best_1"> &nbsp; &nbsp; </div></td>
						<td><div id="best_2"> &nbsp; &nbsp; </div></td>
						<td><div id="best_3"> &nbsp; &nbsp; </div></td>
						<td><div id="best_4"> &nbsp; &nbsp; </div></td>
						<td><div id="best_5"> &nbsp; &nbsp; </div></td>
					</tr>
				</table>
			</div>
			<div id="worst-colors"><h3>Worst Colors:</h3>'.
				styleforhire_color_selector($colors, 'worst').'
				<table id="selected_best_colors" class="selected_colors">
					<tr>
						<td><div id="worst_0"> &nbsp; &nbsp; </div></td>
						<td><div id="worst_1"> &nbsp; &nbsp; </div></td>
						<td><div id="worst_2"> &nbsp; &nbsp; </div></td>
						<td><div id="worst_3"> &nbsp; &nbsp; </div></td>
						<td><div id="worst_4"> &nbsp; &nbsp; </div></td>
						<td><div id="worst_5"> &nbsp; &nbsp; </div></td>
					</tr>
				</table>
			</div>

			<script>
				$(document).ready(
					function() {
					preselect_colors("'.$selected.'");
				});
			</script>
		';
}

function styleforhire_lookbook_editform(&$form, &$form_state, $form_id) {

	if ( $form_id == "lookbook_node_form") {

		if ( empty($form['#node']->field_lookbook_best_colors[0]['value'])) {

			$form['#node']->field_lookbook_best_colors[0]['value'] = '-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,';
		}

		$colors = explode("\n", $form["#field_info"]["field_lookbook_best_colors"]["allowed_values"]);
		
		//var_dump($colors);

		drupal_add_js(drupal_get_path('module', 'styleforhire').'/lookbook.js');
		drupal_add_css(drupal_get_path('module', 'styleforhire').'/lookbook.css');

		$form["group_lookbook_colors"]["field_lookbook_best_colors"]["#attributes"]['style'] = 'display: none';
		$form["group_lookbook_colors"]["selected_colors"] = array(
			'#title' => 'Selected Color',
			'#type' => 'hidden',
			'#name' => 'selected_colors',
			'#suffix' => styleforhire_color_palette(
				$form['#node']->field_lookbook_best_colors[0]['value']
			)
		);



		//var_dump($form);

		//var_dump(styleforhire_color_selector($colors));

		unset($form["group_lookbook_colors"]["field_lookbook_best_colors"]);
		unset($form["group_lookbook_colors"]["field_lookbook_worst_colors"]);

		//$form["group_lookbook_colors"][] = array("#suffix" => "fsdfs");

		//var_dump();

		//var_dump($form["group_lookbook_sizes"]);

		$sizes = $form["group_lookbook_sizes"];
	
		$fields = array(
			"field_lookbook_store",
			"field_lookbook_tops",
			"field_lookbook_pants",
			"field_lookbook_dresses",
			"field_lookbook_skirts",
			"field_lookbook_shoes"
		);

		$dynamic_sizes = array();

		for($i=0; $i < NUM_OF_SIZES; $i++) {

			$size_form = $sizes;
			$empty = true;

			foreach($fields as $field) {

				$defaults = unserialize($form["#node"]->{$field}[0]['value']);

				$size_form[$field.'_'.$i] = $size_form[$field];
				$size_form[$field.'_'.$i]['#default_value'][0]['value'] = $defaults[$i];
				unset($size_form[$field]);
				if ( ! empty($defaults[$i])) {

					$empty = false;
				}
			}

			$form["group_lookbook_sizes_".$i] = $size_form;
			$form["group_lookbook_sizes_".$i]['#attributes']['id'] = "group_lookbook_sizes_".$i;
			$form["group_lookbook_sizes_".$i]['#weight'] += ($i*0.01);
			$form["group_lookbook_sizes_".$i]['delete_size_'.$i] = array(
				'#title' => 'Delete',
				'#type' => 'checkbox',
				'#name' => 'delete_size_'.$i,
				'#weight' => 99
			);

			if ( $i != (NUM_OF_SIZES-1)) {
				$form["group_lookbook_sizes_".$i]['delete_size_'.$i]["#suffix"] = '<a id="add_another_link" href="javascript:fadeIn(\'group_lookbook_sizes_'.($i+1).'\');">Add Another Brand >></a>';
			}

			if ( $i > 0 AND $empty) {
				$form["group_lookbook_sizes_".$i]['#attributes']['style'] = 'display: none';
			}

			unset($form["group_lookbook_sizes"]);
		}

		//var_dump($form);exit;
		
		$defaults = '';
		$sizes = $form["group_lookbook_shopping"];
	
		$fields = array(
			"field_lookbook_rec_description",
			"field_lookbook_rec_comments",
			"field_lookbook_type",
			"field_lookbook_color",
			"field_lookbook_style"
		);

		$dynamic_sizes = array();

		//var_dump($form);exit;

		for($i=0; $i < NUM_OF_SIZES; $i++) {

			$size_form = $sizes;
			$empty = true;

			foreach($fields as $field) {
	
				//var_dump(unserialize($form["#node"]->{$field}[0]['value']));

				$defaults = unserialize($form["#node"]->{$field}[0]['value']);

				//var_dump($defaults);exit;
				unset($size_form[$field.'_'.$i]['#default_value'][0]['value']);
				unset($size_form[$field.'_'.$i][0]['#default_value']['value']);
				$size_form[$field.'_'.$i] = $size_form[$field];
				$size_form[$field.'_'.$i]['#default_value'][0]['value'] = $defaults[$i];
				$size_form[$field.'_'.$i][0]['#default_value']['value'] = $defaults[$i];
				//var_dump($field.'_'.$i, $size_form[$field.'_'.$i]);
				//exit;
				unset($size_form[$field]);
				
				if ( ! empty($defaults[$i])) {

					//var_dump($i, $defaults[$field][$i]);
					$empty = false;
				}
			}

			$form["group_lookbook_shopping_".$i] = $size_form;
			$form["group_lookbook_shopping_".$i]['#attributes']['id'] = "group_lookbook_shopping_".$i;
			$form["group_lookbook_shopping_".$i]['#weight'] += ($i*0.01);
			$form["group_lookbook_shopping_".$i]['delete_shopping_'.$i] = array(
				'#title' => 'Delete',
				'#type' => 'checkbox',
				'#name' => 'delete_shopping_'.$i,
				'#weight' => 99
			);

			if ( $i != (NUM_OF_SIZES-1)) {
				$form["group_lookbook_shopping_".$i]['delete_shopping_'.$i]["#suffix"] = '<a id="add_another_link" href="javascript:fadeIn(\'group_lookbook_shopping_'.($i+1).'\');">Add another recommendation >></a>';
			}

			if ( $i > 0 AND $empty) {
				$form["group_lookbook_shopping_".$i]['#attributes']['style'] = 'display: none';
			}

			//var_dump($form);exit;

			unset($form["group_lookbook_shopping"]);
		}
	
	
	}
}

function styleforhire_nodeapi(&$node, $op, $arg3, $arg4) {

	styleforhire_lookbook($node, $op);
//var_dump("balhasdf");
 //var_dump($node);
 //var_dump($op);
//var_dump($arg3);
 //var_dump($arg4);
 //$curr_uri = check_plain(request_uri());
 //var_dump($op);
 //var_dump($node->type);
 /*if(user_access("delete any appointment content")){
	var_dump("can delete appnts");
	}
	else{ 
	var_dump("cant delete appnts");
	}*/
  
    if($node->type == "event" && $op == "insert"){
	//var_dump($op);
		drupal_goto("dashboard","");
	}

	if ( $op == "view" AND ($node->type == "appointment" OR $node->type == "complaint")) {

		global $user;
		
		if ( ! (isset($user->roles[7]) OR 
				isset($user->roles[8]) OR 
				isset($user->roles[9]))AND 
						($user->uid != 1 AND 
						 $node->uid != $user->uid AND 
						 $node->field_apt_stylist[0]["uid"] != $user->uid) 
						 ) {

		//var_dump("SDFSD"); 
			//var_dump($node);
			$curr_uri = check_plain(request_uri());
			$feedback = $_GET['type'];
			//var_dump($feedback);
			/*if(isset($feedback)){
				$dest = drupal_get_destination();
				drupal_goto('user/login', $dest); 
			}*/
			if(! (isset($feedback) OR 
				 (strcmp('/comment/reply/'.$node->nid,$curr_uri) == 0))){
				//drupal_access_denied(); Do nothing....this is troubling
			}
			//exit;
		}
		//var_dump("hfdfgd");
		//var_dump($node);
		//exit;
	}


	if ( $op == "prepare" AND $node->type == "appointment") {

		global $user;
		
		if ( empty($user->roles) OR
		    isset($user->roles[4]) OR //if client
		    isset($user->roles[3]) OR //if stylist
		    isset($user->roles[1])) { //if anonymous user

			drupal_access_denied();
			exit;
		}

	}

	$cid = uc_cart_get_id();
	
	/*
	if ( $node->type == "gift_cert") {

		if ( $op == "insert") {

			$node->field_gift_promo_code[0]['value'] = "S4H-".$node->nid."-".strtoupper(substr(md5(time().$node->nid), 0, 8));

			$node->field_remaining_value[0]['value'] = $node->field_gift_value[0]['value'];

			node_save($node);
		}
	}
	*/

	if ( $node->type == "profile") {

		if ( $op == "presave") {

			$data = styleforhire_get_geocode(
				$node->field_address1[0]['value'], 
				$node->field_city[0]['value'],
				$node->field_state[0]['value'],
				$node->field_zip[0]['value']
			);

			$node->field_latitude[0]['value'] = $data[2];
			$node->field_longitude[0]['value'] = $data[3];
		}
	}

	if ( $node->type == "stylists_file") {

		if ( $op == "presave") {

			if ( $node->field_status[0]["value"] == "Active") {

				$result = db_query("
					SELECT 1
					FROM content_type_stylists_file ctsf
					JOIN node n ON ctsf.nid=n.nid
					WHERE ctsf.field_status_value != 'Active' AND n.uid = %d	
				", $node->uid
				);

				$went_active = db_result($result);

				if ( $went_active) {

					$email_clients = styleforhire_new_stylists($node->uid);
					//svar_dump($email_clients);
				}
			}

			//var_dump($node);
		
		}
	}

	if ( $node->type == "appointment" AND $op == 'presave') {
        
		$current_node = node_load($node->nid);

		if ( $current_node->field_apt_status[0]['value'] != $node->field_apt_status[0]['value']) {
		// SUBU - THIS BIG IF STATEMENT IS ACCESSED when an order gets completed.(may be when the cron is run?)
			if ( $node->field_apt_status[0]['value'] == "Completed" and
				 (	$node->field_apt_type[0]['nid'] != 107 or // dont send a COMPLETED email if its Stylist Introduction
					$node->field_apt_type[0]['nid'] != 578 or // dont send a COMPLETED email if its Custom Appointment ( this is for demo server)
					$node->field_apt_type[0]['nid'] != 2261)) { // dont send a COMPLETED email if its Custom Appointment.( this is for prod server)

				$user = user_load(array('uid'=>$node->uid));

				styleforhire_build_email(
					'reminder_rate_stylist',
					$user->mail,
					$node->nid
				);
			}

			if ( $node->field_apt_status[0]['value'] == "Confirmed" and
				(	$node->field_apt_type[0]['nid'] != 578 or // dont send a CONFIRMATION email if its Custom Appointment ( this is for demo server)
					$node->field_apt_type[0]['nid'] != 2261)) { // dont send a CONFIRMATION email if its Custom Appointment.( this is for prod server)
				$user = user_load(array('uid'=>$node->uid));
				styleforhire_build_email(
					'appt_confirmed_notice_to_client',
					$user->mail,
					$node->nid
				);
			}

			global $user;

			//$user = user_load(array('uid'=>$node->uid));
			if ( $user->uid == $node->uid AND $node->field_apt_status[0]['value'] == "Canceled") {

				styleforhire_build_email(
					'notice_client_cancel',
					$user->mail,
					$node->nid
				);
			} elseif ( $node->field_apt_status[0]['value'] == "Canceled") {

				styleforhire_build_email(
					'notice_stylist_cancel',
					$user->mail,
					$node->nid
				);
			}
		}



		/*if ( $node->fi

		styleforhire_build_email(
			'printable_gift_cert',
			$user->mail,
			$arg1->order_id
		);
		*/
	}
	
	if ( $node->type == "appointment") {
		
		/*
		if ($op == "insert") {

			//var_dump($node);

			styleforhire_add_apt(
				$node->field_apt_type[0]['nid'],
				$node->nid,
				$node->field_apt_price[0]['value']
			);
		}
		*/
		/*
		if ($op == "update") {

			$items = uc_cart_get_contents($cid);
			foreach($items as $item) {

				if ($item->data["apt_nid"] == $node->nid) {

					uc_cart_remove_item(
						$item->nid,
						$cid,
						$item->data
					);
				}
			}

			styleforhire_add_apt(
				$node->field_apt_type[0]['nid'],
				$node->nid,
				$node->field_apt_price[0]['value']
			);
		}

		if ($op == "delete") {

			$items = uc_cart_get_contents($cid);
			foreach($items as $item) {

				if ($item->data["apt_nid"] == $node->nid) {

					uc_cart_remove_item(
						$item->nid,
						$cid,
						$item->data
					);
				}
			}
		}
		*/
	}

	if ( $node->type == "gift_cert") {

				//var_dump($node);

		if ($op == "insert") {

			styleforhire_add_gift_cert(
				$node->nid,
				$node->field_gift_value[0]['value']
			);
		}

		if ($op == "update") {

			$items = uc_cart_get_contents($cid);
			foreach($items as $item) {

				if ($item->data["gift_cert_nid"] == $node->nid) {

					uc_cart_remove_item(
						$item->nid,
						$cid,
						$item->data
					);
				}
			}

			styleforhire_add_gift_cert(
				$node->nid,
				$node->field_gift_value[0]['value']
			);
		}

		if ($op == "delete") {

			$items = uc_cart_get_contents($cid);
			foreach($items as $item) {

				if ($item->data["gift_cert_nid"] == $node->nid) {

					uc_cart_remove_item(
						$item->nid,
						$cid,
						$item->data
					);
				}
			}
		}
	}
}

function styleforhire_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'uc_cart_checkout_form'){ //subu - to change the description so that it doesn't show login information
		$form['panes']['customer']['#description']= t('Enter a valid email address for this order');
	}
	if ( $form_id == 'complaint_node_form') {

		$form['field_appt_complaint']['#default_value'][0]['nid'] = arg(3);
	}

	styleforhire_lookbook_editform(&$form, &$form_state, $form_id); 

	if ( $form_id == "profile_node_form") {

		unset($form["field_latitude"]);
		unset($form["field_longitude"]);
	}

	if ( $form_id == 'appointment_node_form') {

		global $user;
/*
		if ( isset($user->roles[4])) {

			foreach($form as $type => $object) {
			if ( substr($type, 0, 5) == 'field' AND $type != 'field_apt_status') {
				unset($form[$type]);
			}
				//var_dump($type);
			}
		}
*/
		if ( ! isset($user->roles[9])) {

			unset($form['field_notes']);
		}
	}

	if ( stripos($form_id, 'uc_product_add_to_cart_form') !== FALSE) {

/*
		foreach($form["attributes"] as $key=> $attr) {

			if ( $attr['#title'] == "Message To Recipient") {

				$attr['#type'] = 'textfield';
				$attr['#description'] = '128 Max Characters';
				$attr['#maxlength'] = 128;

				$form["attributes"][$key] = $attr;
			}
		}
*/
		if ( stripos($form["node"]["#value"]->title, 'Gift Certificate')) {

			$form['attributes'][8]['#default_value'] = 1;

			$form['attributes'][8]['#attributes'] = array(
				'onclick' => '
					
					if (this.value == 2) {

						$(".attribute-6").attr("style", "display: none");
						$("#edit-attributes-6").val("giftcert@styleforhire.com");

					}
					else {

						$(".attribute-6").attr("style", "");
						$("#edit-attributes-6").val("");
					}
				'
			);

			$form['submit']['#attributes']['onclick'] = '

				//alert($("#edit-attributes-6").val());
				return validate($("#edit-attributes-6").val());
			';

			//var_dump($form);

			//var_dump($form['attributes'][8]);
			//var_dump($form['attributes']->8);
		}
		
	}
	
}


function styleforhire_views_query_alter($view, &$query) {

//users_node_data_field_apt_stylist.uid = ***CURRENT_USER***

	if ( $view->name == 'stylist_calendar') {

		$query->where[0]['clauses'][1] = '
		
			(users_node_data_field_apt_stylist.uid = ***CURRENT_USER*** OR (node.type = "event" AND node.uid = ***CURRENT_USER***))
		
		';
	}
}
/*
	if ( $form_id == 'gift_cert_node_form') {

		unset($form['field_gift_promo_code']);
		unset($form['field_remaining_value']);
	}

	if ( $form_id == "uc_cart_view_form") {
		

	}
}
*/
/*
function _appointment_after_build($form, &$form_state) {

	$form["field_apt_stylist"]['uid']['uid']['#default_value'] = 4;
	$form["field_apt_stylist"]['#attributes']["#default_value"] = 4;
	$form["field_apt_stylist"]['uid']["#default_value"][0]['uid'] = 4;
	$form["field_apt_stylist"]['uid']["#value"][0]['uid'] = 4;

	$form["field_apt_price"]['value']['#default_value'] = 4;
	var_dump($form["field_apt_price"]['value']);

	return $form;
}
*/

function styleforhire_confirm_appointment($nid,$uid) {
	global $user;
	if($user->uid === $uid){
		$node = node_load($nid);
		$node->nid = $nid;
		$node->vid = $nid; //note that I will have to provide $node->vid to update a node
		$node->field_apt_status[0]['value'] = "Confirmed";
		node_save($node);
		drupal_goto('dashboard');
	}
	else{
		drupal_access_denied();
		exit;
	}
	
	return true;
}
function styleforhire_remove_special_customers($uid,$recid,$table){
	if($table == 0) db_query("DELETE FROM stylist_special_rate WHERE id=%d and StylistID=%d",$recid,$uid);
	else db_query("DELETE FROM customers_outside_s4h WHERE id=%d and Stylist_id=%d",$recid,$uid);
	drupal_goto('dashboard/'.$uid);
}
function styleforhire_complete_appointment($nid,$uid) {
	global $user;
	if($user->uid === $uid){
		$node = node_load($nid);
		$node->nid = $nid;
		$node->vid = $nid; //note that I will have to provide $node->vid to update a node
		$node->field_apt_status[0]['value'] = "Completed";
		node_save($node);
		drupal_goto('dashboard');
	}
	else{
		drupal_access_denied();
		exit;
	}
	
	return true;
}

function styleforhire_bookappointment_step3($rate) {
	$output = '';
	//styleforhire_debug('in here','styleforhire_bookappointment_step3');
	$uid = $_POST['stylist_uid'];
	$appt_types = styleforhire_get_appointment_types();
	$form_state['storage']['values'][2] = array(
		'stylist_introduction_info' => $_POST['stylist_introduction_info'],
		'closet_audit_info' => $_POST['closet_audit_info'],
		'closet_shopping_info' => $_POST['closet_shopping_info'],
		'personal_shopping_with_info' => $_POST['personal_shopping_with_info'],
		'personal_shopping_for_info' => $_POST['personal_shopping_for_info'],
	); 
	
	/*var_dump($uid);
	var_dump($rate);
	var_dump($appt_types);
	*/
	
	$output .= '<p>';
	$output .= styleforhire_get_apt_recap_step3($form_state, $rate, $appt_types, $uid, $requested_date, $comments = NULL);
	$output .= '</p>';
	//styleforhire_debug($output,"output");
	echo $output;
}

/* Subu to redirect a client to the <front> page after logging in */
function styleforhire_user($op,&$edit,&$account, $category = NULL){

	//$previous_page = $_GET['q'];
	//var_dump($previous_page);
	/*if(isset($_SESSION['uc_cart_id'])){
		var_dump($_SESSION['uc_cart_id']);
		var_dump(uc_cart_get_total_qty($_SESSION['uc_cart_id']));
		}*/
	if($account->roles != null){
	switch($op){
		case 'login':
			if(	in_array('Stylist',$account->roles) ||
				in_array('District Manager',$account->roles) ||
				in_array('Customer Service',$account->roles) ||
				in_array('Corporate',$account->roles) ||
				in_array('Administrator',$account->roles)){
					$_REQUEST['destination'] = 'dashboard';
			}
			else{ 
				if($_GET['destination'] == 'redeem'){
					$_REQUEST['destination'] = 'redeem';
					break;
				}
				if(!isset($_SESSION['checkout-redirect'])){ //subu - found this in uc-cart.pages.inc file
					$_REQUEST['destination'] = '';
					}
				else {$_REQUEST['destination'] = 'cart/checkout';
				}
			}
			break;
		case 'register':
			if(	in_array('Stylist',$account->roles) ||
				in_array('District Manager',$account->roles) ||
				in_array('Customer Service',$account->roles) ||
				in_array('Corporate',$account->roles) ||
				in_array('Administrator',$account->roles)){
					$_REQUEST['destination'] = 'dashboard';
			}
			else{ 
				if($_GET['destination'] == 'redeem'){
					$_REQUEST['destination'] = 'redeem';
					break;
				}
				if(!isset($_SESSION['checkout-redirect'])){
					$_REQUEST['destination'] = '';
					}
				else {$_REQUEST['destination'] = 'cart/checkout';
				}
			}

			break;
	}
	}

}

function styleforhire_debug($data, $label = NULL) {
 if ($label) {
    $out = $label . ': ' . $data;
  }
  else {
    $out = $data;
  }
  $out .= "\n";

  $file = './styleforhire_debug.txt';
  if (file_put_contents($file, $out, FILE_APPEND) === FALSE) {
    drupal_set_message(t('The file could not be written.'), 'error');
    return FALSE;
  }
}

function stylist_add_non_sfh_customers_form($form_state, $uid){
	$form['f_name'] = array(
							'#type' => 'textfield',
							'#size' => 15,
						);
	$form['l_name'] = array(
							'#type' => 'textfield',
							'#size' => 15,
						);
	$form['phone'] = array(
							'#type' => 'textfield',
							'#size' => 15
						);
	$form['email'] = array(
							'#type' => 'textfield',
							'#size' => 15
						);
	$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Add'),
	);
  return $form;
}
function stylist_add_non_sfh_customers_form_submit($form, &$form_state) {
	$fname = $form_state['values']['f_name'];
	$lname = $form_state['values']['l_name'];
	$phone = $form_state['values']['phone'];
	$email = $form_state['values']['email'];
	$uid = $form_state['values']['uid'];
	/*styleforhire_debug($uid,"uid");
	styleforhire_debug($phone,"phone");
	styleforhire_debug($fname,"fname");
	styleforhire_debug($lname,"lname");
	styleforhire_debug($email,"email");*/

	db_query("INSERT INTO {customers_outside_s4h} (Stylist_id, First_Name, Last_Name, Phone, Email, Created_Date)
			VALUES (%d, '%s', '%s', '%s', '%s', %d)", $uid, $fname, $lname, $phone, $email, time());
 }

function theme_stylist_add_non_sfh_customers_form($form) {
   $output = '<div><b>If you would like to bring your existing clients into Style for Hire to reduce administrative costs and hassle, provide a higher level of service and earn additional income from our partnerships, please enter their information here to associate them with the discounted commission structure.</b></div>';
   $output .= 	'<table id="tb-fname-lname">'.
 				'<tr><td valign="top">First Name</td><td>Last Name</td></tr>'.
 				'<tr><td valign="top">'.
 				drupal_render($form['f_name']).
 				'</td><td valign="top">'.
 				drupal_render($form['l_name']).
				'</td></tr>'.
				'<tr><td>Phone</td><td>E-mail</td>'.
				'<tr><td valign="top">'.
 				drupal_render($form['phone']).
 				'</td><td>'.
 				drupal_render($form['email']).
 				'</td></tr>'.
 				'</table>';
   $output .= drupal_render($form);
   return $output;
}
 
function stylist_add_discounts_for_customers_form($form_state,$uid){
	$form['f_name'] = array(
							/*'#title' => t('First Name'),*/
							'#type' => 'textfield',
							'#size' => 15,
						/*	'#prefix' => '<table id="tb-fname-lname"><tr><td valign="top">',
							'#suffix' => '</td>'*/
						);
	$form['l_name'] = array(
							/*'#title' => t('Last Name'),*/
							'#type' => 'textfield',
							'#size' => 15,
						/*	'#prefix' => '<td valign="top">',
							'#suffix' => '</td></tr></table>'*/
						);
	$form['rate'] = array(
							/*'#title' => t('Discounted Rate(Dollars)'),*/
							'#type' => 'textfield',
							'#size' => 3
						);
	$form['uid'] = array(
					'#type'  => 'hidden',
					'#value' => $uid,
				);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Add'),
	);
  return $form;
  }
 function theme_stylist_add_discounts_for_customers_form($form) {
  $output = '<div><b>Please add clients to whom you would like to offer special rates.</b></div>';
  $output .= 	'<table id="tb-fname-lname">'.
				'<tr><td valign="top">First Name</td><td>Last Name</td><td>Discounted Hourly Rate</td></tr>'.
				'<tr><td valign="top">'.
				drupal_render($form['f_name']).
				'</td><td valign="top">'.
				drupal_render($form['l_name']).
				'</td><td>'.
				drupal_render($form['rate']).
				'</td></tr>'.
				'</table>';
  $output .= drupal_render($form);
  return $output;
}
 function stylist_add_discounts_for_customers_form_submit($form, &$form_state) {
	$fname = $form_state['values']['f_name'];
	$lname = $form_state['values']['l_name'];
	$rate = $form_state['values']['rate'];
	$uid = $form_state['values']['uid'];
	//styleforhire_debug($uid,"uid");
	//styleforhire_debug($rate,"rate");
	//styleforhire_debug($fname,"fname");
	//styleforhire_debug($lname,"lname");
	/*$data = array(
    'StylistID' => (int)$uid,
    'StylistHourlyRate' => (int)$rate,
    'FirstName' => $fname,
    'LastName' => $lname,
	'CustomerID' => -1
	);
  drupal_write_record('stylist_special_rate', $data);*/
  db_query("INSERT INTO {stylist_special_rate} (StylistID, StylistHourlyRate, FirstName, LastName)
			VALUES (%d, %d, '%s', '%s')", $uid, $rate, $fname, $lname);
 }
 function stalk_customer($level,$fname,$lname,$comp,$add1,$add2,$city,$state,$zip,$phone,$stylist_name,$price){
	if(STALKING_ON == TRUE){
			
			if($level == 0) $level = "Customer not in the stylist search radius";
			else $level = "Level - ".$level;
			$params = array(
						'subject' => 'Stalking: '.$level,
						'body' => 'Stalking-FirstName-'.$fname.
									':LastName-'.$lname.
									':Company-'.$comp.
									':Address1-'.$add1.
									':Address2-'.$add2.
									':City-'.$city.
									':State-'.$state.
									':Zip-'.$zip.
									':Phone-'.$phone.
									':Stylist Name-'.$stylist_name.
									':Price-'.$price
						);
			$message = drupal_mail(
					'styleforhire',
					'stalking',
					'subu.sundaram@styleforhire.com',
					language_default(),
					$params
			);
		}
 }
 function styleforhire_no_stylist_in_area($step){
	
	$output = '';
	if(strcmp($step,'step1') == 0){
	//drupal_set_title(t('Thank you for your recent appointment with a Style for Hire stylist!'));	
	//$heading = '<h1>'.t('Thank you for your interest in Style for Hire! ').'</h1>';
	//$output .= $heading.'<div class="para-with-space">We\'re so sorry we do not currently have Stylists in your zone.  We are always adding new talent though, so please sign up below to receive updates regarding Stylists in your area.  Registering here will automatically deposit a credit of $25 in your account to be used toward a future appointment. </div>';	
	//$output .= '<div class="para-with-space">Note: we may have a Stylist in a nearby zone.  To inquire about Stylists closest to you and related travel charges, please email your address to service@styleforhire.com.</div>';	
	$ucode = 12;
	
	$output .= drupal_get_form('styleforhire_no_stylist_in_area_form', $ucode);
	$output .= '<div class="para-with-space"><br>Note: we may have a Stylist in a nearby zone.  To inquire about those closest to you and related travel charges, please email your address to service@styleforhire.com.<br></div>';	
	//$output .= '<div class="para-with-space"><br>For all other inquiries, please email us at service@styleforhire.com</div>';
	//$output .= '<div class="para-with-space">Thank you!<br>The Style for Hire team</div>';
	}
	else{
	$output = '<div class="para-with-space">Thank you for registering with Style for Hire!  A confirmation has been sent to your provided email address.</div>';
	//$output .= '<div class="para-with-space">We appreciate your patience as we continue to grow and we will let you know as soon as we have a Stylist in your area.  As a token of our thanks, we have added a $25 credit to your account which can be used toward a future appointment.</div>';	
	}
	return $output;  
 }

 function styleforhire_no_stylist_in_area_form($form_state, $ucode) {
 
		/*$form['registration'] = array(
				'#type' => 'fieldset'
			);*/

		$form['registration']['fname'] = array(
                '#title' => t('First Name'),
                '#type' => 'textfield',
                '#size' => 16,
			    '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['fname']) ? $form_state['storage']['values'][1]['fname'] : '',
				'#prefix' => '<table id="tb-fname-lname"><tr><td valign="top">',	
				'#suffix' => '</td>',
            );
            /* subu changng the block below to two text fields - first name and last name */
            $form['registration']['lname'] = array(
                '#title' => t('Last Name'),
                '#type' => 'textfield',
                '#size' => 16,
                '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['lname']) ? $form_state['storage']['values'][1]['lname'] : '',
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
            );
			
			$form['registration']['address1'] = array(
				'#title' => t('Address1'),
				'#type' => 'textfield',
				'#description' => '',
				'#size' => 40,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['address1']) ? $form_state['storage']['values'][1]['address1'] : '',
				'#prefix' => '<table id="tb-address"><tr><td valign="top">',	
				'#suffix' => '</td>',
			);
			$form['registration']['city'] = array(
				'#title' => t('City'),
				'#type' => 'textfield',
				'#size' => 12,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['city']) ? $form_state['storage']['values'][1]['city'] : '',
				'#prefix' => '<table id="tb-city-state"><tr><td valign="top">',	
				'#suffix' => '</td>',
				);

			$form['registration']['state'] = array(
				'#title' => t('State/Province'),
				'#type' => 'select',
				'#options' => styleforhire_states_full(),/* subu changed from styleforhire_states() to accomodate the state bug when existing address are selected in the billing page */
				'#max_length' => 2,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['state']) ? $form_state['storage']['values'][1]['state'] : '',
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
				);

			$form['registration']['zip'] = array(
				'#title' => t('Zip'),
				'#type' => 'textfield',
				'#size' => 5,
				'#max_length' => 5,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['zip']) ? $form_state['storage']['values'][1]['zip'] : '',
				'#prefix' => '<table id="tb-zip-phone"><tr><td valign="top">',	
				'#suffix' => '</td>',
				);
			
			
			$form['registration']['phone'] = array(
                '#title' => t('Phone Number'),			
                '#type' => 'textfield',
				/*'#description' => t('format: 000-000-0000'),*/
                '#size' => 12,
                '#max_length' => 12,
                '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['phone']) ? $form_state['storage']['values'][1]['phone'] : '',
				'#prefix' => '<td valign="top">',
				'#suffix' => '</td></tr></table>',
            );
			$form['registration']['name'] = array(
                '#title' => t('Username'),
                '#type' => 'textfield',
                '#size' => 16,
			    '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['nname']) ? $form_state['storage']['values'][1]['name'] : '',
				'#prefix' => '<table id="tb-uname"><tr><td valign="top">',	
				'#suffix' => '</td>',
            );
			$form['registration']['pass'] = array(
                '#title' => t('Password'),
                '#type' => 'password',
                '#size' => 16,
			    '#required' => true,
                '#default_value' => !empty($form_state['storage']['values'][1]['pass']) ? $form_state['storage']['values'][1]['pass1'] : '',
				'#prefix' => '<td valign="top">',	
				'#suffix' => '</td></tr></table>',
            );
			$form['registration']['mail'] = array(
				'#title' => t('Email'),
				'#type' => 'textfield',
				'#size' => 30,
				'#max_length' => 30,
				'#required' => true,
				'#default_value' => !empty($form_state['storage']['values'][1]['mail']) ? $form_state['storage']['values'][1]['mail'] : '',
				'#prefix' => '<table id="tb-email"><tr><td valign="top">',	
				'#suffix' => '</td></tr></table>',
				);

  $form['registration']['rating_ucode'] = array(
  		'#type' => 'hidden',
			'#value' => $ucode,
	);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#ajaxsubmit'] = TRUE;
  //$form['#ajaxsubmit_callbacks'] = array('');
  $form['#submit'][] = 'styleforhire_no_stylist_in_area_form_submit';

  return $form;
}

function styleforhire_no_stylist_in_area_form_submit($form, &$form_state) {
	//styleforhire_debug('begin', 'styleforhire_no_stylist_in_area_form_submit begin');
	$name = $form_state['values']['name'];
	$mail = $form_state['values']['mail'];
	$pass = $form_state['values']['pass'];
	$newUser = array(
      'name' => $name,
      'init' => $mail,
      'mail' => $mail,
      'pass' => $pass,
      'status' => 1
    );
	//styleforhire_debug('load', 'styleforhire_no_stylist_in_area_form_submit load');
	$account = user_save('', $newUser);
	//watchdog('user', t('New user: %name %email.', array('%name' => $name, '%email' => '<' . $mail . '>')), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));
	//$account = user_load(array('mail' => 'kundi@gmail.com'));

	// Terminate if an error occured during user_save().
	if (!$account) {
	//styleforhire_debug('no account', 'styleforhire_no_stylist_in_area_form_submit');
			drupal_set_message("Error saving user account!");
	}
	
	//styleforhire_debug('bef stdclass', 'styleforhire_no_stylist_in_area_form_submit');
	$profile_node = new stdClass();
	styleforhire_debug('aft stdclass', 'styleforhire_no_stylist_in_area_form_submit');
	$profile_node->type = "profile";
	$profile_node->title = "Profile[uid: ".$account->uid."]";
	$profile_node->uid = $account->uid;
	$profile_node->field_first_name[0]['value'] = $form_state['values']['fname'];
	$profile_node->field_last_name[0]['value'] = $form_state['values']['lname'];
	$profile_node->field_zip[0]['value'] = $form_state['values']['zip'];
	$profile_node->field_address1[0]['value'] = $form_state['values']['address1'];
	$profile_node->field_city[0]['value'] =$form_state['values']['city'];
	$profile_node->field_state[0]['value'] = $form_state['values']['state'];
	$profile_node->field_phone_num[0]['value'] = $form_state['values']['phone'];
	node_save($profile_node);
	
	//gift certificate
	$cert_code = uc_gift_certificate_mKey();
	$certArray = array(
      'name' => 'NoStylistinAreaGiftCertificate',
      'cert_code' => $cert_code,
      'user_id' => $account->uid,
      'value' => '25',
    );
	$success = drupal_write_record('uc_gift_certificates', $certArray);
	$account->password = $pass; // Add plain text password into user account to generate mail tokens.
	 _user_mail_notify('register_no_approval_required', $account);
	 $dest = drupal_get_destination();
	 $_REQUEST['destination'] = 'no-stylist-in-area/thanks';
	drupal_goto('');//BUG - need to reset $_REQUEST outside before calling drupal_goto.
	$_REQUEST['destination'] = $dest;

}
function styleforhire_no_stylist_in_area_form_validate($form, &$form_state) {
		
			if(strlen($form_state['values']['zip']) < 5) {
				form_set_error( 'zip', t('Zip must have 5 digits.'));
			}
			/* subu copied password validation from logintobogan */
			$pass = $form_state['values']['pass'];
			//if (!strlen($pass)) form_set_error('password', t('You must enter a password.'));
			if (ereg("[^\x80-\xF7[:graph:] ]", $pass)) form_set_error('password', t('The password contains an illegal character.'));
			if (preg_match('/[\x{80}-\x{A0}'.          // Non-printable ISO-8859-1 + NBSP
                   '\x{AD}'.                 // Soft-hyphen
                   '\x{2000}-\x{200F}'.      // Various space characters
                   '\x{2028}-\x{202F}'.      // Bidirectional text overrides
                   '\x{205F}-\x{206F}'.      // Various text hinting characters
                   '\x{FEFF}'.               // Byte order mark
                   '\x{FF01}-\x{FF60}'.      // Full-width latin
                   '\x{FFF9}-\x{FFFD}]/u',   // Replacement characters
                   $pass)) {
				form_set_error('password',t('The password contains an illegal character.'));
			}
			/*if (strlen($pass) > 15) form_set_error('password',t('The password is too long: it must be between 8 and 15 characters.'));
			$min_pass_length = 8;
			if ($min_pass_length && strlen($pass) < $min_pass_length) form_set_error('password',t("The password is too short: it must be between %min_length and 15 characters.", array('%min_length' => $min_pass_length)));
			*/
			/* subu copied password validation from logintobogan */
			/* subu validating name  and mail*/
		//	form_set_error('name',user_validate_name($form_state['values']['name']));
		//	form_set_error('mail',user_validate_mail($form_state['values']['mail']));
			
			//check if the user exists
			$existing_user = user_load(array('name' => $form_state['values']['name']));
			if ($existing_user->uid) { form_set_error('name', t('The username is already taken. Please select a different name.')); }
			$mail = $form_state['values']['mail'];
			$existing_user = user_load(array('mail' => $mail));
			if ($existing_user->uid) { form_set_error('mail', t('This e-mail address is already taken.')); }
}

function styleforhire_timezone($region){
$timezone = "America/New_York";
switch($region){
			case 'North East': break;
			case 'East Coast': break;
			case 'South': $timezone="America/Chicago"; break;
			case 'Mid West': $timezone="America/Chicago"; break;
			case 'Pacific Northwest': $timezone="America/Los_Angeles"; break;
			case 'West Coast': $timezone="America/Los_Angeles"; break;
			case 'Puerto Rico': break;
			case 'Hawaii': $timezone="Pacific/Honolulu"; break;
			case 'Arizona': $timezone="America/Denver"; break;
			case 'Mountain': $timezone="America/Denver"; break;
		}
	return $timezone;
}
