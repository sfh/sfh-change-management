<?php
// $Id: appointment_manage.module $


// Implementation of hook_theme()
function appointment_manage_theme() {

  return array(
		'appointment_manage_main_tpl' => array(
			'template'=>'appointment_manage.main',
			'arguments' => array('data'=>NULL),
		),
		'book_custom_appointment_main_tpl' => array(
			'template'=>'book_custom_appointment.main',
			'arguments' => array('form'=>NULL),
		)
		
  );
}

// implementation of hook_menu()
function appointment_manage_menu() {
  $items = array();
	

		$items['appointment_manage'] = array(
			'title' => t('Appointment manage'),
			'page callback' => 'appointment_manage_time',
		//	'access arguments' => array('administer site configuration'),
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK,			   
		);			   

	
	  $items['rating-stylist'] = array(
		  'page callback' => 'appointment_manage_rating_stylist',
		  'access arguments' => array('access content'),
		  'type' => MENU_CALLBACK,
    );

	$items['rating-stylist-success'] = array(
		'page callback' => 'appointment_manage_rating_stylist_success',
		'access arguments' => array('view eskifurimgsys'),
		'type' => MENU_CALLBACK,
    );
	$items['book_custom_appointment'] = array(
			'title' => t('Custom Appointments'),
			'page callback' => 'book_custom_appointment',
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK,			   
		);	
	
  return $items;
}

/*
// Implementation of hook_perm()
function appointment_manage_perm() {
  return array('view appointment_manage', 'insert appointment_manage', 'update appointment_manage', 'delete appointment_manage');
}
*/

function appointment_manage_rating_stylist() {
  drupal_add_js(drupal_get_path('module', 'appointment_manage') .'/js/appointment_manage.js');
  //drupal_add_css(drupal_get_path('module', 'appointment_manage') .'/css/appointment_manage.css');
	$output = '';
	//drupal_set_title(t('Thank you for your recent appointment with a Style for Hire stylist!'));	
	$heading = '<h1>'.t('Thank you for your recent appointment with a Style for Hire stylist!').'</h1>';
	$output .= $heading.'<div class="para-with-space">Your feedback helps us improve our service. Please rate your stylist in the following areas.</div>';	
	$form_close['close'] = array(
    '#type' => 'button',
    '#value' => t('Close'),
    '#attributes' => array('class' => 'rating_form_close'),
  );
  $ucode = arg(1);
  $output_close = drupal_render($form_close);
  $output .= '<div style="display:none;" class="thanksbox">Thanks for you feedback!<br><br>We look forward to working with you in the future.<br><br><div align="center">'.$output_close.'</div></div>';
  $output .= drupal_get_form('appointment_manage_rating_stylist_form', $ucode);
  
	return $output;  
}

function appointment_manage_rating_stylist_form($form_state, $ucode) {
 
	$rating_star = '<div style="width:80px; display:inline; float:left;">Timeliness&nbsp;</div>' . '<div class="rating_timelines">'. theme_fivestar_preview_widget('default') . '</div>';
	$rating_star .= '<div style="width:80px; display:inline; float:left;">Courtesy&nbsp;</div>' . '<div class="rating_courtesy">'. theme_fivestar_preview_widget('default') . '</div>';
	$rating_star .= '<div style="width:80px; display:inline; float:left;">Expertise&nbsp;</div>' . '<div class="rating_expertise">'. theme_fivestar_preview_widget('default') . '</div>';
	$rating_star .= '<div style="width:80px; display:inline; float:left;">Attitude&nbsp;</div>' . '<div class="rating_attitude">'. theme_fivestar_preview_widget('default') . '</div>';

 
  $form['rating_star'] = array('#value'=> $rating_star);
  $form['rating_comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment'),
    '#default_value' => '',
    '#required' => FALSE,
    '#cols' => 60,
    '#rows' => 6,
	  '#resizable' => FALSE,
	  '#description' => '',
  );
  $form['rating_timelines'] = array(
  		'#type' => 'hidden',
			'#value' => 0,
	);  
  $form['rating_courtesy'] = array(
  		'#type' => 'hidden',
			'#value' => 0,
	);
  $form['rating_expertise'] = array(
  		'#type' => 'hidden',
			'#value' => 0,
	);  	
  $form['rating_attitude'] = array(
  		'#type' => 'hidden',
			'#value' => 0,
	);
  $form['rating_ucode'] = array(
  		'#type' => 'hidden',
			'#value' => $ucode,
	);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#ajaxsubmit'] = TRUE;
  //$form['#ajaxsubmit_callbacks'] = array('');
  $form['#submit'][] = 'appointment_manage_rating_stylist_submit';

  
  return $form;
}



function appointment_manage_rating_stylist_submit($form, &$form_state) {
 
 $ucode = $form['#post']['rating_ucode'];
 $timelines = $form['#post']['rating_timelines'];
 $courtesy = $form['#post']['rating_courtesy'];
 $expertise = $form['#post']['rating_expertise'];
 $attitude = $form['#post']['rating_attitude'];
 $status = 1;
 $credit = 5;
 $rating_date = time();
 $comment = $form['#post']['rating_comment'];
 
  db_query("UPDATE  {rating_stylist} 
    SET timelines=%d, 
        courtesy=%d,
        expertise=%d, 
        attitude=%d, 
        status=%d, 
        credit=%f, 
        comment='%s', 
        rating_date=%d 
    WHERE ucode='%s'", 
      $timelines, $courtesy, $expertise, $attitude, $status, $credit, $comment, $rating_date, $ucode);

}


function appointment_manage_rating_stylist_success() {
  $output = '<div>as;dj;ajg jag;ljadf;lgj la;jglajgj;gddsa</div>';
  echo $output;
}

function book_custom_appointment(){
global $user;
  if ( ! (	isset($user->roles[3]) OR
			isset($user->roles[8]) OR 
			isset($user->roles[9]) OR 
			isset($user->roles[10])
		  )
	  ){
		drupal_access_denied();
	  }
	  
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.all.css', 'module');
  drupal_add_js(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/ui/ui.datepicker.js', 'module');
  $calendar_button = url(drupal_get_path('module', 'appointment_manage') . '/calendar.gif');
  $output  = "<script type=\"text/javascript\">
					$(document).ready(function() {
						$(\"#start\").datepicker({showOn: \"both\", buttonImage: '".
						$calendar_button.
					"', buttonImageOnly: true});
					}); 
			</script>";
  $output .= drupal_get_form('book_custom_appointment_form');
  //$output .= theme('book_custom_appointment_main_tpl', drupal_get_form('book_custom_appointment_form'));

  return $output;
}

function book_custom_appointment_form($form_state) {
	
	$form['customer'] = array('#type' => 'fieldset', '#title' => t('Client information'));
	$form['customer']['firstName'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['firstName'],
    '#title' => t('First Name'),
	'#size' => 15,
    '#id' => 'firstName',
	'#required' => TRUE
  );
  $form['customer']['lastName'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['lastName'],
    '#title' => t('Last Name'),
	'#size' => 15,
    '#id' => 'lastName',
	'#required' => TRUE
  ); 
  $form['customer']['email'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['email'],
    '#title' => t('Email'),
	'#size' => 25,
    '#id' => 'email',
	'#required' => FALSE
  );
  $form['customer']['phone'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['phone'],
    '#title' => t('Phone'),
	'#size' => 15,
    '#id' => 'phone',
	'#required' => FALSE
  );  
  $form['location'] = array('#type' => 'fieldset', '#title' => t('Location where the service will take place'));
  $form['location']['company'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['company'],
    '#title' => t('Location.'),
	'#size' => 15,
    '#id' => 'company',
	'#required' => TRUE
  );
  $form['location']['city'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['city'],
    '#title' => t('City'),
	'#size' => 50,
    '#id' => 'city',
	'#required' => TRUE
  );
  $form['location']['state'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['state'],
    '#title' => t('State'),
	'#size' => 50,
    '#id' => 'state',
	'#required' => TRUE
  );
  $form['location']['zip'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['zip'],
    '#title' => t('Zip'),
	'#size' => 10,
    '#id' => 'zip',
	'#required' => FALSE
  );
  $form['appointment_details'] = array('#type' => 'fieldset', '#title' => t('Appointment Details'));
  $form['appointment_details']['start'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['start'],
    '#title' => t('Date'),
	'#size' => 15,
    '#id' => 'start',
	'#required' => TRUE
  );
  $options_array = array();  
  for ($i=0; $i<=20; $i=$i+0.25 ) {
	$hrs = (int)$i;
	$mins = ($i-$hrs)*60;
	$val = ($i<1)?$mins." mins":$hrs." hrs ".(($mins>0)?$mins." mins":"");
	if($i == 0) $val = "Custom";
	$options_array[$i*60*60] = $val;
  }
  $form['appointment_details']['duration'] = array(
      '#type' => 'select',
      '#default_value' => 'Custom',
	  '#title' => t('Duration(if applicable)'),
      '#options' => $options_array,
	  '#required' => TRUE
  );
  $form['appointment_details']['rate'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['rate'],
    '#title' => t('Total Charge'),
	'#size' => 10,
    '#id' => 'rate',
	'#required' => TRUE
  );
 $form['appointment_details']['stylist_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Stylist Name'),
	'#size' => 30,
    '#id' => 'name'
  );
 $form['appointment_details']['comments'] = array (
			'#type' => 'textarea',
			'#title' => t('Comments'),
			'#cols' => 100,
			'#rows' => 2,
			'#resizable' => FALSE,
			'#required' => TRUE
	);
 $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
 $form['#validate'][] = 'book_custom_appointment_validate';
 $form['#submit'][] = 'book_custom_appointment_submit';
 
 return $form;
}
function book_custom_appointment_validate(&$form, &$form_state){
	$form_values	= $form_state['values'];
	$rate	= (int)$form_values['rate'];
	if($rate<=0) drupal_set_message("Please make sure the Rate for the appointment is a number and greater than 0.");
	
}
function book_custom_appointment_submit($form, &$form_state) {
	global $user;
	//var_dump($form['#post']);
	$stylist_name = $form['#post']['stylist_name'];
	$comments = $form['#post']['comments'];
	$start = $form['#post']['start'];
	$duration = $form['#post']['duration'];
	$first_Name = $form['#post']['firstName'];
	$last_Name = $form['#post']['lastName'];
	//$address1 = $form['#post']['address1'];
	//$address2 = $form['#post']['address2'];
	$company = $form['#post']['company'];
	$city = $form['#post']['city'];
	$state = $form['#post']['state'];
	$zip = $form['#post']['zip'];
	$phone = $form['#post']['phone'];
	$email = $form['#post']['email'];
	$rate = $form['#post']['rate'];
	
	
    date_default_timezone_set('America/New_York');
    $node->type = "appointment";
	$node->uid = $user->uid;
	$node->field_comments[0]['value'] = 'Custom Appointment - '.$stylist_name.' - '.$comments;
	$node->status = 0;
	$node->field_apt_stylist[0]['uid'] = 0;
	$node->field_apt_type[0]['nid'] = 2261;// This is the custom appointment. Change it to 578 if it is the demo server.
	$node->field_apt_status[0]['value'] = 'Confirmed';
	$start_time = $start;
	$end_time = $start + $duration;
	$node->field_extra_personal_shopping[0]['value'] = 0;//$extra_hours;

		$node->field_apt_date[0] = array(
			  "value" => $start_time,
			  "value2"=> $end_time,
			  "timezone" => "UTC",
			  "offset" => 0,
			  "offset2" => 0,
			  "timezone_db" => "UTC",
			  "date_type" => "datestamp"
		);

		
		$node->field_apt_fname[0]['value'] = $firstname;
		$node->field_apt_name[0]['value'] = $lastName;
		$node->field_apt_company[0]['value'] = $company;
		$node->field_apt_address1[0]['value'] = $address1;
		$node->field_apt_address2[0]['value'] = $address2;
		$node->field_apt_city[0]['value'] = $city;
		$node->field_apt_state[0]['value'] = $state;
		$node->field_apt_zip[0]['value'] = $zip;
		$node->field_apt_phone[0]['value'] = $phone;
		$node->field_apt_email[0]['value'] = $email;
		$node->field_apt_price[0]['value'] = $rate;
		$node->comment = 0;
		

		styleforhire_add_apt(
			$node->field_apt_type[0]['nid'],
			$node,
			$node->field_apt_price[0]['value'],
			array(
				"requested_hours" => $duration,
				"extra_hours" => 0,
				"date" => $start_time//$form_state['storage']['values'][2]['chosen_date']
			),
			NULL
		);
		
		drupal_goto("cart");
}

function appointment_manage_time() {
  global $user;
  if ( ! (	isset($user->roles[8]) OR 
			isset($user->roles[9]) OR 
			isset($user->roles[10])
		  )
	  ){
		drupal_access_denied();
	  }
  $output = '';
 
  drupal_add_css(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/themes/default/ui.all.css', 'module');
  drupal_add_js(drupal_get_path('module', 'jquery_ui') .'/jquery.ui/ui/ui.datepicker.js', 'module');
  
  drupal_set_title(t('Please fill these dates to see the appointments in this timeframe.'));
  date_default_timezone_set('America/New_York');
   
  if ( ((isset($_POST['startDate'])) && (!empty($_POST['startDate']))) && ((isset($_POST['endDate'])) && (!empty($_POST['endDate']))) ) {
    $_SESSION['startDate'] = $_POST['startDate'];
    $_SESSION['endDate'] = $_POST['endDate'];
  } 
    
     
  $output .= appointment_manage_formdate_show_form();   

  date_default_timezone_set('America/New_York');
  if ( ((isset($_SESSION['startDate'])) && (!empty($_SESSION['startDate']))) && ((isset($_SESSION['endDate'])) && (!empty($_SESSION['endDate']))) ) {
    $startDate = explode('/', $_SESSION['startDate']);
    $endDate = explode('/', $_SESSION['endDate']);
        
    $start_dateM = $startDate[0];
    $start_dateD = $startDate[1];
    $start_dateY = $startDate[2];    
 
    $end_dateM = $endDate[0];
    $end_dateD = $endDate[1];
    $end_dateY = $endDate[2];
   
    $sdate = mktime(0, 0, 0, $start_dateM, $start_dateD, $start_dateY); 
    $edate = mktime(0, 0, 0, $end_dateM, $end_dateD, $end_dateY);
    
    $appointment_result = db_query('SELECT * FROM {content_type_appointment} 
                                                    WHERE field_apt_date_value >= %d 
                                                      AND field_apt_date_value2 <= %d 
                                                      AND field_apt_date_value IS NOT NULL 
                                                      AND field_apt_date_value2 IS NOT NULL', $sdate, $edate);
    $items = array();
    $data = array();
    $elem = 0;
    while($item = db_fetch_object($appointment_result)) {
      $items[] = $item;
      $user_object = user_load($item->field_apt_stylist_uid);
      $date_appointment = date("m/d/Y", $item->field_apt_date_value).'/'.date("m/d/Y", $item->field_apt_date_value2);
      
      $sdate_appointment = date("m/d/Y", $item->field_apt_date_value);
      $edate_appointment = date("m/d/Y", $item->field_apt_date_value2);
      $data[$elem]['appt_id'] = $item->vid;
      $data[$elem]['stylist'] = $user_object->name . '<br>' . $user_object->mail;
      if ($sdate_appointment != $edate_appointment) {
        $data[$elem]['date'] = $sdate_appointment.'<br>'.$edate_appointment;
      } else {
        $data[$elem]['date'] = $sdate_appointment;
      }
      
      $appointment_type_result = db_fetch_object(db_query('SELECT title FROM {node} WHERE nid = %d', $item->field_apt_type_nid));      
      
      $data[$elem]['stime'] = date("h:i a", $item->field_apt_date_value);
      $data[$elem]['etime'] = date("h:i a", $item->field_apt_date_value2);
      $data[$elem]['customer'] = $item->field_apt_name_value. ' ' . $item->field_apt_fname_value . '<br>' . $item->field_apt_phone_value;
      $data[$elem]['appointment_type'] = $appointment_type_result->title;
	  $data[$elem]['appointment_status'] = $item->field_apt_status_value;

      $data[$elem]['increments'] = appointment_manage_addtime_show($item->vid, $item->field_apt_date_value2);
      
      $elem++;
    }                                                 
  }
  
      $header['appt_id'] = 'Appnt ID';
	  $header['stylist'] = 'Stylist';
      $header['date'] = 'Date';
      $header['stime'] = 'Start date';
      $header['etime'] = 'End date';
      $header['customer'] = 'Customer';
      $header['appointment_type'] = 'Appointment type';
	  $header['appointment_status'] = 'Status';
      $header['increments'] = 'Add 30 minute increments';
  
  $output .= theme('table', $header, $data);
  $output .= theme('appointment_manage_main_tpl', $data);



	return $output;
}



function appointment_manage_formdate_show_form() {
  return drupal_get_form('appointment_manage_formdate_form');
}

function appointment_manage_formdate_form($form_state) {
  $form['startDate'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['startDate'],
    '#title' => t('From'),
    '#id' => 'startDate'
  );
  $form['endDate'] = array(
    '#type' => 'textfield',
    '#value' => $_SESSION['endDate'],
    '#title' => t('To'),
    '#id' => 'endDate'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  $form['#validate'][] = 'appointment_manage_formdate_validate';
  $form['#submit'][] = 'appointment_manage_submit';
  
  return $form;
}


function appointment_manage_addtime_show($appointment_id='0', $old_time=0) {
  return drupal_get_form('appointment_manage_addtime_form', $appointment_id, $old_time);
}
function appointment_manage_addtime_form($form_state, $appointment_id='0', $old_time=0) {
  $cid = uc_cart_get_id();
  uc_cart_empty($cid);
  $options_array = array();  
  for ($i=0.25; $i<=10; $i=$i+0.25 ) {
    $options_array[$i*100] = $i.' hrs';
  }
  $form['comments'] = array (
			'#type' => 'textarea',
			'#title' => t('Comments'),
			'#cols' => 25,
			'#rows' => 2,
			'#resizable' => FALSE,
		);
  $form['time'] = array(
      '#type' => 'select',
      '#default_value' => 'teaser',
      '#options' => $options_array,
  );
  
  $form['appointment_id'] = array(
  		'#type' => 'hidden',
			'#value' => $appointment_id,
	);	

  $form['old_time'] = array(
  		'#type' => 'hidden',
			'#value' => $old_time,
	);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  $form['#submit'][] = 'appointment_manage_addtime_submit';
  //$form['#validate'][] = 'appointment_manage_formdate_validate';
  //$form['#submit'][] = 'appointment_manage_submit';
  
  return $form;
}



function appointment_manage_formdate_validate($form, &$form_state) {
}


function appointment_manage_addtime_submit($form, &$form_state) {
   date_default_timezone_set('America/New_York');
	
   $time = $form['#post']['time']*0.6;
   $appt_duration = (float)($form['#post']['time']*0.01);
   $old_time = $form['#post']['old_time'];
   $vid =  $form['#post']['appointment_id'];
   $comments = $form['#post']['comments'];
   
   $appointment_result = db_query('select * from content_type_appointment c, node n where n.vid=c.vid and c.vid=%d',$vid);
									
   $item = db_fetch_object($appointment_result);
      
	if (module_exists('styleforhire')) {
			$rate = styleforhite_get_stylist_rate((int)$item->field_apt_stylist_uid);
	}
	else{
		return;
	}
	/* Bug - 10/25/2011 Start - If the customer is a preferred customer for the stylist, use the rate that stylist would charge the 
	*	customer.
	*/
	$result = db_query("SELECT StylistHourlyRate FROM stylist_special_rate 
							WHERE FirstName='%s' AND LastName='%s' AND StylistID=%d",
							trim($item->field_apt_fname_value),
							trim($item->field_apt_name_value),
							(int)$item->field_apt_stylist_uid);
	$rs = db_result($result);
	if ( !empty($rs)) {
			$rate = $rs;
		}
	/*
	Bug - 10/25/2011 End
	*/
  // db_query("UPDATE {content_type_appointment} SET field_apt_date_value2='%d' WHERE vid=%d ", $new_time, $vid);
	$node->type = "appointment";
	$node->uid = $item->uid;
	$node->field_comments[0]['value'] = 'Appointment Extension - '.$comments;
	$node->status = 0;
	$node->field_apt_stylist[0]['uid'] = $item->field_apt_stylist_uid;//$form_state['storage']['values'][1]['stylist_uid'];
	$node->field_apt_type[0]['nid'] = $item->field_apt_type_nid;//$service_id;
	$node->field_apt_status[0]['value'] = 'Confirmed';
	$start_time = $old_time;
	$end_time = $start_time + $appt_duration*60*60;
	$node->field_extra_personal_shopping[0]['value'] = 0;//$extra_hours;

		$node->field_apt_date[0] = array(
			  "value" => $start_time,
			  "value2"=> $end_time,
			  "timezone" => "UTC",
			  "offset" => 0,
			  "offset2" => 0,
			  "timezone_db" => "UTC",
			  "date_type" => "datestamp"
		);

		
		$node->field_apt_fname[0]['value'] = $item->field_apt_fname_value;//$form_state['storage']['values'][1]['fname'];/* subu added the below 2 lines to have first and last names */
		$node->field_apt_name[0]['value'] = $item->field_apt_name_value;//$form_state['storage']['values'][1]['lname'];/* subu added this */
		$node->field_apt_company[0]['value'] = '';//$form_state['storage']['values'][1]['company'];/* subu added this */
		$node->field_apt_address1[0]['value'] = $item->field_apt_address1_value;//$form_state['storage']['values'][1]['address1'];
		$node->field_apt_address2[0]['value'] = $item->field_apt_address2_value;//$form_state['storage']['values'][1]['address2'];
		$node->field_apt_city[0]['value'] = $item->field_apt_city_value;//$form_state['storage']['values'][1]['city'];
		$node->field_apt_state[0]['value'] = $item->field_apt_state_value;//$form_state['storage']['values'][1]['state'];
		$node->field_apt_zip[0]['value'] = $item->field_apt_zip_value;//$form_state['storage']['values'][1]['zip'];
		$node->field_apt_phone[0]['value'] = $item->field_apt_phone_value;//$form_state['storage']['values'][1]['phone'];/* subu added this */
		$node->field_apt_price[0]['value'] = $rate*$appt_duration;
		$node->comment = 0;
		
		//node_save($node);
		//var_dump($node); exit;

		styleforhire_add_apt(
			$node->field_apt_type[0]['nid'],
			$node,
			$node->field_apt_price[0]['value'],
			array(
				"requested_hours" => $appt_duration,
				"extra_hours" => $extra_hours,
				"date" => $start_time//$form_state['storage']['values'][2]['chosen_date']
			),
			NULL
		);
		
		drupal_goto("cart");
}


// Implementation of hook_form_alter()
function appointment_manage_form_alter(&$form, $form_state, $form_id) {
   $register_dest = url('user/register');
  if( $_GET['destination'] === 'redeem'){
		$register_dest = url('user_registration_redirect_to_redeem');
	  }
	  
  if ($form_id == 'user_login') {
     $form['forgot'] = array('#value'=> '<a style="width:252px; font-size:0.85em;" class="popups" href=' . url('user/password') . '>Forgot your password?</a><br>', '#weight' => 10);
     $form['create'] = array('#value'=> '<div style="padding-top:20px;"><span style="font-weight:bold;">Click here to create a new account - </span>&nbsp;<a class="popups create_account_popup" href=' . $register_dest . '>Register now</a></div><br>', '#weight' => 20);
     
     //$form['submit'] = array('#weight' => 2);	
  }

}  
